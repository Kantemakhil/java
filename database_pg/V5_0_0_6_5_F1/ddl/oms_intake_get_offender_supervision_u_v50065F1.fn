CREATE OR REPLACE FUNCTION oms_owner.oms_intake_get_offender_supervision_u(p_offender_book_id bigint, p_username text)
 RETURNS character varying
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
DECLARE

      lv_level_code        varchar(12);
      lv_domain            reference_codes.domain%TYPE;
      lv_caseload_type     caseloads.caseload_type%TYPE;
      lv_level_description varchar(40);
      lv_value1            system_profiles.profile_value%TYPE;
      lv_value2            system_profiles.profile_value_2%TYPE;

      ref_cur CURSOR(p_sup_level text, p_domain text) FOR
         SELECT description
           FROM reference_codes
          WHERE domain = lv_domain
            AND code = p_sup_level;

      sys_cur CURSOR FOR
         SELECT profile_value, profile_value_2
           FROM system_profiles
          WHERE profile_type = 'CLIENT'
            AND profile_code = 'PENDING_STAT';   
BEGIN
lv_level_code    := pims_weight_get_sup_level_u(p_offender_book_id,p_username);
      lv_caseload_type := oms_intake_get_caseload_type_U(p_username);
      --IF lv_caseload_type = 'COMM' THEN
      --lv_domain := 'COM_SUP_LVLS';
      --ELSE
      --lv_domain := 'SUP_LVL_TYPE';
      --END IF;
      lv_domain := 'SUP_LVL_TYPE';
      OPEN ref_cur(lv_level_code, lv_domain);
      FETCH ref_cur
         INTO lv_level_description;
      CLOSE ref_cur;
      IF coalesce(lv_level_description::text, '') = ''
      THEN
         OPEN sys_cur;
         FETCH sys_cur
            INTO lv_value1, lv_value2;
         CLOSE sys_cur;
         IF (lv_caseload_type = 'COMM' and lv_value2 IS NOT NULL and  lv_value2::text <> '')
         THEN
            lv_level_description := lv_value2;
          elsif (lv_caseload_type = 'INST' and lv_value1 IS NOT NULL  and  lv_value1::text <> '') then 
          lv_level_description := lv_value1;
         END IF;
      END IF;
      RETURN lv_level_description;
   END;
  $function$
;
