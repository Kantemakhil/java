
PAYMENT_SCHEDULES_GET_GROUP_CODE{
SELECT group_code FROM obligation_groups WHERE group_id = :group_id
}

PAYMENT_SCHEDULES_CHK_RECURSIVE{
SELECT count(*) FROM offender_deductions WHERE offender_id = :off_id AND information_number = :v_info AND group_id = :grp_id AND max_recursive_amount IS NOT NULL
}

PAYMENT_SCHEDULES_GET_RECURSIVE_AMT{
SELECT max_recursive_amount FROM offender_deductions WHERE offender_id = :off_id AND information_number = :v_info AND group_id = :grp_id AND max_recursive_amount IS NOT NULL
}


PAYMENT_SCHEDULES_SELECT{
 --SELECT NVL(SUM(od.MAX_TOTAL_AMOUNT) ,0), NVL(SUM(od.DEDUCTION_AMOUNT) ,0) FROM OFFENDER_DEDUCTIONS od WHERE od.OFFENDER_ID =:ni_offender_id AND od.INFORMATION_NUMBER = DECODE(:vi_info, '-1', od.INFORMATION_NUMBER, :vi_info) AND od.group_ID = DECODE(:ni_grp_id, -1, od.group_ID, :ni_grp_id) AND od.EFFECTIVE_DATE <= TRUNC(SYSDATE) AND od.DEDUCTION_STATUS = 'A' AND EXISTS (SELECT 1 FROM DEDUCTION_TYPES dt WHERE od.DEDUCTION_TYPE= dt.DEDUCTION_TYPE AND dt.DEDUCTION_CATEGORY IN ( 'FXOB', 'CROB') AND dt.CASELOAD_CODE IN ('BOTH', 'COMM')) AND EXISTS (SELECT 1 FROM CASELOADS c WHERE od.CASELOAD_ID = c.CASELOAD_ID)
select coalesce(SUM(od.MAX_TOTAL_AMOUNT) , 0) as MAX_TOTAL_AMOUNT, coalesce(SUM(od.DEDUCTION_AMOUNT) , 0) as DEDUCTION_AMOUNT from OFFENDER_DEDUCTIONS od where od.OFFENDER_ID =:ni_offender_id and od.INFORMATION_NUMBER = case :vi_info when '-1' then od.INFORMATION_NUMBER else :vi_info end and od.group_ID = case :ni_grp_id::text when '-1' then od.group_ID else :ni_grp_id end and od.EFFECTIVE_DATE <= CURRENT_TIMESTAMP and od.DEDUCTION_STATUS = 'A' and exists ( select 1 from DEDUCTION_TYPES dt where od.DEDUCTION_TYPE = dt.DEDUCTION_TYPE and dt.DEDUCTION_CATEGORY in ( 'FXOB', 'CROB') and dt.CASELOAD_CODE in ('BOTH', 'COMM')) and exists ( select 1 from CASELOADS c where od.CASELOAD_ID = c.CASELOAD_ID)}

OFFENDER_PAYMENT_PLANS_UPDATE{
-- UPDATE OFFENDER_PAYMENT_PLANS OPP1 SET OPP1.ORIGINAL_OWING_AMOUNT = :owing_amount WHERE OPP1.OFFENDER_ID = :ni_offender_id AND OPP1.INFORMATION_NUMBER = :vi_info AND OPP1.GROUP_ID = :ni_grp_id AND OPP1.PAYMENT_PLAN_SEQ = (SELECT NVL(MIN(OPP2.PAYMENT_PLAN_SEQ),1) FROM OFFENDER_PAYMENT_PLANS OPP2 WHERE OPP2.INFORMATION_NUMBER = :vi_info AND OPP2.GROUP_ID = :ni_grp_id AND OPP2.OFFENDER_ID = :ni_offender_id)
update OFFENDER_PAYMENT_PLANS OPP1 set ORIGINAL_OWING_AMOUNT = :owing_amount, MODIFY_USER_ID = :modifyUserId , MODIFY_DATETIME = CURRENT_TIMESTAMP where OPP1.OFFENDER_ID = :ni_offender_id and OPP1.INFORMATION_NUMBER = :vi_info and OPP1.GROUP_ID = :ni_grp_id and OPP1.PAYMENT_PLAN_SEQ = ( select coalesce (MIN(OPP2.PAYMENT_PLAN_SEQ), 1) from OFFENDER_PAYMENT_PLANS OPP2 where OPP2.INFORMATION_NUMBER = :vi_info and OPP2.GROUP_ID = :ni_grp_id and OPP2.OFFENDER_ID = :ni_offender_id)}

 CURSOR_PAYPLAN{
SELECT PAYMENT_PLAN_ID, PAYMENT_PLAN_SEQ, OFFENDER_ID, START_DATE, END_DATE, FREQUENCY, MONTHLY, WEEKLY, BI_WEEKLY, TWICE_MONTHLY_1, TWICE_MONTHLY_2, AMOUNT, MODIFY_USER_ID, MODIFY_DATETIME, INFORMATION_NUMBER, OFFENDER_DEDUCTION_ID, PAYMENT_COMPLETION_DATE, GROUP_ID, LENIENCY_FLAG, PAYMENT_CLOSED_FLAG, PAYMENT_CLOSED_DATE, REGENERATION_FLAG, REGENERATION_DATE, ORIGINAL_OWING_AMOUNT, CASE_ID, CREATE_DATETIME, CREATE_USER_ID, SEAL_FLAG FROM OFFENDER_PAYMENT_PLANS WHERE PAYMENT_PLAN_ID = :NI_PLAN_ID AND PAYMENT_PLAN_SEQ = :NI_PLAN_SEQ
}

GET_DED_CUR{
SELECT COALESCE (SUM(OD.MAX_TOTAL_AMOUNT),0) MAX_TOTAL_AMOUNT, COALESCE (SUM(OD.DEDUCTION_AMOUNT),0) DEDUCTION_AMOUNT FROM OFFENDER_DEDUCTIONS OD WHERE OD.OFFENDER_ID = :NI_OFFENDER_ID AND OD.INFORMATION_NUMBER = CASE WHEN COALESCE(:VI_INFO::text,'')= '-1' THEN OD.INFORMATION_NUMBER ELSE :VI_INFO END AND OD.GROUP_ID = CASE WHEN COALESCE(:NI_GRP_ID::text,'')= '-1' THEN OD.GROUP_ID ELSE :NI_GRP_ID END AND OD.EFFECTIVE_DATE <= CURRENT_DATE AND OD.DEDUCTION_STATUS = 'A' AND EXISTS (SELECT 1 FROM DEDUCTION_TYPES DT WHERE OD.DEDUCTION_TYPE= DT.DEDUCTION_TYPE AND DT.DEDUCTION_CATEGORY IN ( 'FXOB', 'CROB') AND DT.CASELOAD_CODE IN ('BOTH', 'COMM')) AND EXISTS (SELECT 1 FROM CASELOADS C WHERE OD.CASELOAD_ID = C.CASELOAD_ID AND C.CASELOAD_TYPE = 'COMM')
}

GET_SCH_CUR_NEW{
SELECT COALESCE (SUM(OPS.PAYMENT_AMOUNT), 0) PAYMENT_AMOUNT, COALESCE (SUM(OPS.RECURSIVE_AMOUNT), 0) RECURSIVE_AMOUNT, COALESCE (SUM(OPS.PAID_AMOUNT), 0) PAID_AMOUNT, COALESCE(SUM(OPS.PAID_RECURSIVE_AMOUNT), 0) PAID_RECURSIVE_AMOUNT, MIN(OPS.PAYMENT_DATE) MINPAYMENT_DATE, MAX(OPS.PAYMENT_DATE) MAXPAYMENT_DATE FROM OFFENDER_PAYMENT_SCHEDULES OPS WHERE OPS.PAYMENT_PLAN_ID = :NI_PLAN_ID AND EXISTS ( SELECT 1 FROM OFFENDER_PAYMENT_PLANS OPP WHERE OPP.PAYMENT_PLAN_ID = :NI_PLAN_ID AND OPP.PAYMENT_PLAN_SEQ = OPS.PAYMENT_PLAN_SEQ AND OPP.PAYMENT_CLOSED_FLAG <> 'Y' AND OPP.PAYMENT_COMPLETION_DATE IS NULL ) 
}

GET_NO_MONTHS{ 
 SELECT  ROUND(MONTHS_BETWEEN(LAST_DAY(TO_DATE(:dLastDate, 'dd-mm-yyyy')),TO_DATE(:dFirstDate,' dd-mm-yyyy'))) as noMonths from dual
}

GET_N_MAX_TOTAL_AMOUNT{
SELECT ORIGINAL_OWING_AMOUNT FROM OFFENDER_PAYMENT_PLANS OPP WHERE OFFENDER_ID = :OFFENDER_ID AND INFORMATION_NUMBER = :INFORMATION_NUMBER AND GROUP_ID = :GROUP_ID AND PAYMENT_PLAN_SEQ = 1 
}

UPDATE_OFFENDER_PAYMENT_SCHEDULES{
-- UPDATE OFFENDER_PAYMENT_SCHEDULES OPS SET OPS.PAYMENT_AMOUNT = OPS.PAYMENT_AMOUNT + coalesce(:N_TOTAL_DIFF,0) WHERE OPS.PAYMENT_PLAN_ID = :NI_PLAN_ID AND OPS.PAYMENT_PLAN_SEQ = :NI_PLAN_SEQ AND OPS.PAYMENT_DATE = (SELECT MAX(OPS1.PAYMENT_DATE) FROM OFFENDER_PAYMENT_SCHEDULES OPS1 WHERE OPS1.PAYMENT_PLAN_ID = :NI_PLAN_ID AND OPS1.PAYMENT_PLAN_SEQ = :NI_PLAN_SEQ) 
update OFFENDER_PAYMENT_SCHEDULES OPS set PAYMENT_AMOUNT = OPS.PAYMENT_AMOUNT + coalesce(:N_TOTAL_DIFF, 0), MODIFY_USER_ID = :modifyUserId , MODIFY_DATETIME = CURRENT_TIMESTAMP where OPS.PAYMENT_PLAN_ID = :NI_PLAN_ID and OPS.PAYMENT_PLAN_SEQ = :NI_PLAN_SEQ and OPS.PAYMENT_DATE = ( select MAX(OPS1.PAYMENT_DATE) from OFFENDER_PAYMENT_SCHEDULES OPS1 where OPS1.PAYMENT_PLAN_ID = :NI_PLAN_ID and OPS1.PAYMENT_PLAN_SEQ = :NI_PLAN_SEQ)
}

DELETE_FM_OFFENDER_PAYMENT_SCHEDULES{
--DELETE FROM OFFENDER_PAYMENT_SCHEDULES WHERE PAYMENT_PLAN_ID = :NI_PLAN_ID AND PAYMENT_PLAN_SEQ = :NI_PLAN_SEQ AND PAYMENT_DATE >= TRUNC(SYSDATE) AND PAYMENT_AMOUNT = 0 
delete from OFFENDER_PAYMENT_SCHEDULES where PAYMENT_PLAN_ID = :NI_PLAN_ID and PAYMENT_PLAN_SEQ = :NI_PLAN_SEQ and PAYMENT_DATE >= CURRENT_TIMESTAMP and PAYMENT_AMOUNT = 0
}



GET_LAST_DAY{
SELECT LAST_DAY(TO_DATE(:DIDATE,'YYYY-MM-DD')) FROM DUAL 
}

GET_DATE_VALIDATED_D_DATE_RETURN{
SELECT TO_DATE(:V_MONTH||TO_CHAR(:NI_DAY, '09')||:V_YEAR, 'MMDDYYYY') FROM DUAL
}

INSERT_PAYMENT_SCHEDULES{
-- INSERT INTO OFFENDER_PAYMENT_SCHEDULES ( PAYMENT_PLAN_ID , PAYMENT_PLAN_SEQ , PAYMENT_DATE , INFORMATION_NUMBER , GROUP_ID , OFFENDER_DEDUCTION_ID , PAYMENT_AMOUNT , RECURSIVE_AMOUNT , PAID_AMOUNT , PAID_RECURSIVE_AMOUNT) VALUES ( :NI_PLAN_ID , :NI_PLAN_SEQ , :DI_DATE , NULL , :NI_GRP_ID , :NI_DED_ID , :NI_FIXED_AMT , 0 , 0 , 0)
insert into OFFENDER_PAYMENT_SCHEDULES ( PAYMENT_PLAN_ID , PAYMENT_PLAN_SEQ , PAYMENT_DATE , INFORMATION_NUMBER , GROUP_ID , OFFENDER_DEDUCTION_ID , PAYMENT_AMOUNT , RECURSIVE_AMOUNT , PAID_AMOUNT , PAID_RECURSIVE_AMOUNT, CREATE_USER_ID, CREATE_DATETIME, MODIFY_DATETIME ) values ( :NI_PLAN_ID , :NI_PLAN_SEQ , :DI_DATE , null , :NI_GRP_ID , :NI_DED_ID , :NI_FIXED_AMT , 0 , 0 , 0, :createUserId, CURRENT_TIMESTAMP , CURRENT_TIMESTAMP )
}

SET_PLAN_ENDDATE{
-- UPDATE OFFENDER_PAYMENT_PLANS SET END_DATE = :DI_END_DATE WHERE PAYMENT_PLAN_ID = :NI_PLAN_ID AND PAYMENT_PLAN_SEQ = :NI_PLAN_SEQ
update OFFENDER_PAYMENT_PLANS set END_DATE = :DI_END_DATE, MODIFY_USER_ID = :modifyUserId , MODIFY_DATETIME = CURRENT_TIMESTAMP where PAYMENT_PLAN_ID = :NI_PLAN_ID and PAYMENT_PLAN_SEQ = :NI_PLAN_SEQ
}

SET_RECUR_AMTS{
--UPDATE OFFENDER_PAYMENT_SCHEDULES SET PAYMENT_AMOUNT = :NI_RECUR_AMT WHERE PAYMENT_PLAN_ID = :NI_PLAN_ID AND PAYMENT_PLAN_SEQ = :NI_PLAN_SEQ; 
UPDATE OFFENDER_PAYMENT_SCHEDULES SET PAYMENT_AMOUNT = :NI_RECUR_AMT, MODIFY_USER_ID = :MODIFYUSERID , MODIFY_DATETIME = CURRENT_TIMESTAMP WHERE PAYMENT_PLAN_ID = :NI_PLAN_ID AND PAYMENT_PLAN_SEQ = :NI_PLAN_SEQ
}

SET_RECUR_AMTS_ONE{
-- UPDATE OFFENDER_PAYMENT_PLANS SET ORIGINAL_OWING_AMOUNT = ( SELECT SUM (PAYMENT_AMOUNT) FROM OFFENDER_PAYMENT_SCHEDULES OPS WHERE OPS.PAYMENT_PLAN_ID = :NI_PLAN_ID AND OPS.PAYMENT_PLAN_SEQ = :NI_PLAN_SEQ) WHERE PAYMENT_PLAN_ID = :NI_PLAN_ID AND PAYMENT_PLAN_SEQ = :NI_PLAN_SEQ
UPDATE OFFENDER_PAYMENT_PLANS SET ORIGINAL_OWING_AMOUNT = ( SELECT SUM (PAYMENT_AMOUNT) FROM OFFENDER_PAYMENT_SCHEDULES OPS WHERE OPS.PAYMENT_PLAN_ID = :NI_PLAN_ID AND OPS.PAYMENT_PLAN_SEQ = :NI_PLAN_SEQ), MODIFY_USER_ID = :MODIFYUSERID , MODIFY_DATETIME = CURRENT_TIMESTAMP WHERE PAYMENT_PLAN_ID = :NI_PLAN_ID AND PAYMENT_PLAN_SEQ = :NI_PLAN_SEQ
}

SET_LENIENCY_FLAG_LAST_DATE_CUR{
SELECT MAX(OPS.PAYMENT_DATE) AS PAYMENT_DATE FROM OFFENDER_PAYMENT_SCHEDULES OPS WHERE OPS.PAYMENT_PLAN_ID = :NI_PLAN_ID AND OPS.PAYMENT_PLAN_SEQ = :NI_PLAN_SEQ
}

SET_LENIENCY_FLAG_PAY_PLN_CUR{
SELECT OPP.END_DATE FROM OFFENDER_PAYMENT_PLANS OPP WHERE OPP.PAYMENT_PLAN_ID = :NI_PLAN_ID AND PAYMENT_CLOSED_FLAG <> 'Y' AND OPP.PAYMENT_PLAN_SEQ = :NI_PLAN_SEQ
}

GET_SYSTEM_PROFILE{
SELECT PROFILE_VALUE, PROFILE_VALUE_2 FROM SYSTEM_PROFILES WHERE PROFILE_TYPE = :VI_PROFILE_TYPE AND PROFILE_CODE = :VI_PROFILE_CODE
}

SET_LENIENCY_FLAG_UPDATE{
-- UPDATE OFFENDER_PAYMENT_PLANS SET LENIENCY_FLAG = 'Y' WHERE PAYMENT_PLAN_ID = :PAYMENT_PLAN_ID AND PAYMENT_CLOSED_FLAG <> 'Y'
update OFFENDER_PAYMENT_PLANS set LENIENCY_FLAG = 'Y', MODIFY_USER_ID = :modifyUserId , MODIFY_DATETIME = CURRENT_TIMESTAMP where PAYMENT_PLAN_ID = :PAYMENT_PLAN_ID and PAYMENT_CLOSED_FLAG <> 'Y'
}

GET_WEEKDAY{
SELECT RC.DESCRIPTION FROM REFERENCE_CODES RC WHERE RC.DOMAIN = 'PS_WEEKDAYS' AND RC.CODE = :VI_WK_CODE
}

PAYMENT_SCH_CUR{
SELECT PAYMENT_PLAN_ID, PAYMENT_PLAN_SEQ, PAYMENT_DATE FROM OFFENDER_PAYMENT_SCHEDULES OPS WHERE PAYMENT_PLAN_ID = :NI_PLAN_ID AND PAYMENT_PLAN_SEQ = :NI_PLAN_SEQ AND PAYMENT_DATE > SYSDATE() AND PAID_AMOUNT = 0
}

NUMBER_OF_PAYMENTS_LEFT{
SELECT COALESCE (COUNT(*),0) COUNT FROM OFFENDER_PAYMENT_SCHEDULES WHERE PAYMENT_PLAN_ID = :NI_PLAN_ID AND PAYMENT_PLAN_SEQ = :NI_PLAN_SEQ AND PAYMENT_DATE > SYSDATE() AND PAID_AMOUNT = 0
}

UPDATE_RESCH_PAYMENT_SCHEDULES{
-- UPDATE OFFENDER_PAYMENT_SCHEDULES SET PAYMENT_AMOUNT = PAYMENT_AMOUNT + :N_FIXED_AMT WHERE PAYMENT_PLAN_ID = :PAYMENT_PLAN_ID AND PAYMENT_PLAN_SEQ = :PAYMENT_PLAN_SEQ AND PAYMENT_DATE = :PAYMENT_DATE
update OFFENDER_PAYMENT_SCHEDULES set PAYMENT_AMOUNT = PAYMENT_AMOUNT + :N_FIXED_AMT, MODIFY_USER_ID = :modifyUserId , MODIFY_DATETIME = CURRENT_TIMESTAMP where PAYMENT_PLAN_ID = :PAYMENT_PLAN_ID and PAYMENT_PLAN_SEQ = :PAYMENT_PLAN_SEQ and PAYMENT_DATE = :PAYMENT_DATE
}

GET_MAX_RECURSIVE_AMOUNT{
SELECT MAX(MAX_RECURSIVE_AMOUNT) MAX_RECURSIVE_AMOUNT FROM OFFENDER_DEDUCTIONS WHERE OFFENDER_ID = :OFFENDER_ID AND INFORMATION_NUMBER = :INFORMATION_NUMBER AND GROUP_ID = :GROUP_ID
}

UPDATE_RESCH_PAYMENT_SCHEDULES_SECOND{
-- UPDATE OFFENDER_PAYMENT_SCHEDULES SET PAYMENT_AMOUNT = :MAX_RECUR_AMOUNT WHERE PAYMENT_PLAN_ID = :NI_PLAN_ID AND PAYMENT_PLAN_SEQ = :NI_PLAN_SEQ AND PAYMENT_DATE > SYSDATE() AND PAID_AMOUNT = 0
update OFFENDER_PAYMENT_SCHEDULES set PAYMENT_AMOUNT = :MAX_RECUR_AMOUNT, MODIFY_USER_ID = :modifyUserId , MODIFY_DATETIME = CURRENT_TIMESTAMP where PAYMENT_PLAN_ID = :NI_PLAN_ID and PAYMENT_PLAN_SEQ = :NI_PLAN_SEQ and PAYMENT_DATE > SYSDATE() and PAID_AMOUNT = 0 
}
PAYMENT_PLAN_ID_SEQ{
select coalesce (max(payment_plan_seq),0)+1 from OFFENDER_PAYMENT_SCHEDULES where payment_plan_id=:paymentPlanid;
}
