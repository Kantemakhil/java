
OCMEVENT_FIND_RGTYPE {
SELECT RC.DESCRIPTION DESCRIPTION, RC.CODE CODE FROM REFERENCE_CODES RC WHERE DOMAIN = 'EVENTS' AND (ACTIVE_FLAG = 'Y') AND PARENT_CODE IS NULL ORDER BY LIST_SEQ , DESCRIPTION ,CODE
}

OCMEVENT_FIND_RGSUBTYPE {
SELECT RC.DESCRIPTION DESCRIPTION, RC.CODE CODE FROM REFERENCE_CODES RC WHERE DOMAIN = 'EVENTS' AND PARENT_CODE = :eventType AND (ACTIVE_FLAG = 'Y') ORDER BY LIST_SEQ , DESCRIPTION ,CODE
}

OCMEVENT_FIND_RGOUTCOMECODE {
SELECT RC.DESCRIPTION DESCRIPTION, RC.CODE CODE FROM REFERENCE_CODES RC WHERE DOMAIN = 'OUTCOMES' AND CODE NOT IN ('PENDING') AND (ACTIVE_FLAG = 'Y') ORDER BY LIST_SEQ , DESCRIPTION , CODE
}

OCMEVENT_STATIC_RECORD_GROUP {
SELECT DESCRIPTION, CODE FROM REFERENCE_CODES WHERE DOMAIN = 'FLAG' ORDER by LIST_SEQ
}

OCMEVENT_SCHEDULE_FIND_EVENT_MEASURES {
SELECT EVENT_MEASURE_ID, EVENT_TYPE, EVENT_SUB_TYPE, MEASURES_STANDARD_FLAG, LIST_SEQ, ACTIVE_FLAG, UPDATE_ALLOWED_FLAG, EXPIRY_DATE, CREATE_DATE, CREATE_USER_ID, MODIFY_DATETIME, MODIFY_USER_ID, CREATE_DATETIME, SEAL_FLAG , EMAIL_FLAG , SMS_FLAG ,NON_ASSOCIATION_FLAG,SANCTIONS_FLAG FROM EVENT_MEASURES ORDER by LIST_SEQ
}
OCMEVENT_SCHEDULE_INSERT_EVENT_MEASURES {
insert into EVENT_MEASURES(EVENT_MEASURE_ID, EVENT_TYPE, EVENT_SUB_TYPE, MEASURES_STANDARD_FLAG, LIST_SEQ, ACTIVE_FLAG, UPDATE_ALLOWED_FLAG, EXPIRY_DATE, CREATE_DATE, CREATE_USER_ID, MODIFY_DATETIME, CREATE_DATETIME, SEAL_FLAG, EMAIL_FLAG, SMS_FLAG, NON_ASSOCIATION_FLAG, SANCTIONS_FLAG, modify_user_id) values(:eventMeasureId, :eventType, :eventSubType, :measuresStandardFlag, :listSeq, :activeFlag, :updateAllowedFlag, :expiryDate, :createDate, :createUserId, null, CURRENT_TIMESTAMP, :sealFlag, :emailFlag, :smsFlag, :nonAssociationFlag, :sanctionsFlag,null)
}

OCMEVENT_SCHEDULE_UPDATE_EVENT_MEASURES {
update EVENT_MEASURES set EVENT_MEASURE_ID = :eventMeasureId, EVENT_TYPE = :eventType, EVENT_SUB_TYPE = :eventSubType, MEASURES_STANDARD_FLAG = :measuresStandardFlag, LIST_SEQ = :listSeq, ACTIVE_FLAG = :activeFlag, UPDATE_ALLOWED_FLAG = :updateAllowedFlag, EXPIRY_DATE = :expiryDate, MODIFY_DATETIME = current_timestamp, MODIFY_USER_ID = :modifyUserId, SEAL_FLAG = :sealFlag, EMAIL_FLAG =:emailFlag, SMS_FLAG = :smsFlag,NON_ASSOCIATION_FLAG = :nonAssociationFlag,SANCTIONS_FLAG=:sanctionsFlag where EVENT_MEASURE_ID = :eventMeasureId
}

OCMEVENT_SCHEDULE_DELETE_EVENT_MEASURES {
DELETE FROM EVENT_MEASURES WHERE EVENT_MEASURE_ID = :eventMeasureId
}

OCMEVENT_OUTCOME_FIND_EVENT_MEASURE_OUTCOMES {
select EVENT_MEASURE_ID, OUTCOME_CODE, SET_COUNTER_FLAG, PROMPT_USER_FLAG, LIST_SEQ, ACTIVE_FLAG, UPDATE_ALLOWED_FLAG, EXPIRY_DATE, CREATE_DATE, CREATE_USER_ID, MODIFY_DATETIME, MODIFY_USER_ID, CREATE_DATETIME, UPDATE_ON_CONTACT_LOG, SEAL_FLAG,CANCEL_FLAG, to_char(row_id) as row_id from EVENT_MEASURE_OUTCOMES where EVENT_MEASURE_ID = :eventMeasureId order by LIST_SEQ
}
OCMEVENT_OUTCOME_INSERT_EVENT_MEASURE_OUTCOMES {
insert into EVENT_MEASURE_OUTCOMES(EVENT_MEASURE_ID, OUTCOME_CODE, SET_COUNTER_FLAG, PROMPT_USER_FLAG, LIST_SEQ, ACTIVE_FLAG, UPDATE_ALLOWED_FLAG, EXPIRY_DATE, CREATE_DATE, CREATE_USER_ID, MODIFY_DATETIME, CREATE_DATETIME, UPDATE_ON_CONTACT_LOG, SEAL_FLAG, CANCEL_FLAG, modify_user_id) values(:eventMeasureId, :outcomeCode, :setCounterFlag, :promptUserFlag, :listSeq, :activeFlag, :updateAllowedFlag, :expiryDate, :createDate, :createUserId, null, current_timestamp, :updateOnContactLog, :sealFlag, :cancelFlag, null)
}

OCMEVENT_OUTCOME_UPDATE_EVENT_MEASURE_OUTCOMES {
update EVENT_MEASURE_OUTCOMES set EVENT_MEASURE_ID = :eventMeasureId, OUTCOME_CODE = :outcomeCode, SET_COUNTER_FLAG = :setCounterFlag, PROMPT_USER_FLAG = :promptUserFlag, LIST_SEQ = :listSeq, ACTIVE_FLAG = :activeFlag, UPDATE_ALLOWED_FLAG = :updateAllowedFlag, EXPIRY_DATE = :expiryDate, MODIFY_DATETIME = current_timestamp, MODIFY_USER_ID = :modifyUserId, UPDATE_ON_CONTACT_LOG = :updateOnContactLog, SEAL_FLAG = :sealFlag, CANCEL_FLAG = :cancelFlag where EVENT_MEASURE_ID = :eventMeasureId and ROW_ID = :rowIdNo
}

OCMEVENT_OUTCOME_DELETE_EVENT_MEASURE_OUTCOMES {
DELETE FROM EVENT_MEASURE_OUTCOMES WHERE EVENT_MEASURE_ID = :eventMeasureId AND ROW_ID = :rowIdNo
}

OCMEVENT_OCMEVENT_PREINSERT {
SELECT NEXTVAL('EVENT_MEASURE_ID') FROM DUAL
}

OCMEVENT_EVENT_MEASURES_OLD_RECORD{
select * from EVENT_MEASURES where event_measure_id = :eventMeasureId
}

OCMEVENT_EVENT_MEASURES_OUTCOMES_OLD_RECORD{
select * from EVENT_MEASURE_OUTCOMES where event_measure_id = :eventMeasureId
}
