
OIDOWREL_FIND_RGPRIORITY {
 	SELECT DESCRIPTION , CODE FROM REFERENCE_CODES WHERE DOMAIN = 'PS_PRIORITY' AND ((ACTIVE_FLAG = 'Y' AND        EXPIRED_DATE IS NULL ) )
}

OIDOWREL_FIND_RGPROGRAM {
 	SELECT  DISTINCT PS.DESCRIPTION , CA.PROGRAM_ID::text CODE ,PS.ACTIVE_FLAG  FROM PROGRAM_SERVICES PS , COURSE_ACTIVITIES CA WHERE PS.PROGRAM_CATEGORY='WR'  AND ((PS.ACTIVE_FLAG = 'Y' AND        PS.EXPIRY_DATE IS NULL )) AND PS.PROGRAM_ID = CA.PROGRAM_ID  --AND CA.AGY_LOC_ID = :AGYLOCID 
 	AND CA.COURSE_ACTIVITY_TYPE = 'WR' ORDER BY PS.DESCRIPTION
}

OIDOWREL_INSERT_OFFENDER_PRG_OBLIGATIONS {
	INSERT INTO OFFENDER_PRG_OBLIGATIONS(OFFENDER_PRG_OBLIGATION_ID ,OFFENDER_BOOK_ID ,PROGRAM_ID ,STATUS ,OFFENDER_SENT_COND_ACT_ID ,START_DATE ,END_DATE ,EVENT_TYPE ,EVENT_SUB_TYPE ,COMMENT_TEXT ,SENTENCE_SEQ ,LENGTH ,LENGTH_UNIT ,OFFENDER_SENT_CONDITION_ID ,REFERRAL_DATE ,STATUS_CHANGE_DATE ,STATUS_CHANGE_REASON ,SPECIAL_NEED_FLAG ,AVAILABILITY_CODE ,OBLIGATION_SOURCE ,CREATE_DATETIME ,CREATE_USER_ID,SEAL_FLAG ,REFERRAL_PRIORITY ,DECISION_DATE,MODIFY_DATETIME ) 
	VALUES(:offenderPrgObligationId ,:offenderBookId ,:programId ,:status ,:offenderSentCondActId ,:startDate ,:endDate ,:eventType ,:eventSubType ,:commentText ,:sentenceSeq ,:length ,:lengthUnit ,:offenderSentConditionId ,:referralDate ,:statusChangeDate ,:statusChangeReason ,:specialNeedFlag ,:availabilityCode ,:obligationSource ,CURRENT_TIMESTAMP ,:createUserId ,:sealFlag ,:referralPriority ,:decisionDate,null )
}

OIDOWREL_UPDATE_OFFENDER_PRG_OBLIGATIONS {
	UPDATE OFFENDER_PRG_OBLIGATIONS set PROGRAM_ID  = :programId ,COMMENT_TEXT  = :commentText ,REFERRAL_DATE  = :referralDate ,MODIFY_DATETIME  = CURRENT_TIMESTAMP ,MODIFY_USER_ID  = :modifyUserId ,REFERRAL_PRIORITY  = :referralPriority ,DECISION_DATE  = :decisionDate where offender_prg_obligation_id  = :offenderPrgObligationId AND OFFENDER_BOOK_ID = :offenderBookId
}

OIDOWREL_DELETE_OFFENDER_PRG_OBLIGATIONS { 
	DELETE FROM OFFENDER_PRG_OBLIGATIONS  where offender_prg_obligation_id  = :offenderPrgObligationId AND OFFENDER_BOOK_ID = :offenderBookId
}
OIDOWREL_OFFPRGOBLIGATIONS_FIND_OFFENDER_PRG_OBLIGATIONS {
 	SELECT * FROM OFFENDER_PRG_OBLIGATIONS  WHERE OFFENDER_BOOK_ID = :offenderBookId AND PROGRAM_ID IN (SELECT PROGRAM_ID FROM PROGRAM_SERVICES WHERE PROGRAM_CATEGORY ='WR')--decode (status ,'ACCEP','1','REF','2',STATUS) ,REFERRAL_DATE asc
}

OIDOWREL_INSERT_OFFENDER_PROGRAM_PROFILES {
INSERT INTO OFFENDER_PROGRAM_PROFILES(OFF_PRGREF_ID ,OFFENDER_BOOK_ID ,PROGRAM_ID ,OFFENDER_START_DATE ,OFFENDER_PROGRAM_STATUS ,CRS_ACTY_ID ,REFERRAL_PRIORITY ,REFERRAL_DATE ,REFERRAL_COMMENT_TEXT ,OFFENDER_END_REASON ,OFFENDER_END_COMMENT_TEXT,OFFENDER_END_DATE,AGY_LOC_ID ,CREATE_DATETIME ,CREATE_USER_ID ,OFFENDER_SENT_CONDITION_ID ,SENTENCE_SEQ ,HOLIDAY_FLAG ,START_SESSION_NO ,PARENT_OFF_PRGREF_ID ,OFFENDER_PRG_OBLIGATION_ID ,PROGRAM_OFF_PRGREF_ID ,PROFILE_CLASS ,COMMENT_TEXT,OFFENDER_ID,SEAL_FLAG,MODIFY_DATETIME) 
VALUES(NEXTVAL('OFF_PRGREF_ID') ,:offenderBookId ,:programId ,:offenderStartDate::date ,:offenderProgramStatus ,:crsActyId ,:referralPriority ,:referralDate ,:referralCommentText ,:offenderEndReason ,:offenderEndCommentText ,:offenderEndDate ,:agyLocId ,CURRENT_TIMESTAMP ,:createUserId ,:offenderSentConditionId ,:sentenceSeq ,:holidayFlag ,:startSessionNo ,:parentOffPrgrefId ,:offenderPrgObligationId ,:programOffPrgrefId ,:profileClass,:commentText,:offenderId,:sealFlag,null )

}

OIDOWREL_UPDATE_OFFENDER_PROGRAM_PROFILES {
UPDATE OFFENDER_PROGRAM_PROFILES set PROGRAM_ID  = :programId ,OFFENDER_START_DATE  = :offenderStartDate ,OFFENDER_PROGRAM_STATUS  = :offenderProgramStatus ,REFERRAL_PRIORITY  = :referralPriority ,REFERRAL_DATE  = :referralDate ,REFERRAL_COMMENT_TEXT  = :referralCommentText ,OFFENDER_END_REASON  = :offenderEndReason ,OFFENDER_END_COMMENT_TEXT  = :offenderEndCommentText ,REFERRAL_STAFF_ID  = :referralStaffId ,OFFENDER_END_DATE  = :offenderEndDate ,REJECT_REASON_CODE  = :rejectReasonCode ,AGY_LOC_ID  = :agyLocId ,MODIFY_DATETIME  = current_timestamp ,MODIFY_USER_ID  = :modifyUserId ,COMMENT_TEXT  = :commentText where OFF_PRGREF_ID = :offPrgrefId
}



OIDOWREL_FIND_RGENDREASON {
 	SELECT DESCRIPTION , CODE   FROM REFERENCE_CODES WHERE DOMAIN ='WR_OUTCOMES' AND ((ACTIVE_FLAG = 'Y' AND        EXPIRED_DATE IS NULL ) OR ::MODE = 'ENTER-QUERY' ) ORDER BY LIST_SEQ ,DESCRIPTION
}

OIDOWREL_FIND_RGCANCELREASON {
 	SELECT DESCRIPTION , CODE   FROM REFERENCE_CODES WHERE DOMAIN ='WR_OUTCOMES' AND ((ACTIVE_FLAG = 'Y' AND        EXPIRED_DATE IS NULL ) OR ::MODE = 'ENTER-QUERY' ) ORDER BY LIST_SEQ ,DESCRIPTION
}

OIDOWREL_FIND_RGSUBTYPE {
 	SELECT DISTINCT RC.DESCRIPTION , W.WORK_SUB_TYPE CODE FROM WORKS W , REFERENCE_CODES RC WHERE W.WORKFLOW_TYPE = 'CNOTE' AND W.WORK_TYPE = 'WR' AND RC.DOMAIN = 'TASK_SUBTYPE' AND ( ( W.MANUAL_SELECT_FLAG ='Y'         AND  W.ACTIVE_FLAG  = 'Y' )       OR( ::MODE = 'ENTER-QUERY' )      ) AND RC.CODE = W.WORK_SUB_TYPE AND (RC.ACTIVE_FLAG = 'Y' OR ::MODE = 'ENTER-QUERY' ) ORDER BY  DESCRIPTION , CODE
}


OIDOWREL_FIND_OFFENDER_PROGRAM_PROFILES {
 	SELECT * FROM OFFENDER_PROGRAM_PROFILES WHERE OFFENDER_PRG_OBLIGATION_ID = :offenderPrgObligationId  --DECODE( offender_end_date, NULL, TO_DATE('11/11/1111','DD/MM/YYYY'), offender_end_date) asc
}

OIDOWREL_VOFFENDER_COURSE_EVENTS_EXECUTEQUERY {
 	SELECT * FROM V_OFFENDER_COURSE_EVENTS  where off_prgref_id = :offPrgrefId 
}
OIDOWREL_UPDATE_V_OFFENDER_COURSE_EVENTS {
	UPDATE V_OFFENDER_COURSE_EVENTS set EVENT_ID  = :eventId ,OFFENDER_BOOK_ID  = :offenderBookId ,EVENT_CLASS  = :eventClass ,EVENT_TYPE  = :eventType ,EVENT_SUB_TYPE  = :eventSubType ,OFF_PRGREF_ID  = :offPrgrefId ,REFERENCE_ID  = :referenceId ,CRS_SCH_ID  = :crsSchId ,CRS_APPT_ID  = :crsApptId ,PROGRAM_ID  = :programId ,COURSE_CODE  = :courseCode ,DESCRIPTION  = :description ,CRS_ACTY_ID  = :crsActyId ,WEEKDAY  = :weekday ,EVENT_DATE  = :eventDate ,START_TIME  = :startTime ,END_TIME  = :endTime ,IN_TIME  = :inTime ,OUT_TIME  = :outTime ,EVENT_STATUS  = :eventStatus ,EVENT_OUTCOME  = :eventOutcome ,AGY_LOC_ID  = :agyLocId ,TO_INTERNAL_LOCATION_ID  = :toInternalLocationId ,COMMENT_TEXT  = :commentText ,OUTCOME_REASON_CODE  = :outcomeReasonCode ,PIECE_WORK  = :pieceWork ,ENGAGEMENT_CODE  = :engagementCode ,UNDERSTANDING_CODE  = :understandingCode ,CREDITED_HOURS  = :creditedHours ,AGREED_TRAVEL_HOUR  = :agreedTravelHour ,BEHAVIOUR_CODE  = :behaviourCode ,ACTION_CODE  = :actionCode ,SICK_NOTE_RECEIVED_DATE  = :sickNoteReceivedDate ,SICK_NOTE_EXPIRY_DATE  = :sickNoteExpiryDate ,PERFORMANCE_CODE  = :performanceCode ,TO_AGY_LOC_ID  = :toAgyLocId ,TO_ADDRESS_ID  = :toAddressId ,PERFORMANCE_DESC  = :performanceDesc ,EVENT_OUTCOME_DESC  = :eventOutcomeDesc ,SUPERVISOR_STAFF_ID  = :supervisorStaffId ,UNEXCUSED_ABSENCE_FLAG  = :unexcusedAbsenceFlag ,DIRECTION_CODE  = :directionCode ,EXT_MOVE_OUT_TIME  = :extMoveOutTime ,EXT_MOVE_IN_TIME  = :extMoveInTime ,SCHEDULE_MOVEMENT_TIME  = :scheduleMovementTime ,SESSION_NO  = :sessionNo ,RECORD_SOURCE  = :recordSource ,CHECK_SUM  = :checkSum /* where */
}

OIDOWREL_OFFENDERCASENOTES_FIND_OFFENDER_CASE_NOTES {
SELECT * FROM OFFENDER_CASE_NOTES WHERE CASE_NOTE_TYPE = 'WR' AND OFFENDER_BOOK_ID = :offenderBookId ORDER BY CONTACT_DATE DESC,  CONTACT_TIME DESC
}
OIDOWREL_OFFENDERCASENOTES_INSERT_OFFENDER_CASE_NOTES {
	INSERT INTO OFFENDER_CASE_NOTES(OFFENDER_BOOK_ID ,CONTACT_DATE ,CONTACT_TIME ,CASE_NOTE_TYPE ,CASE_NOTE_SUB_TYPE ,STAFF_ID ,CASE_NOTE_TEXT ,AMENDMENT_FLAG ,IWP_FLAG ,CHECK_BOX1 ,CHECK_BOX2 ,CHECK_BOX3 ,CHECK_BOX4 ,CHECK_BOX5 ,EVENT_ID ,CASE_NOTE_ID ,NOTE_SOURCE_CODE ,DATE_CREATION ,TIME_CREATION ,SEAL_FLAG ,OBJECT_TYPE ,OBJECT_ID ,CREATE_DATETIME ,CREATE_USER_ID) 
	VALUES(:offenderBookId ,:contactDate ,:contactTime ,:caseNoteType ,:caseNoteSubType ,tag_utils_get_staff_id(:createUserId) ,:caseNoteText ,:amendmentFlag ,:iwpFlag ,:checkBox1 ,:checkBox2 ,:checkBox3 ,:checkBox4 ,:checkBox5 ,:eventId ,NEXTVAL('CASE_NOTE_ID') ,:noteSourceCode ,:dateCreation ,:timeCreation ,:sealFlag ,:objectType ,:objectId ,CURRENT_TIMESTAMP ,:createUserId )
}

OIDOWREL_OFFENDERCASENOTES_UPDATE_OFFENDER_CASE_NOTES {
UPDATE OFFENDER_CASE_NOTES set CONTACT_DATE  = :contactDate ,CONTACT_TIME  = :contactTime ,CASE_NOTE_SUB_TYPE  = :caseNoteSubType ,STAFF_ID  = :staffId ,CASE_NOTE_TEXT  = :caseNoteText ,AMENDMENT_FLAG  = :amendmentFlag ,IWP_FLAG  = :iwpFlag ,DATE_CREATION  = :dateCreation ,TIME_CREATION  = :timeCreation ,MODIFY_DATETIME  = current_timestamp ,MODIFY_USER_ID  = :modifyUserId WHERE CASE_NOTE_ID = :caseNoteId
}

OIDOWREL_OFFENDERCASENOTES_DELETE_OFFENDER_CASE_NOTES { 
	DELETE FROM OFFENDER_CASE_NOTES  WHERE CASE_NOTE_ID = :caseNoteId  AND OFFENDER_BOOK_ID = :offenderBookId
}


OIDOWREL_OFF_BKG_ONCHECKDELETEMASTER_ {
	SELECT 1 FROM OFFENDER_PRG_OBLIGATIONS O WHERE O.OFFENDER_BOOK_ID = :OFFENDERBOOKID
}

OIDOWREL_OFF_BKG_ONCHECKDELETEMASTER_ {
	SELECT 1 FROM OFFENDER_CASE_NOTES O WHERE O.OFFENDER_BOOK_ID = :OFFENDERBOOKID
}

OIDOWREL_OFF_PRG_OBLIGATIONS_ONCHECKDELETEMASTER_ {
	SELECT 1 FROM OFFENDER_PROGRAM_PROFILES O WHERE O.OFFENDER_PRG_OBLIGATION_ID = :OFFENDERPRGOBLIGATIONID AND O.OFFENDER_BOOK_ID = :OFFENDERBOOKID
}

OIDOWREL_OFF_PROGRAM_PROFILES_POSTQUERY_ {
	SELECT CORPORATE_NAME FROM   CORPORATES WHERE  CORPORATE_ID = ( SELECT PROVIDER_PARTY_ID FROM   COURSE_ACTIVITIES WHERE  CRS_ACTY_ID = :CRSACTYID)
}

OIDOWREL_OFF_PROGRAM_PROFILES_ONCHECKDELETEMASTER_ {
	SELECT 1 FROM V_OFFENDER_COURSE_EVENTS V WHERE V.OFF_PRGREF_ID = :OFFPRGREFID
}

OIDOWREL_V_OFFENDER_COURSE_EVENTS_POSTQUERY_ {
	SELECT CORPORATE_NAME FROM   CORPORATES WHERE  CORPORATE_ID = ( SELECT PROVIDER_PARTY_ID FROM   COURSE_ACTIVITIES WHERE  CRS_ACTY_ID = :CRSACTYID)
}

OIDOWREL_V_OFFENDER_COURSE_EVENTS_WHENNEWRECORDINSTANCE_ {
	SELECT 'N' FROM   OFFENDER_EXTERNAL_MOVEMENTS OEM,   V_OFFENDER_COURSE_EVENTS OCE WHERE  OEM.OFFENDER_BOOK_ID = :OFFENDERBOOKID AND    OCE.EVENT_TYPE = 'WR' AND    OCE.EVENT_SUB_TYPE  = 'WR' AND    :EVENTID IS NOT NULL AND    OCE.EVENT_ID = :EVENTID AND    OEM.EVENT_ID = OCE.EVENT_ID AND    OEM.DIRECTION_CODE = 'OUT' UNION SELECT 'Y' FROM  DUAL WHERE :EVENTID IS  NULL
}

OIDOWREL_V_OFFENDER_COURSE_EVENTS_WHENNEWRECORDINSTANCE_ {
	SELECT 'Y' FROM    V_OFFENDER_COURSE_EVENTS OCE WHERE   OCE.EVENT_TYPE = 'WR' AND     OCE.EVENT_SUB_TYPE  = 'WR' AND     :EVENTID IS NOT NULL AND     OCE.EVENT_ID = :EVENTID AND  NOT EXISTS ( SELECT '1' FROM  OFFENDER_EXTERNAL_MOVEMENTS OEM WHERE OEM.OFFENDER_BOOK_ID = :OFFENDERBOOKID AND   OEM.EVENT_ID = :EVENTID AND   OEM.DIRECTION_CODE = 'OUT' )
}

OIDOWREL_OFFENDER_CASE_NOTES_PREINSERT {
	SELECT CODE, DESCRIPTION INTO :OFFENDER_CASE_NOTES.NOTE_SOURCE_CODE, :OFFENDER_CASE_NOTES.NBT_NOTE_SOURCE FROM REFERENCE_CODES WHERE DOMAIN = 'NOTE_SOURCE' AND CODE = 'COMM' AND ACTIVE_FLAG = 'Y'
}

OIDOWREL_OFFENDER_CASE_NOTES_PREINSERT {
	SELECT CODE, DESCRIPTION INTO :OFFENDER_CASE_NOTES.NOTE_SOURCE_CODE, :OFFENDER_CASE_NOTES.NBT_NOTE_SOURCE FROM REFERENCE_CODES WHERE DOMAIN = 'NOTE_SOURCE' AND CODE = 'INST' AND ACTIVE_FLAG = 'Y'
}

OIDOWREL_CREATE_FORM_GLOBALS {
	SELECT DESCRIPTION INTO V_FORM_DESC FROM OMS_MODULES WHERE MODULE_NAME = V_FORM_NAME
}

OIDOWREL_CALL_OCUOSCPV_ {
	SELECT PROGRAM_CATEGORY FROM   PROGRAM_SERVICES WHERE  PROGRAM_ID = :PROGRAMID
}

OIDOWREL_CALL_OCUUPSTA_ {
	SELECT PROGRAM_CATEGORY FROM PROGRAM_SERVICES WHERE PROGRAM_ID = :PROGRAMID
}

OIDOWREL_CREATE_ALLOCATION_ {
	SELECT CODE FROM   COURSE_ACTIVITIES WHERE  CRS_ACTY_ID = :CRSACTYID
}

OIDOWREL_CHK_DELETE_RULE_ {
	SELECT COUNT(*) FROM   OFFENDER_COURSE_APPT_GRPS WHERE  OFF_PRGREF_ID = :OFFPRGREFID
}

OIDOWREL_CHK_DELETE_RULE_ {
	SELECT COUNT(*) FROM  OFFENDER_COURSE_ATTENDANCES WHERE OFF_PRGREF_ID = :OFFPRGREFID
}

OIDOWREL_DISPLAY_ASSESSMENT_BUTTON_ {
	SELECT ASSESSMENT_ID FROM PROGRAM_ASSESSMENTS WHERE PROGRAM_ID = :PROGRAMID AND ACTIVE_FLAG = 'Y'
}
OIDOWREL_GET_COURSE_ACTIVITYDATA{
 	SELECT course_activity_code,provider_name FROM V_COURSE_ACTIVITIES where crs_acty_id = :crsActId
}

OIDOWRE_GET_OLD_DATA_OFFENDER_PRG_OBLIGATIONS{
    SELECT  STATUS FROM OFFENDER_PRG_OBLIGATIONS WHERE  OFFENDER_PRG_OBLIGATION_ID :offenderPrgObligationId
}

OIDOWRE_GET_OFF_PRGREF_ID_SEQ{
SELECT NEXTVAL('OFFENDER_PRG_OBLIGATION_ID')FROM DUAL 
}

OIDOWRE_GET_REFERENCE_CODES_NOTE_SOURCE{
SELECT CODE, DESCRIPTION FROM REFERENCE_CODES WHERE DOMAIN = 'NOTE_SOURCE' AND CODE = :code AND ACTIVE_FLAG = 'Y'
}


OIDOWREL_GET_NBT_PROVIDER_NAME{
SELECT CORPORATE_NAME FROM CORPORATES WHERE  CORPORATE_ID = (SELECT PROVIDER_PARTY_ID FROM   COURSE_ACTIVITIES WHERE  CRS_ACTY_ID = :crs_acty_id)

}