OIDIEPLV_OIDADMIS_IEP_LEVEL_DETAILS
	OIDADMIS_FIND_CGFKOFFEMDSPDESCRIPTION {
 SELECT
  REF_CODE2.DESCRIPTION, REF_CODE2.CODE
FROM REFERENCE_CODES REF_CODE2
WHERE
  DOMAIN = 'ARREST_AGY' AND
  ((ACTIVE_FLAG = 'Y' AND EXPIRED_DATE IS NULL ))
ORDER BY
  REF_CODE2.LIST_SEQ, REF_CODE2.DESCRIPTION

}
	OIDADMIS_FIND_CGFKBEDAHDSPDESCRIPTION {
 SELECT
  LIV_UNIT.DESCRIPTION, LIV_UNIT.LIVING_UNIT_ID LIVING_UNIT_ID
FROM LIVING_UNITS LIV_UNIT
WHERE
  (ACTIVE_FLAG = 'Y')
ORDER BY
  LIV_UNIT.DESCRIPTION, LIV_UNIT.LIVING_UNIT_ID

}
OIDADMIS_FIND_CGFKOFFEMDSPDESCRIPTION_AGYLOCID {
SELECT
  AGY_LOC.DESCRIPTION DSP_DESCRIPTION6, AGY_LOC.AGY_LOC_ID FROM_AGY_LOC_ID, AGY_LOC.ACTIVE_FLAG
FROM AGENCY_LOCATIONS AGY_LOC
WHERE
  DEACTIVATION_DATE IS NULL
ORDER BY
  AGY_LOC.DESCRIPTION, AGY_LOC.AGY_LOC_ID
}
OIDADMIS_FIND_CGFKOFFEMDSPDESCRIPTION_MR {
SELECT
  MOVE_RSN1.DESCRIPTION, MOVE_RSN1.MOVEMENT_REASON_CODE MOVEMENT_REASON_CODE,
  MOVE_RSN1.MOVEMENT_TYPE MOVEMENT_TYPE, MOVE_RSN1.ACTIVE_FLAG,
  CASE
    WHEN (((:ADMISSIONTYPE IN ('NEW' ,'READM') AND MOVEMENT_REASON_CODE NOT IN ('RECA' ,'INT')) OR (:ADMISSIONTYPE = 'RECAP' AND (MOVEMENT_REASON_CODE = 'RECA' OR MOVEMENT_REASON_CODE IN (SELECT IN_MOVEMENT_REASON_CODE FROM MOVEMENT_REASONS WHERE IN_MOVEMENT_TYPE = '' AND EXPIRY_DATE IS NULL AND ESC_RECAP_FLAG = 'Y'))) OR (:ADMISSIONTYPE = 'TRANS' AND MOVEMENT_REASON_CODE = 'INT')) OR ('' = 'QUERY')) THEN 1
    ELSE 0
  END LIST_SEQ
FROM MOVEMENT_REASONS MOVE_RSN1
WHERE
  MOVEMENT_TYPE = 'ADM' AND
  EXPIRY_DATE IS NULL

}
OIDADMIS_FIND_CGFKOFFEMDSPDESCRIPTION_MRSN {
SELECT
  MOVE_RSN1.DESCRIPTION, MOVE_RSN1.MOVEMENT_REASON_CODE MOVEMENT_REASON_CODE,
  MOVE_RSN1.MOVEMENT_TYPE MOVEMENT_TYPE
FROM MOVEMENT_REASONS MOVE_RSN1
WHERE
  MOVEMENT_TYPE = 'ADM' AND
  EXPIRY_DATE IS NULL AND
  ((('' IN ('NEW' ,'READM') AND MOVEMENT_REASON_CODE NOT IN ('RECA' ,'INT')) OR ('' = 'RECAP' AND (MOVEMENT_REASON_CODE = 'RECA' OR MOVEMENT_REASON_CODE IN
    (SELECT IN_MOVEMENT_REASON_CODE
     FROM MOVEMENT_REASONS
     WHERE
       IN_MOVEMENT_TYPE = '' AND
       EXPIRY_DATE IS NULL AND
       ESC_RECAP_FLAG = 'Y'))) OR ('' = 'TRANS' AND MOVEMENT_REASON_CODE = 'INT')))
ORDER BY LIST_SEQ

}
OIDADMIS_FIND_CGFKOFFEMDSPDESCRIPTION {
SELECT
  MOVE_RSN1.DESCRIPTION, MOVE_RSN1.MOVEMENT_REASON_CODE MOVEMENT_REASON_CODE,
  MOVE_RSN1.MOVEMENT_TYPE MOVEMENT_TYPE
FROM MOVEMENT_REASONS MOVE_RSN1
WHERE
  MOVEMENT_TYPE = 'ADM' AND
  EXPIRY_DATE IS NULL AND
  ((('' IN ('NEW' ,'READM') AND MOVEMENT_REASON_CODE NOT IN ('RECA' ,'INT')) OR ('' = 'RECAP' AND (MOVEMENT_REASON_CODE = 'RECA' OR MOVEMENT_REASON_CODE IN
    (SELECT IN_MOVEMENT_REASON_CODE
     FROM MOVEMENT_REASONS
     WHERE
       IN_MOVEMENT_TYPE = '' AND
       EXPIRY_DATE IS NULL AND
       ESC_RECAP_FLAG = 'Y'))) OR ('' = 'TRANS' AND MOVEMENT_REASON_CODE = 'INT')) OR ('' = 'QUERY'))
ORDER BY LIST_SEQ

}
OIDADMIS_FIND_CGFKOFFEMDSPDESCRIPTION_CASELOAD_ID {
SELECT
  AGY_LOC1.DESCRIPTION, AGY_LOC1.AGY_LOC_ID, AGY_LOC1.ACTIVE_FLAG
FROM AGENCY_LOCATIONS AGY_LOC1
WHERE
  DEACTIVATION_DATE IS NULL AND
  AGY_LOC1.AGY_LOC_ID NOT IN ( 'TRN' , 'OUT' ) AND
  EXISTS
    (SELECT 'X'
     FROM CASELOAD_AGENCY_LOCATIONS CAL
     WHERE
       CAL.CASELOAD_ID = :CASELOADID AND
       CAL.AGY_LOC_ID = AGY_LOC1.AGY_LOC_ID AND
       UPDATE_ALLOWED_FLAG = 'Y' )
  and intake_flag <> 'N'
ORDER BY
  AGY_LOC1.DESCRIPTION, AGY_LOC1.AGY_LOC_ID	
}
	OIDADMIS_FIND_CGFKOFFEMDSPDESCRIPTION_RC {
 SELECT
  REF_CODE1.DESCRIPTION, REF_CODE1.CODE
FROM REFERENCE_CODES REF_CODE1
WHERE
  DOMAIN = 'ESCORT' AND
  ((ACTIVE_FLAG = 'Y' AND EXPIRED_DATE IS NULL ))
ORDER BY
  REF_CODE1.LIST_SEQ, REF_CODE1.DESCRIPTION, REF_CODE1.CODE

}
OIDADMIS_OFFBKG_FIND_V_HEADER_BLOCK {
 SELECT OFFENDER_ID ,ALIAS_OFFENDER_ID ,OFFENDER_ID_DISPLAY ,LAST_NAME ,FIRST_NAME ,MIDDLE_NAME ,SUFFIX ,BIRTH_DATE ,OFFENDER_BOOK_ID ,BOOKING_NO ,BOOKING_BEGIN_DATE ,BOOKING_END_DATE ,AGY_LOC_ID ,AGENCY_IML_ID ,LIVING_UNIT_ID ,DISCLOSURE_FLAG ,ACTIVE_FLAG ,BOOKING_STATUS ,LIVING_UNIT_DESCRIPTION ,IN_OUT_STATUS ,STATUS_DISPLAY ,ROOT_OFFENDER_ID ,ASSIGNED_STAFF_ID ,AGY_LOC_TYPE ,CREATE_AGY_LOC_ID ,BOOKING_TYPE ,BOOKING_CREATED_DATE ,LOCATION_CODE ,STAFF_FIRST_NAME ,STAFF_LAST_NAME ,INTAKE_AGY_LOC_ID ,COMMUNITY_ACTIVE_FLAG ,CREATE_INTAKE_AGY_LOC_ID ,COMMUNITY_STATUS ,STATUS_REASON ,HEADER_STATUS   FROM V_HEADER_BLOCK2_FN(:userId)
}

OIDADMIS_OFFBKGS_FIND_OFFENDER_BOOKINGS {
 SELECT OFFENDER_BOOK_ID ,BOOKING_BEGIN_DATE ,BOOKING_END_DATE ,BOOKING_NO ,OFFENDER_ID ,AGY_LOC_ID ,LIVING_UNIT_ID ,DISCLOSURE_FLAG ,IN_OUT_STATUS ,ACTIVE_FLAG ,BOOKING_STATUS ,YOUTH_ADULT_CODE ,FINGER_PRINTED_STAFF_ID ,SEARCH_STAFF_ID ,PHOTO_TAKING_STAFF_ID ,ASSIGNED_STAFF_ID ,CREATE_AGY_LOC_ID ,BOOKING_TYPE ,BOOKING_CREATED_DATE ,ROOT_OFFENDER_ID ,AGENCY_IML_ID ,SERVICE_FEE_FLAG ,EARNED_CREDIT_LEVEL ,EKSTRAND_CREDIT_LEVEL ,INTAKE_AGY_LOC_ID ,ACTIVITY_DATE ,INTAKE_CASELOAD_ID ,INTAKE_USER_ID ,CASE_OFFICER_ID ,CASE_DATE ,CASE_TIME ,COMMUNITY_ACTIVE_FLAG ,CREATE_INTAKE_AGY_LOC_ID ,COMM_STAFF_ID ,COMM_STATUS ,COMMUNITY_AGY_LOC_ID ,NO_COMM_AGY_LOC_ID ,COMM_STAFF_ROLE ,AGY_LOC_ID_LIST ,STATUS_REASON ,TOTAL_UNEXCUSED_ABSENCES ,REQUEST_NAME ,RECORD_USER_ID ,INTAKE_AGY_LOC_ASSIGN_DATE ,CREATE_DATETIME ,CREATE_USER_ID ,MODIFY_DATETIME ,MODIFY_USER_ID ,SEAL_FLAG   FROM OFFENDER_BOOKINGS  
}

OIDADMIS_OFFBKGS_INSERT_OFFENDER_BOOKINGS {
insert
	into
	OFFENDER_BOOKINGS(OFFENDER_BOOK_ID,
	BOOKING_BEGIN_DATE,
	BOOKING_END_DATE,
	BOOKING_NO,
	OFFENDER_ID,
	AGY_LOC_ID,
	LIVING_UNIT_ID,
	DISCLOSURE_FLAG,
	IN_OUT_STATUS,
	ACTIVE_FLAG,
	BOOKING_STATUS,
	YOUTH_ADULT_CODE,
	FINGER_PRINTED_STAFF_ID,
	SEARCH_STAFF_ID,
	PHOTO_TAKING_STAFF_ID,
	ASSIGNED_STAFF_ID,
	CREATE_AGY_LOC_ID,
	BOOKING_TYPE,
	BOOKING_CREATED_DATE,
	ROOT_OFFENDER_ID,
	AGENCY_IML_ID,
	SERVICE_FEE_FLAG,
	EARNED_CREDIT_LEVEL,
	EKSTRAND_CREDIT_LEVEL,
	INTAKE_AGY_LOC_ID,
	ACTIVITY_DATE,
	INTAKE_CASELOAD_ID,
	INTAKE_USER_ID,
	CASE_OFFICER_ID,
	CASE_DATE,
	CASE_TIME,
	COMMUNITY_ACTIVE_FLAG,
	CREATE_INTAKE_AGY_LOC_ID,
	COMM_STAFF_ID,
	COMM_STATUS,
	COMMUNITY_AGY_LOC_ID,
	NO_COMM_AGY_LOC_ID,
	COMM_STAFF_ROLE,
	AGY_LOC_ID_LIST,
	STATUS_REASON,
	TOTAL_UNEXCUSED_ABSENCES,
	REQUEST_NAME,
	RECORD_USER_ID,
	INTAKE_AGY_LOC_ASSIGN_DATE,
	CREATE_DATETIME,
	CREATE_USER_ID,
	MODIFY_DATETIME,
	MODIFY_USER_ID,
	SEAL_FLAG)
values(:offenderBookId,
:bookingBeginDate,
:bookingEndDate,
:bookingNo,
:offenderId,
:agyLocId,
:livingUnitId,
:disclosureFlag,
:inOutStatus,
:activeFlag,
:bookingStatus,
:youthAdultCode,
:fingerPrintedStaffId,
:searchStaffId,
:photoTakingStaffId,
:assignedStaffId,
:createAgyLocId,
:bookingType,
:bookingCreatedDate,
:rootOffenderId,
:agencyImlId,
:serviceFeeFlag,
:earnedCreditLevel,
:ekstrandCreditLevel,
:intakeAgyLocId,
:activityDate,
:intakeCaseloadId,
:intakeUserId,
:caseOfficerId,
:caseDate,
:caseTime,
:communityActiveFlag,
:createIntakeAgyLocId,
:commStaffId,
:commStatus,
:communityAgyLocId,
:noCommAgyLocId,
:commStaffRole,
:agyLocIdList,
:statusReason,
:totalUnexcusedAbsences,
:requestName,
:recordUserId,
:intakeAgyLocAssignDate,
current_timestamp,
:createUserId,
NULL,
NULL,
:sealFlag)
}  

OIDADMIS_OFFBKG_UPDATE_OFFENDER_BOOKINGS {
UPDATE OFFENDER_BOOKINGS set  ACTIVE_FLAG =:activeFlag, AGY_LOC_ID =:agyLocId, LIVING_UNIT_ID =:livingUnitId,  CREATE_AGY_LOC_ID = :createAgyLocId, BOOKING_TYPE = :bookingType , MODIFY_DATETIME=current_timestamp , MODIFY_USER_ID=:modifyUserId where OFFENDER_BOOK_ID = :offenderBookId
}  

OIDADMIS_OFFEM_FIND_OFFENDER_EXTERNAL_MOVEMENTS {
 SELECT OFFENDER_BOOK_ID ,MOVEMENT_SEQ ,MOVEMENT_DATE ,MOVEMENT_TIME ,INTERNAL_SCHEDULE_TYPE ,INTERNAL_SCHEDULE_REASON_CODE ,MOVEMENT_TYPE ,MOVEMENT_REASON_CODE ,DIRECTION_CODE ,ARREST_AGENCY_LOC_ID ,TO_PROV_STAT_CODE ,ESCORT_CODE ,FROM_AGY_LOC_ID ,TO_AGY_LOC_ID ,ACTIVE_FLAG ,ESCORT_TEXT ,COMMENT_TEXT ,REPORTING_DATE ,TO_CITY ,FROM_CITY ,REPORTING_TIME ,EVENT_ID ,PARENT_EVENT_ID ,TO_COUNTRY_CODE ,OJ_LOCATION_CODE ,APPLICATION_DATE ,APPLICATION_TIME ,TO_ADDRESS_ID ,FROM_ADDRESS_ID ,SEAL_FLAG ,CREATE_DATETIME ,CREATE_USER_ID ,MODIFY_DATETIME ,MODIFY_USER_ID   FROM OFFENDER_EXTERNAL_MOVEMENTS  /* where OFFENDER_BOOK_ID = ? and MOVEMENT_SEQ = ?  */
}

OIDADMIS_OFFEM_INSERT_OFFENDER_EXTERNAL_MOVEMENTS {
insert
	into
	OFFENDER_EXTERNAL_MOVEMENTS(OFFENDER_BOOK_ID ,
	MOVEMENT_SEQ ,
	MOVEMENT_DATE ,
	MOVEMENT_TIME ,
	INTERNAL_SCHEDULE_TYPE ,
	INTERNAL_SCHEDULE_REASON_CODE ,
	MOVEMENT_TYPE ,
	MOVEMENT_REASON_CODE ,
	DIRECTION_CODE ,
	ARREST_AGENCY_LOC_ID ,
	TO_PROV_STAT_CODE ,
	ESCORT_CODE ,
	FROM_AGY_LOC_ID ,
	TO_AGY_LOC_ID ,
	ACTIVE_FLAG ,
	ESCORT_TEXT ,
	COMMENT_TEXT ,
	REPORTING_DATE ,
	TO_CITY ,
	FROM_CITY ,
	REPORTING_TIME ,
	EVENT_ID ,
	PARENT_EVENT_ID ,
	TO_COUNTRY_CODE ,
	OJ_LOCATION_CODE ,
	APPLICATION_DATE ,
	APPLICATION_TIME ,
	TO_ADDRESS_ID ,
	FROM_ADDRESS_ID ,
	SEAL_FLAG ,
	CREATE_DATETIME ,
	CREATE_USER_ID ,
	MODIFY_DATETIME ,
	MODIFY_USER_ID )
values(:offenderBookId ,
:movementSeq ,
:movementDate ,
:movementTime ,
:internalScheduleType ,
:internalScheduleReasonCode ,
:movementType ,
:movementReasonCode ,
:directionCode ,
:arrestAgencyLocId ,
:toProvStatCode ,
:escortCode ,
:fromAgyLocId ,
:toAgyLocId ,
:activeFlag ,
:escortText ,
:commentText ,
:reportingDate ,
:toCity ,
:fromCity ,
:reportingTime ,
:eventId ,
:parentEventId ,
:toCountryCode ,
:ojLocationCode ,
:applicationDate ,
:applicationTime ,
:toAddressId ,
:fromAddressId ,
:sealFlag ,
current_timestamp ,
:createUserId ,
NULL ,
NULL )
} 

OIDADMIS_OFFEM_UPDATE_OFFENDER_EXTERNAL_MOVEMENTS {
update OFFENDER_EXTERNAL_MOVEMENTS set ACTIVE_FLAG = 'N', modify_datetime =current_timestamp, modify_user_id =:modifyUserId where OFFENDER_BOOK_ID = :offenderBookId 
} 

OIDADMIS_BEDAH_FIND_BED_ASSIGNMENT_HISTORIES {
 SELECT OFFENDER_BOOK_ID ,BED_ASSIGN_SEQ ,LIVING_UNIT_ID ,ASSIGNMENT_DATE ,ASSIGNMENT_TIME ,ASSIGNMENT_REASON ,ASSIGNMENT_END_DATE ,ASSIGNMENT_END_TIME ,CREATE_DATETIME ,CREATE_USER_ID ,MODIFY_DATETIME ,MODIFY_USER_ID ,SEAL_FLAG   FROM BED_ASSIGNMENT_HISTORIES  /* where OFFENDER_BOOK_ID = ? and BED_ASSIGN_SEQ = ?  */
}

OIDADMIS_BEDAH_INSERT_BED_ASSIGNMENT_HISTORIES {
insert
	into
	BED_ASSIGNMENT_HISTORIES(OFFENDER_BOOK_ID ,
	BED_ASSIGN_SEQ ,
	LIVING_UNIT_ID ,
	ASSIGNMENT_DATE ,
	ASSIGNMENT_TIME ,
	ASSIGNMENT_REASON ,
	ASSIGNMENT_END_DATE ,
	ASSIGNMENT_END_TIME ,
	CREATE_DATETIME ,
	CREATE_USER_ID ,
	MODIFY_DATETIME ,
	MODIFY_USER_ID ,
	SEAL_FLAG )
values(:offenderBookId ,
:bedAssignSeq ,
:livingUnitId ,
:assignmentDate ,
:assignmentTime ,
:assignmentReason ,
:assignmentEndDate ,
:assignmentEndTime ,
current_timestamp ,
:createUserId ,
NULL ,
NULL,
:sealFlag )
}

OIDADMIS_OFFTXN_FIND_OFFENDER_TRANSACTIONS {
 SELECT TXN_ID ,TXN_ENTRY_SEQ ,CASELOAD_ID ,OFFENDER_ID ,OFFENDER_BOOK_ID ,TXN_POSTING_TYPE ,TXN_TYPE ,TXN_ENTRY_DESC ,TXN_ENTRY_AMOUNT ,TXN_ENTRY_DATE ,SUB_ACCOUNT_TYPE ,TXN_REFERENCE_NUMBER ,MODIFY_DATE ,RECEIPT_NUMBER ,SLIP_PRINTED_FLAG ,TRANSFER_CASELOAD_ID ,RECEIPT_PRINTED_FLAG ,PRE_WITHHOLD_AMOUNT ,DEDUCTION_FLAG ,CLOSING_CHEQUE_NUMBER ,REMITTER_NAME ,PAYEE_CODE ,PAYEE_NAME_TEXT ,PAYEE_CORPORATE_ID ,PAYEE_PERSON_ID ,ADJUST_TXN_ID ,ADJUST_TXN_ENTRY_ID ,ADJUST_OFFENDER_ID ,ADJUST_ACCOUNT_CODE ,TXN_ADJUSTED_FLAG ,DEDUCTION_TYPE ,INFO_NUMBER ,HOLD_CLEAR_FLAG ,HOLD_UNTIL_DATE ,HOLD_NUMBER ,GROSS_AMOUNT ,GROSS_NET_FLAG ,REMITTER_ID ,APPLY_SPENDING_LIMIT_AMOUNT ,RECEIPT_PENDING_PRINT_FLAG ,SEAL_FLAG ,ORG_TXN_TYPE ,CREATE_DATETIME ,CREATE_USER_ID ,MODIFY_DATETIME ,MODIFY_USER_ID   FROM OFFENDER_TRANSACTIONS  /* where TXN_ID = ? and TXN_ENTRY_SEQ = ?  */
}

OIDADMIS_OFFTXN_INSERT_OFFENDER_TRANSACTIONS {
insert
	into
	OFFENDER_TRANSACTIONS(TXN_ID ,
	TXN_ENTRY_SEQ ,
	CASELOAD_ID ,
	OFFENDER_ID ,
	OFFENDER_BOOK_ID ,
	TXN_POSTING_TYPE ,
	TXN_TYPE ,
	TXN_ENTRY_DESC ,
	TXN_ENTRY_AMOUNT ,
	TXN_ENTRY_DATE ,
	SUB_ACCOUNT_TYPE ,
	TXN_REFERENCE_NUMBER ,
	MODIFY_DATE ,
	RECEIPT_NUMBER ,
	SLIP_PRINTED_FLAG ,
	TRANSFER_CASELOAD_ID ,
	RECEIPT_PRINTED_FLAG ,
	PRE_WITHHOLD_AMOUNT ,
	DEDUCTION_FLAG ,
	CLOSING_CHEQUE_NUMBER ,
	REMITTER_NAME ,
	PAYEE_CODE ,
	PAYEE_NAME_TEXT ,
	PAYEE_CORPORATE_ID ,
	PAYEE_PERSON_ID ,
	ADJUST_TXN_ID ,
	ADJUST_TXN_ENTRY_ID ,
	ADJUST_OFFENDER_ID ,
	ADJUST_ACCOUNT_CODE ,
	TXN_ADJUSTED_FLAG ,
	DEDUCTION_TYPE ,
	INFO_NUMBER ,
	HOLD_CLEAR_FLAG ,
	HOLD_UNTIL_DATE ,
	HOLD_NUMBER ,
	GROSS_AMOUNT ,
	GROSS_NET_FLAG ,
	REMITTER_ID ,
	APPLY_SPENDING_LIMIT_AMOUNT ,
	RECEIPT_PENDING_PRINT_FLAG ,
	SEAL_FLAG ,
	ORG_TXN_TYPE ,
	CREATE_DATETIME ,
	CREATE_USER_ID ,
	MODIFY_DATETIME ,
	MODIFY_USER_ID )
values(:txnId ,
:txnEntrySeq ,
:caseloadId ,
:offenderId ,
:offenderBookId ,
:txnPostingType ,
:txnType ,
:txnEntryDesc ,
:txnEntryAmount ,
:txnEntryDate ,
:subAccountType ,
:txnReferenceNumber ,
:modifyDate ,
:receiptNumber ,
:slipPrintedFlag ,
:transferCaseloadId ,
:receiptPrintedFlag ,
:preWithholdAmount ,
:deductionFlag ,
:closingChequeNumber ,
:remitterName ,
:payeeCode ,
:payeeNameText ,
:payeeCorporateId ,
:payeePersonId ,
:adjustTxnId ,
:adjustTxnEntryId ,
:adjustOffenderId ,
:adjustAccountCode ,
:txnAdjustedFlag ,
:deductionType ,
:infoNumber ,
:holdClearFlag ,
:holdUntilDate ,
:holdNumber ,
:grossAmount ,
:grossNetFlag ,
:remitterId ,
:applySpendingLimitAmount ,
:receiptPendingPrintFlag ,
:sealFlag ,
:orgTxnType ,
:createDatetime ,
:createUserId ,
NULL ,
NULL )
} 

OIDADMIS_SYSPFL_FIND_SYSTEM_PROFILES {
 SELECT PROFILE_TYPE ,PROFILE_CODE ,DESCRIPTION ,PROFILE_VALUE ,PROFILE_VALUE_2 ,MODIFY_USER_ID ,OLD_TABLE_NAME ,CREATE_DATETIME ,CREATE_USER_ID ,MODIFY_DATETIME ,SEAL_FLAG   FROM SYSTEM_PROFILES  /* where PROFILE_TYPE = ? and PROFILE_CODE = ?  */
}

OIDADMIS_SYSPFL_INSERT_SYSTEM_PROFILES {
insert
	into
	SYSTEM_PROFILES(PROFILE_TYPE ,
	PROFILE_CODE ,
	DESCRIPTION ,
	PROFILE_VALUE ,
	PROFILE_VALUE_2 ,
	MODIFY_USER_ID ,
	OLD_TABLE_NAME ,
	CREATE_DATETIME ,
	CREATE_USER_ID ,
	MODIFY_DATETIME ,
	SEAL_FLAG )
values(:profileType ,
:profileCode ,
:description ,
:profileValue ,
:profileValue2 ,
:modifyUserId ,
:oldTableName ,
:createDatetime ,
:createUserId ,
NULL,
:sealFlag )
} 

	OIDADMIS_SYSPFL_DELETE_SYSTEM_PROFILES { 
DELETE FROM SYSTEM_PROFILES where PROFILE_TYPE = :profileType and PROFILE_CODE = :profileCode 
} 

	OIDADMIS_DSP_DESCRIPTION_WHENVALIDATEITEM_GET_CAPACITY_CUR {
 SELECT CAPACITY FROM  LIVING_UNITS WHERE  LIVING_UNIT_ID = :LV_LIVING_UNIT_ID
}

	OIDADMIS_DSP_DESCRIPTION_WHENVALIDATEITEM_LIV_DESC {
 SELECT LIV_UNITS.DESCRIPTION FROM   LIVING_UNITS LIV_UNITS WHERE  LIV_UNITS.LIVING_UNIT_ID = :LV_LIVING_UNIT_ID
}

	OIDADMIS_NBT_ACTIVE_FLAG_WHENVALIDATEITEM_BOOK_NO_CRSR {
 SELECT BOOKING_NO FROM OFFENDER_BOOKINGS WHERE BOOKING_NO = :NBTACTIVEFLAG2 AND   OFFENDER_BOOK_ID = :OFFENDERBOOKID
}

	OIDADMIS_OFF_EM_WHENNEWBLOCKINSTANCE_OFF_ALERT_CUR {
 SELECT CA.MESSAGE_NUMBER FROM CASELOAD_ADM_ALERT_PROFILES CA WHERE CA.CASELOAD_ID = :CASELOADID AND EXISTS (SELECT '1' FROM OFFENDER_ALERTS OA WHERE OA.ALERT_STATUS = 'ACTIVE' AND OA.ROOT_OFFENDER_ID = :ROOTOFFENDERID AND OA.ALERT_TYPE = CA.ALERT_TYPE AND OA.ALERT_CODE = CA.ALERT_CODE)
}

	OIDADMIS_OFF_EM_WHENNEWBLOCKINSTANCE_CAS_AGY_CUR {
 SELECT COUNT(*) FROM CASELOAD_AGENCY_LOCATIONS WHERE CASELOAD_ID = :CASELOADID AND UPDATE_ALLOWED_FLAG = 'Y' AND AGY_LOC_ID NOT IN ('TRN', 'OUT')
}

	OIDADMIS_OFF_EM_WHENNEWBLOCKINSTANCE {
 SELECT SYS_MSG.MESSAGE_TEXT FROM SYSTEM_MESSAGES SYS_MSG WHERE SYS_MSG.APPLN_CODE = 'ADM' AND SYS_MSG.MESSAGE_NUMBER = :P_NUMBER
}

	OIDADMIS_OFF_EM_WHENNEWRECORDINSTANCE_GET_CAPACITY_CUR {
 SELECT CAPACITY FROM LIVING_UNITS WHERE LIVING_UNIT_ID = :LV_DFL_LIVING_UNIT_ID
}

	OIDADMIS_OFF_EM_WHENNEWRECORDINSTANCE_ADM {
 SELECT OEM.MOVEMENT_REASON_CODE FROM OFFENDER_EXTERNAL_MOVEMENTS OEM WHERE OEM.OFFENDER_BOOK_ID = :P_OFFENDER_BOOK_ID AND OEM.MOVEMENT_SEQ = (SELECT MAX(MOVEMENT_SEQ) FROM OFFENDER_EXTERNAL_MOVEMENTS WHERE OFFENDER_BOOK_ID = :P_OFFENDER_BOOK_ID)
}

	OIDADMIS_OFF_EM_WHENNEWRECORDINSTANCE_READMIT_CUR  {
 SELECT MR1.IN_MOVEMENT_REASON_CODE, MR2.DESCRIPTION FROM MOVEMENT_REASONS MR1, MOVEMENT_REASONS MR2 WHERE MR1.MOVEMENT_TYPE = 'REL' AND MR1.MOVEMENT_REASON_CODE = :P_MVT_REASON AND MR1.IN_MOVEMENT_TYPE = MR2.MOVEMENT_TYPE AND MR1.IN_MOVEMENT_REASON_CODE = MR2.MOVEMENT_REASON_CODE
}

	OIDADMIS_AGY_LOC_WHENNEWRECORDINSTANCE {
 SELECT COUNT(0) INTO NUM_OF_AGY_LOC FROM CASELOAD_AGENCY_LOCATIONS WHERE CASELOAD_ID = :CSLD_ID AND AGY_LOC_ID NOT IN ('OUT', 'TRN') 
}

	OIDADMIS_OFF_EM_WHENNEWRECORDINSTANCE {
 SELECT CAL.AGY_LOC_ID, AGY_LOC2.DESCRIPTION  FROM AGENCY_LOCATIONS AGY_LOC2, CASELOAD_AGENCY_LOCATIONS CAL WHERE CAL.AGY_LOC_ID NOT IN ('OUT', 'TRN') AND CAL.AGY_LOC_ID  = AGY_LOC2.AGY_LOC_ID AND CAL.CASELOAD_ID = :CSLD_ID 
}

	OIDADMIS_OFF_EM_PREINSERT_C {
 SELECT coalesce (MAX(MOVEMENT_SEQ),0) + 1
FROM OFFENDER_EXTERNAL_MOVEMENTS
WHERE
  OFFENDER_BOOK_ID = :offenderBookId

}

OIDADMIS_OFF_BKG_PREINSERT_C {
 select OIDADMIS_GET_NEW_BOOK_ID() from dual
 }

	OIDADMIS_DSP_DESCRIPTION_WHENVALIDATEITEM_VS_LCD_CUR {
SELECT LIVING_UNIT_ID ,DESCRIPTION FROM  LIVING_UNITS WHERE DESCRIPTION = :V_DESCRIPTION AND   AGY_LOC_ID  = :V_AGY_LOC_ID
}

	OIDADMIS_CGFKCHK_OFF_BKGS_OFF_BKG_STAF_C {
 SELECT
  STAFF.LAST_NAME, STAFF.FIRST_NAME
FROM STAFF_MEMBERS STAFF
WHERE
  USER_ID =:userId 

}

	OIDADMIS_CGFKCHK_OFF_EM_OFF_EM_REF_COD_C {
 SELECT REF_CODE2.DESCRIPTION
FROM REFERENCE_CODES REF_CODE2
WHERE
  REF_CODE2.CODE = :ARRESTAGENCYLOCID AND
  DOMAIN = 'ARREST_AGY' AND
  ACTIVE_FLAG = 'Y' AND
  EXPIRED_DATE IS NULL

}

	OIDADMIS_CGFKLKP_OFF_EM_OFF_EM_REF_COD_C {
 SELECT REF_CODE2.CODE FROM   REFERENCE_CODES REF_CODE2 WHERE  REF_CODE2.DESCRIPTION = :DSPDESCRIPTION AND     DOMAIN = 'ARREST_AGY' AND ACTIVE_FLAG = 'Y' AND EXPIRED_DATE IS NULL
}

	OIDADMIS_CGFKCHK_OFF_EM_OFF_EM_REF_C {
 SELECT REF_CODE1.DESCRIPTION FROM   REFERENCE_CODES REF_CODE1 WHERE  REF_CODE1.CODE = :ESCORTCODE AND     DOMAIN = 'ESCORT' AND ACTIVE_FLAG = 'Y' AND EXPIRED_DATE IS NULL
}

	OIDADMIS_CGFKLKP_OFF_EM_OFF_EM_REF_C {
 SELECT REF_CODE1.CODE FROM   REFERENCE_CODES REF_CODE1 WHERE  REF_CODE1.DESCRIPTION = :DSPDESCRIPTION3 AND     DOMAIN = 'ESCORT' AND ACTIVE_FLAG = 'Y' AND EXPIRED_DATE IS NULL
}

	OIDADMIS_CGFKCHK_OFF_EM_OFF_EM_MOVE_RS_C {
 SELECT MOVE_RSN1.DESCRIPTION FROM   MOVEMENT_REASONS MOVE_RSN1 WHERE  MOVE_RSN1.MOVEMENT_TYPE = 'ADM' AND    MOVE_RSN1.MOVEMENT_REASON_CODE = :MOVEMENTREASONCODE
}

	OIDADMIS_CGFKLKP_OFF_EM_OFF_EM_MOVE_RS_C {
 SELECT MOVE_RSN1.MOVEMENT_REASON_CODE FROM   MOVEMENT_REASONS MOVE_RSN1 WHERE  (MOVE_RSN1.DESCRIPTION = :DSPDESCRIPTION4 OR (MOVE_RSN1.DESCRIPTION IS NULL AND :DSPDESCRIPTION4 IS NULL )) AND  MOVEMENT_TYPE = 'ADM' AND EXPIRY_DATE IS NULL AND ( (RECORDSTATUS != 'QUERY' AND (ADMISSIONTYPE IN ('NEW','READM') AND MOVEMENT_REASON_CODE NOT IN ('RECA','INT') ) OR (ADMISSIONTYPE = 'RECAP' ) OR (ADMISSIONTYPE = 'TRANS' AND MOVEMENT_REASON_CODE = 'INT') ) OR (RECORDSTATUS = 'QUERY'))
}

	OIDADMIS_CGFKCHK_OFF_EM_OFF_EM_AGY_LOC_C {
 SELECT AGY_LOC1.DESCRIPTION FROM   AGENCY_LOCATIONS AGY_LOC1 WHERE  AGY_LOC1.AGY_LOC_ID = :TOAGYLOCID AND     DEACTIVATION_DATE IS NULL AND AGY_LOC1.AGY_LOC_ID NOT IN ( 'TRN', 'OUT') AND EXISTS ( SELECT 'X' FROM CASELOAD_AGENCY_LOCATIONS CAL WHERE CAL.CASELOAD_ID = :CASELOADID AND CAL.AGY_LOC_ID = AGY_LOC1.AGY_LOC_ID AND UPDATE_ALLOWED_FLAG = 'Y' )
}

	OIDADMIS_CGFKLKP_OFF_EM_OFF_EM_AGY_LOC_C {
 SELECT AGY_LOC1.AGY_LOC_ID FROM   AGENCY_LOCATIONS AGY_LOC1 WHERE  (AGY_LOC1.DESCRIPTION = :DSPDESCRIPTION5 OR (AGY_LOC1.DESCRIPTION IS NULL AND :DSPDESCRIPTION5 IS NULL )) AND     DEACTIVATION_DATE IS NULL AND AGY_LOC1.AGY_LOC_ID NOT IN ( 'TRN', 'OUT') AND EXISTS ( SELECT 'X' FROM CASELOAD_AGENCY_LOCATIONS CAL WHERE CAL.CASELOAD_ID = :CASELOADID AND CAL.AGY_LOC_ID = AGY_LOC1.AGY_LOC_ID AND UPDATE_ALLOWED_FLAG = 'Y' )
}

	OIDADMIS_CGFKCHK_OFF_EM_OFF_EM_AGY_C {
 SELECT AGY_LOC.DESCRIPTION FROM   AGENCY_LOCATIONS AGY_LOC WHERE  AGY_LOC.AGY_LOC_ID = :FROMAGYLOCID AND     DEACTIVATION_DATE IS NULL
}

	OIDADMIS_CGFKLKP_OFF_EM_OFF_EM_AGY_C {
 SELECT AGY_LOC.AGY_LOC_ID FROM   AGENCY_LOCATIONS AGY_LOC WHERE  (AGY_LOC.DESCRIPTION = :DSPDESCRIPTION6 OR (AGY_LOC.DESCRIPTION IS NULL AND :DSPDESCRIPTION6 IS NULL )) AND     DEACTIVATION_DATE IS NULL
}

	OIDADMIS_CGFKCHK_BED_AH_BED_AH_LIV_UNI_C {
 SELECT LIV_UNIT.DESCRIPTION FROM   LIVING_UNITS LIV_UNIT WHERE  LIV_UNIT.LIVING_UNIT_ID = :LIVINGUNITID
}

	OIDADMIS_CGFKLKP_BED_AH_BED_AH_LIV_UNI_C {
 SELECT LIV_UNIT.LIVING_UNIT_ID FROM   LIVING_UNITS LIV_UNIT WHERE  LIV_UNIT.DESCRIPTION = :DSPDESCRIPTION
}

	OIDADMIS_CGFKCHK_OFF_BKGS_OFF_BKG_REF_C {
 SELECT REFERENCE_CODES.DESCRIPTION FROM   REFERENCE_CODES REFERENCE_CODES WHERE  REFERENCE_CODES.CODE = :BOOKINGSTATUS AND     DOMAIN = 'BOOK_STS'
}

	OIDADMIS_INSERT_MASTER_REC_TRAN {
 SELECT CR_ACCOUNT_CODE, RECEIPT_PRODUCTION_FLAG FROM TRANSACTION_OPERATIONS WHERE MODULE_NAME = 'OIDADMIS' AND CASELOAD_ID = :P_CSLD_ID AND TXN_TYPE    = 'AD'
}

	OIDADMIS_INSERT_MASTER_REC_AC {
 SELECT TXN_POSTING_TYPE,SUB_ACCOUNT_TYPE  FROM ACCOUNT_CODES WHERE ACCOUNT_CODE = :CR_AC AND CASELOAD_TYPE = 'INST'
}

	OIDADMIS_INSERT_MASTER_REC {
 SELECT DESCRIPTION FROM TRANSACTION_TYPES WHERE TXN_TYPE = 'AD' AND CASELOAD_TYPE = 'INST'
}

	OIDADMIS_STOR_GLOBALS_GET_CR_ACCOUNT {
 SELECT CR_ACCOUNT_CODE, RECEIPT_PRODUCTION_FLAG FROM TRANSACTION_OPERATIONS WHERE MODULE_NAME = 'OIDADMIS' AND TXN_TYPE = 'AD' AND CASELOAD_ID = :CSLD_ID
}

	OIDADMIS_STOR_GLOBALS_AC {
 SELECT TXN_POSTING_TYPE,SUB_ACCOUNT_TYPE  FROM ACCOUNT_CODES WHERE ACCOUNT_CODE = :CR_AC AND CASELOAD_TYPE = 'INST'
}

	OIDADMIS_STOR_GLOBALS {
 SELECT DESCRIPTION  FROM TRANSACTION_TYPES WHERE TXN_TYPE = :P_TXN_TYPE AND CASELOAD_TYPE = 'INST'
}

	OIDADMIS_CHECK_ACTIVE_YN_ACT_CURR {
 SELECT 'Y' FROM OFFENDERS OFF WHERE OFF.ROOT_OFFENDER_ID = :P_ROOT_OFF_ID AND NOT EXISTS ( SELECT 'Y' FROM OFFENDER_BOOKINGS OFF_BKG WHERE OFF_BKG.ROOT_OFFENDER_ID = OFF.ROOT_OFFENDER_ID AND ACTIVE_FLAG = 'Y')
}

	OIDADMIS_CHECK_PREV_BKG_CLOSED_CHEK_CRSR {
 SELECT 'Y' FROM OFFENDER_BOOKINGS WHERE OFFENDER_BOOK_ID = :OFFENDERBOOKID AND BOOKING_STATUS = 'C'
}

	OIDADMIS_GET_STAFF_NAME_DEF_STAFF_CUR {
 SELECT STAFF_ID FROM STAFF_MEMBERS WHERE USER_ID = upper(USER)

}

	OIDADMIS_CALL_THE_PRE_INSERT_C {
SELECT coalesce (MAX (BED_ASSIGN_SEQ), 0) + 1
FROM BED_ASSIGNMENT_HISTORIES
WHERE
  OFFENDER_BOOK_ID = :OFFENDERBOOKID
}

	OIDADMIS_CHECK_CAPACITY_VS_LCD_CUR {
 SELECT CAPACITY FROM LIVING_UNITS WHERE AGY_LOC_ID = :TOAGYLOCID  JOHNNY, CHANGED FROM CASELOADID TO TOAGYLOCID AND LIVING_UNIT_ID = :P_LIVING_UNIT_ID
}

	OIDADMIS_POPULATE_GLOBAL_CAPACITY_VS_LCD_CUR {
 SELECT CAPACITY FROM LIVING_UNITS WHERE AGY_LOC_ID = :CASELOADID   BUG. AND LIVING_UNIT_ID = :V_LIVING_UNIT_ID
}

	OIDADMIS_GET_COUNT_OF_AGY_IN_CASE_GET_COUNT_CUR {
 SELECT COUNT(*) FROM   CASELOAD_ADM_OTHER_PROFILES CAOP WHERE  CAOP.CASELOAD_ID = :CASELOADID
}

	OIDADMIS_GET_COUNT_OF_AGY_IN_CASE_GET_AGY_CUR {
 SELECT AGY_LOC_ID FROM   CASELOAD_ADM_OTHER_PROFILES CAOP WHERE  CAOP.CASELOAD_ID = :CASELOADID
}

	OIDADMIS_GET_COUNT_OF_AGY_IN_CASE_AGY_LOC_CUR {
 SELECT COUNT(*) FROM   CASELOAD_AGENCY_LOCATIONS WHERE  AGY_LOC_ID = :LV_AGY_LOC_ID AND    CASELOAD_ID = :CASELOADID AND    UPDATE_ALLOWED_FLAG = 'Y'
}

	OIDADMIS_POPULATE_DSP_DESCRIPTION5_RG {
 SELECT
  AGY_LOC.DESCRIPTION DSP_DESCRIPTION5, AGY_LOC.AGY_LOC_ID TO_AGY_LOC_ID
FROM AGENCY_LOCATIONS AGY_LOC
WHERE
  DEACTIVATION_DATE IS NULL AND
  EXISTS
    (SELECT 'X'
     FROM CASELOAD_AGENCY_LOCATIONS CAL
     WHERE
       CAL.AGY_LOC_ID = AGY_LOC.AGY_LOC_ID AND
       CAL.CASELOAD_ID = :CASELOADID ) AND
  NOT EXISTS
    (SELECT 'X'
     FROM CASELOAD_ADM_OTHER_PROFILES CAOP
     WHERE
       CAOP.AGY_LOC_ID = AGY_LOC.AGY_LOC_ID AND
       CAOP.CASELOAD_ID = :CASELOADID) AND
  AGY_LOC_ID NOT IN ( 'OUT', 'TRN' )
ORDER BY
  1, 2

}

	OIDADMIS_VALIDATE_MOVEMENT_DATETIME_MAX_DATE {
 SELECT MAX(MOVEMENT_DATE) FROM   OFFENDER_EXTERNAL_MOVEMENTS WHERE  OFFENDER_BOOK_ID = :LV_OFFENDER_BOOK_ID
}

	OIDADMIS_VALIDATE_MOVEMENT_DATETIME_MAX_DATE_TIME {
 SELECT MAX(MOVEMENT_TIME) FROM   OFFENDER_EXTERNAL_MOVEMENTS WHERE  OFFENDER_BOOK_ID = :LV_OFFENDER_BOOK_ID AND    MOVEMENT_DATE = :LV_MAX_DATE
}

	OIDADMIS_VALIDATE_MOVEMENT_DATE_MAX_BOOK_ID {
 SELECT MAX(OFFENDER_BOOK_ID) FROM   OFFENDER_BOOKINGS WHERE  ROOT_OFFENDER_ID = :ROOTOFFENDERID
}

	OIDADMIS_VALIDATE_MOVEMENT_DATE_MAX_DATE {
 SELECT MAX(MOVEMENT_DATE) MOVEMENT_DATE, MAX(MOVEMENT_TIME) MOVEMENT_TIME FROM   OFFENDER_EXTERNAL_MOVEMENTS WHERE  OFFENDER_BOOK_ID = :OFFENDER_BOOK_ID
}

	OIDADMIS_GET_LIVING_UNIT_ID_GET_LIV_UNIT_ID {
 SELECT LIVING_UNIT_ID FROM CASELOAD_ADM_OTHER_PROFILES WHERE CASELOAD_ID = :CASELOADID AND AGY_LOC_ID =  :TOAGYLOCID
}

	OIDADMIS_DEACTIVATE_ACTIVE_OFF_EXM_REC_SET_LOCK_CUR {
 SELECT ROW_ID
FROM OFFENDER_EXTERNAL_MOVEMENTS
WHERE
  OFFENDER_BOOK_ID = :LV_OFFENDER_BOOK_ID AND
  ACTIVE_FLAG = 'Y'
FOR UPDATE  NOWAIT;
}

	OIDADMIS_CREATE_UPDATE_OFF_BILLING_PROF_GET_AGY_PROF_INFO_CUR {
 SELECT AGENCY_ID, BILLING_TYPE, RATE, FREQUENCY FROM AGENCY_BILLING_PROFILES WHERE CASELOAD_ID = :LV_CASELOAD_ID AND ALL_OFFENDER_FLAG = 'Y' AND ACTIVE_FLAG = 'Y'  
}

	OIDADMIS_CREATE_UPDATE_OFF_BILLING_PROF {
 SELECT DELAY_DAYS FROM AGENCY_BILLING_PROFILES WHERE AGENCY_ID           = CP_AGENCY_ID AND BILLING_TYPE         = CP_BILLING_TYPE AND CASELOAD_ID          = LV_CASELOAD_ID AND ALL_OFFENDER_FLAG 		= 'Y' AND ACTIVE_FLAG 					= 'Y'
}

	OIDADMIS_WORKFLOW_DOWN_FORM_COUNT_CUR {
 SELECT COUNT(*) FROM WORKFLOW_SCREENS WHERE MODULE_NAME = 'OIDADMIS'
}

	OIDADMIS_WORKFLOW_DOWN_FORM_SEQ_NO_CUR {
 SELECT WORKFLOW_SEQ, WORKFLOW_CODE FROM WORKFLOW_SCREENS WHERE MODULE_NAME = 'OIDADMIS'
}

	OIDADMIS_WORKFLOW_DOWN_FORM_CALL_FORM_CUR {
 SELECT MODULE_NAME FROM WORKFLOW_SCREENS WHERE WORKFLOW_SEQ > :LV_SEQ_NO AND WORKFLOW_CODE = :LV_WORKFLOW_CODE ORDER BY WORKFLOW_SEQ ASC
}

	OIDADMIS_CHK_ASSIGNED_LOC_HOU_UN_TYPE_CUR {
 SELECT HOUSING_UNIT_TYPE FROM LIVING_UNITS WHERE LIVING_UNIT_ID = :P_LIV_UNIT_ID
}

	OIDADMIS_CHECK_BED_AH_BLK_NAV_CAS_AGY_CUR {
 SELECT COUNT (*) FROM CASELOAD_AGENCY_LOCATIONS WHERE CASELOAD_ID = :CASELOADID AND UPDATE_ALLOWED_FLAG = 'Y' AND AGY_LOC_ID NOT IN ('TRN', 'OUT')
}

	OIDADMIS_VALIDATE_LIVING_UNITS_VS_LCD_CUR {
SELECT LIVING_UNIT_ID ,DESCRIPTION FROM  LIVING_UNITS WHERE DESCRIPTION = :V_DESCRIPTION AND   AGY_LOC_ID  = :V_AGY_LOC_ID AND ACTIVE_FLAG = 'Y'
}

OIDADMIS_OFFEM_UPDATE_OFFENDER_BOOKINGS {
update
	OFFENDER_BOOKINGS
set
	booking_status = 'O',
	active_flag = 'Y',
	in_out_status = 'IN',
	booking_end_date = null,
	STATUS_REASON =:statusReason,
	LIVING_UNIT_ID =:livingUnitId,
	CREATE_AGY_LOC_ID = :createAgyLocId,
	BOOKING_TYPE = :bookingType,
	modify_datetime =current_timestamp ,
	modify_user_id =:modifyUserId
where
	OFFENDER_BOOK_ID = :offenderBookId
} 

OIDADMIS_REFERENCECODES_STATUS_DESC {
 SELECT REFERENCE_CODES.DESCRIPTION FROM   REFERENCE_CODES REFERENCE_CODES WHERE   DOMAIN = 'BOOK_STS'
}
	OIDADMIS_STAFFMEMBERS_DESC {
 SELECT STAFF.LAST_NAME || ', ' || STAFF.FIRST_NAME DESCRIPTION, to_char(STAFF.STAFF_ID) CODE FROM   STAFF_MEMBERS STAFF  
}

OIDADMIS_BED_AH_PREINSERT_C {
SELECT coalesce 
(MAX (BED_ASSIGN_SEQ), 0) + 1
              FROM BED_ASSIGNMENT_HISTORIES
             WHERE OFFENDER_BOOK_ID = :offenderBookId
}
OIDADMIS_GET_ESCAPE_SEQ {
select
	coalesce (MAX (ESCAPE_ID),
	0)
from
	offender_escapes
where
	OFFENDER_BOOK_ID = :offenderBookId
}

UPDATE_ESC_OFFENDERS{
update
	offender_escapes
set
	READMISSION_DATE =:readmissionDate,
	READMISSION_TIME =:readmissionTime,
	READMISS_AGY_LOC_ID =:readmissAgyLocId,
	RECAPTURE_MOVEMENT_REASON =:recaptureMovementReason,
	modify_datetime =current_timestamp ,
	modify_user_id =:modifyUserId
where
	OFFENDER_BOOK_ID =:offenderBookId
	and ESCAPE_ID =:escapeId
} 
OIDADMIS_CASELOAD_ID {
SELECT CAL.AGY_LOC_ID
FROM
  CASELOAD_AGENCY_LOCATIONS CAL, V_HEADER_BLOCK_FN(:USERID)  V, OFFENDER_BOOKINGS OB
WHERE
  CAL.AGY_LOC_ID = V.AGY_LOC_ID AND
  OB.OFFENDER_BOOK_ID=V.OFFENDER_BOOK_ID AND
  V.OFFENDER_ID=:offenderId AND
  OB.OFFENDER_BOOK_ID =
    (SELECT MAX(OFFENDER_BOOK_ID)
     FROM OFFENDER_BOOKINGS OB
     WHERE
       OB.OFFENDER_BOOK_ID=V.OFFENDER_BOOK_ID AND
       OB.ACTIVE_FLAG='Y') AND
  EXISTS
    (SELECT AGY_LOC_ID
     FROM CASELOAD_AGENCY_LOCATIONS
     WHERE
       CASELOAD_ID =
         (SELECT WORKING_CASELOAD_ID
          FROM STAFF_MEMBERS
          WHERE
            USER_ID = upper(:USERID)) AND
       UPDATE_ALLOWED_FLAG = 'Y' AND
       AGY_LOC_ID NOT IN ('TRN', 'OUT') AND
       AGY_LOC_ID IN
         (SELECT AGY_LOC_ID
          FROM V_HEADER_BLOCK_FN(:USERID) V_HEADER_BLOCK
          WHERE
            OFFENDER_ID_DISPLAY= V.OFFENDER_ID_DISPLAY AND
            ACTIVE_FLAG='Y'))


}
OIDADMIS_CGFKCHK_OFF_BKGS_OFF_BKG_STAF_ID {
 SELECT STAFF_ID FROM   STAFF_MEMBERS STAFF WHERE  USER_ID = upper(USER)

}

OIDADMIS_GET_NEW_BOOKING_NO {
	SELECT OIDADMIS_GET_NEW_BOOKING_NO() BOOKING_NO FROM DUAL

}
OIDADMIS_GET_P_OFF_AGE {

select round((RN::double precision/365)) from (select (date_trunc('D',SYSDATE())::date-to_date(:BIRTH_DATE,'yyyy/mm/dd')) as RN from dual)A;
}

OIDADMIS_GET_STAFF_ID{
SELECT staff_id FROM STAFF_MEMBERS where  user_id  =:userId
}

OFFENDER_BED_ASSIGNMENT_HISTORIES {
 SELECT OFFENDER_BOOK_ID ,BED_ASSIGN_SEQ ,LIVING_UNIT_ID ,ASSIGNMENT_DATE ,ASSIGNMENT_TIME ,ASSIGNMENT_REASON ,ASSIGNMENT_END_DATE ,ASSIGNMENT_END_TIME ,CREATE_DATETIME ,CREATE_USER_ID ,MODIFY_DATETIME ,MODIFY_USER_ID ,SEAL_FLAG   FROM BED_ASSIGNMENT_HISTORIES   where OFFENDER_BOOK_ID = :offenderBookId and BED_ASSIGN_SEQ =(select max(bed_assign_seq) from BED_ASSIGNMENT_HISTORIES WHERE offender_book_id=:offenderBookId )
}

OIDIEPLV_OIDADMIS_IEP_LEVEL_DETAILS{
select iep_level_code ,iep_level_description ,review_days from incentives_earn_privs ilm where intake_iep ='Y'
}

OIDIEPLV_OIDADMIS_INSERT_DATA
{
insert into off_incentives_earn_privs(iep_level_seq, offender_book_id, iep_level_code, assigned_date, approved_staff_id, next_review_date, review_comment, create_datetime, create_user_id ) values(nextval('IEP_LEVEL_SEQ'), :offenderBookId, :iepLevelCode, :dateAsigned, :staffId, current_timestamp::date +( select review_days from incentives_earn_privs ilm where ilm.iep_level_code =:iepLevelCode )* interval '1 day', :reviewComment, current_timestamp, :createUserId ) 
}


 OIDADMIS_SYSPFL_FIND_SYSTEM_PROFILES_GET_SYSTEM_GENERATED_USER {
 SELECT PROFILE_VALUE  FROM SYSTEM_PROFILES   where PROFILE_TYPE = 'CLIENT' and PROFILE_CODE = 'SYS_GEN_USER'
}
 OIDADMIS_OFFENDER_DETAILS
{
select concat(last_name,' ',first_name,', ',offender_id_display) as details from offenders where offender_id =:offenderId
}


OIDADMIS_GET_IEP_CODE{
select iep_level_code from incentives_earn_privs iep  where iep_level_description =:iepLevelDescription 
}


OIDADMIS_GET_REVIEW_DAYS{
select current_timestamp::date + ilm.review_days * interval '1 day' review_days from incentives_earn_privs ilm where iep_level_code =:iepLevelCode 
}

OIDADMIS_CUSTODY_UPDATE_BOOKINGS{
update
	offender_legal_adjustments
set
	object_id =:objectId,
	adjust_date =:adjustDate,
	adjust_days =:adjustDays,
	adjust_from_date =:adjustFromDate,
	adjust_to_date =:adjustToDate,
	comment_text =:commentText,
	modify_datetime = current_timestamp,
	modify_user_id =:modifyUserId,
	rd_years =:rdYears,
	rd_months =:rdMonths,
	rd_weeks =:rdWeeks,
	rd_days =:rdDays
where
	offender_book_id =:offenderBookId
	and offender_order_adjust_id =:offenderOrderAdjustId
}

OIDADMIS_FETCH_BOOKING_DETAILS{
select ola.*, ( select usage_code from sentence_adjustments sa where sentence_adjust_code = ola.adjust_code) as usage_code,(select debit_credit_code from sentence_adjustments sa where sentence_adjust_code = ola.adjust_code) as debit_credit_code from offender_legal_adjustments ola where offender_book_id = :offenderBookId order by adjust_date desc
}


OIDCUSTAD_FETCH_RELEASE_DATE{
select movement_date from OFFENDER_EXTERNAL_MOVEMENTS where offender_book_id =:offenderBookId and movement_reason_code =( select value from legal_settings ls where code = 'RRTIEA') order by movement_date desc limit 1
}


OIDADMIS_SAVE_CUSTODY_BOOKINGS{
insert into oms_owner.offender_legal_adjustments (offender_order_adjust_id, adjust_code, offender_book_id, object_id, object_type, adjust_date, adjust_days, adjust_from_date, adjust_to_date, comment_text, create_datetime, create_user_id, modify_datetime, modify_user_id, seal_flag, rd_months, rd_weeks, rd_days, rd_years) values(nextval('offender_order_adjust_id_seq'), :adjustCode, :offenderBookId, :objectId, :objectType, :adjustDate, :adjustDays, :adjustFromDate, :adjustToDate, :commentText, current_timestamp, :createUserId, null, null, :sealFlag, :rdMonths, :rdWeeks, :rdDays,:rdYears)
}

OIDADMIS_SHOW_ALERT_FOR_RELEASE_OFFENDER{
SELECT DISTINCT cap.message_text FROM caseload_adm_alert_profiles cap LEFT JOIN ( SELECT oa.alert_type, oa.alert_code, oa.offender_book_id FROM offender_alerts oa JOIN offender_bookings ob ON oa.offender_book_id = ob.offender_book_id WHERE ob.offender_id = :offenderId ) oa ON cap.alert_type = oa.alert_type AND cap.alert_code = oa.alert_code JOIN caseloads c ON cap.caseload_id = c.caseload_id WHERE oa.offender_book_id IS NOT NULL AND oa.alert_type IS NOT NULL AND oa.alert_code IS NOT NULL AND  c.caseload_id =:caseloadId AND c.caseload_type = 'INST' AND cap.message_text IS NOT NULL;

}
