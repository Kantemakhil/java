
OUMEMOVE_FIND_CGFKMOVERSNMOVEMENTREASON {
 SELECT REF_CODE1.CODE,REF_CODE1.DESCRIPTION FROM   REFERENCE_CODES REF_CODE1 WHERE   DOMAIN = 'MOVE_RSN' AND ((ACTIVE_FLAG = 'Y' AND EXPIRED_DATE IS NULL ) OR '' = 'ENTER-QUERY' ) ORDER BY  REF_CODE1.LIST_SEQ ,REF_CODE1.CODE	
}

OUMEMOVE_FIND_CGFKMOVERSNMOVEMENTTYPE {
 SELECT REF_CODE2.CODE ,REF_CODE2.DESCRIPTION  FROM   REFERENCE_CODES REF_CODE2 WHERE   DOMAIN = 'MOVE_TYPE' AND ((ACTIVE_FLAG = 'Y' AND EXPIRED_DATE IS NULL ) OR '' = 'ENTER-QUERY' ) ORDER BY  REF_CODE2.LIST_SEQ ,REF_CODE2.CODE	
}

OUMEMOVE_MOVERSN_FIND_MOVEMENT_REASONS {
SELECT   MOVEMENT_TYPE,MOVEMENT_REASON_CODE,DESCRIPTION,OPEN_CONTACT_FLAG,CLOSE_CONTACT_FLAG,ACTIVE_FLAG,LIST_SEQ,EXPIRY_DATE,CREATE_USER_ID,NOTIFICATION_TYPE,NOTIFICATION_FLAG,BILLING_SERVICE_FLAG,TRANSPORTATION_FLAG,HEADER_STATUS_FLAG,IN_MOVEMENT_TYPE,IN_MOVEMENT_REASON_CODE,ESC_RECAP_FLAG,CREATE_DATETIME,MODIFY_DATETIME,MODIFY_USER_ID,SEAL_FLAG,UPDATE_ALLOWED_FLAG,TRN_REQ_APVL_FLAG,TRN_SCHD_TRIP_FLAG,TRN_ASSIGN_PRIORITY_FLAG,TRN_P_LIST_FLAG,TRN_PRIORITY_SEQ,SUBSEQUENT_MV_TYPE,SUBSEQUENT_MV_RSN_CODE,REASON_FLAG,DRIVE_TO_OIDUMAPP_FLAG,INACTIVATE_SENT,SUSPEND_REACTIVATE_SENT  FROM MOVEMENT_REASONS
}
OUMEMOVE_MOVERSN_INSERT_MOVEMENT_REASONS {
insert into MOVEMENT_REASONS(MOVEMENT_TYPE, MOVEMENT_REASON_CODE, DESCRIPTION, OPEN_CONTACT_FLAG, CLOSE_CONTACT_FLAG, ACTIVE_FLAG, LIST_SEQ, EXPIRY_DATE, CREATE_USER_ID, NOTIFICATION_TYPE, NOTIFICATION_FLAG, BILLING_SERVICE_FLAG, TRANSPORTATION_FLAG, HEADER_STATUS_FLAG, IN_MOVEMENT_TYPE, IN_MOVEMENT_REASON_CODE, ESC_RECAP_FLAG, CREATE_DATETIME, MODIFY_DATETIME, SEAL_FLAG, UPDATE_ALLOWED_FLAG, TRN_REQ_APVL_FLAG, TRN_SCHD_TRIP_FLAG, TRN_ASSIGN_PRIORITY_FLAG, TRN_P_LIST_FLAG, TRN_PRIORITY_SEQ, SUBSEQUENT_MV_TYPE, SUBSEQUENT_MV_RSN_CODE, REASON_FLAG, DRIVE_TO_OIDUMAPP_FLAG, INACTIVATE_SENT, SUSPEND_REACTIVATE_SENT) values(:movementType, :movementReasonCode, :description, :openContactFlag, :closeContactFlag, :activeFlag, :listSeq, :expiryDate, :createUserId, :notificationType, :notificationFlag, :billingServiceFlag, :transportationFlag, :headerStatusFlag, :inMovementType, :inMovementReasonCode, :escRecapFlag, CURRENT_TIMESTAMP, null, :sealFlag, :updateAllowedFlag, :trnReqApvlFlag, :trnSchdTripFlag, :trnAssignPriorityFlag, :trnpListFlag, :trnPrioritySeq, :subSequentMvType, :subSequentMvRsnCode, :reasonFlag, :driveToOidumappFlag, :inActivateSent, :suspendReactiveSent)}

OUMEMOVE_MOVERSN_UPDATE_MOVEMENT_REASONS {
  update MOVEMENT_REASONS set MOVEMENT_TYPE =:movementType, MOVEMENT_REASON_CODE =:movementReasonCode, DESCRIPTION =:description, OPEN_CONTACT_FLAG =:openContactFlag, CLOSE_CONTACT_FLAG =:closeContactFlag, ACTIVE_FLAG =:activeFlag, LIST_SEQ =:listSeq, EXPIRY_DATE =:expiryDate, NOTIFICATION_TYPE =:notificationType, NOTIFICATION_FLAG =:notificationFlag, BILLING_SERVICE_FLAG =:billingServiceFlag, TRANSPORTATION_FLAG =:transportationFlag, HEADER_STATUS_FLAG =:headerStatusFlag, IN_MOVEMENT_TYPE =:inMovementType, IN_MOVEMENT_REASON_CODE =:inMovementReasonCode, ESC_RECAP_FLAG =:escRecapFlag, MODIFY_DATETIME = CURRENT_TIMESTAMP, MODIFY_USER_ID = :modifyUserId, SEAL_FLAG =:sealFlag, UPDATE_ALLOWED_FLAG =:updateAllowedFlag, TRN_REQ_APVL_FLAG =:trnReqApvlFlag, TRN_SCHD_TRIP_FLAG =:trnSchdTripFlag, TRN_ASSIGN_PRIORITY_FLAG =:trnAssignPriorityFlag, TRN_P_LIST_FLAG =:trnpListFlag, TRN_PRIORITY_SEQ =:trnPrioritySeq, SUBSEQUENT_MV_TYPE =:subSequentMvType, SUBSEQUENT_MV_RSN_CODE =:subSequentMvRsnCode, REASON_FLAG =:reasonFlag, DRIVE_TO_OIDUMAPP_FLAG =:driveToOidumappFlag, INACTIVATE_SENT =:inActivateSent, SUSPEND_REACTIVATE_SENT =:suspendReactiveSent where MOVEMENT_TYPE =:movementType and MOVEMENT_REASON_CODE =:movementReasonCode
}

OUMEMOVE_MOVERSN_DELETE_MOVEMENT_REASONS { 
	DELETE FROM MOVEMENT_REASONS where MOVEMENT_TYPE=:movementType AND MOVEMENT_REASON_CODE=:movementReasonCode 
}


OUMEMOVE_CGRICHK_SCHEDULE_MOVEMENT_REASONS {
	SELECT  count(*) FROM    OFFENDER_IND_SCHEDULES OFF_SCH WHERE   OFF_SCH.EVENT_TYPE = :movementType AND     OFF_SCH.EVENT_SUB_TYPE = :movementReasonCode 
}

OUMEMOVE_CGRICHK_MOVEMENT_REASONS {
	SELECT  count(*) FROM    OFFENDER_EXTERNAL_MOVEMENTS OFF_EM WHERE   OFF_EM.MOVEMENT_TYPE = :movementType AND     OFF_EM.MOVEMENT_REASON_CODE = :movementReasonCode 
}
