
OCDSUPST_OFFENDER_BOOKING_AGY_LOCS {
 	SELECT *  FROM OFFENDER_BOOKING_AGY_LOCS  WHERE OFFENDER_BOOK_ID = :offenderBookId  ORDER BY ADDITION_DATE DESC
 }

OCDSUPST_GET_SYS_PROFILES {
  SELECT PROFILE_VALUE FROM SYSTEM_PROFILES WHERE PROFILE_CODE = 'CF_AUTOFEECR' AND  PROFILE_TYPE ='CLIENT'
}
OCDSUPST_GET_BILLABLE_FLAG_VALUE {
  SELECT * FROM REFERENCE_CODES WHERE DOMAIN = 'SUP_STATUS' AND CODE = :CODE
}

OCDSUPST_SUPERVISION_HSTY_EXECUTE_QUERY {
select * from OFF_SUPERVISION_STS_HTY where offender_book_id = :offenderBookId  order by error_flag asc,start_datetime desc
}

OCDSUPST_SUPERVISION_HISTORY_INSERT_QUERY {
insert into off_supervision_sts_hty (offender_sup_id, offender_book_id, sup_status, start_datetime, comment_text, error_flag, create_user_id, modify_user_id, seal_flag)
values(nextval('OFFENDER_SUP_ID'), :offenderBookId, :supStatus, :startDatetime, :commentText, :errorFlag, :createUserId, null, null)
}

OCDSUPST_SUPERVISION_HISTORY_UPDATE_QUERY {
update OFF_SUPERVISION_STS_HTY set SUP_STATUS = :supStatus, START_DATETIME = :startDatetime, COMMENT_TEXT =:commentText, ERROR_FLAG = :errorFlag, END_DATETIME = :endDatetime where OFFENDER_SUP_ID = :offenderSupId
}
OCDSUPST_SUPERVISION_HISTORY_DELETE_QUERY {
   DELETE FROM OFF_SUPERVISION_STS_HTY WHERE  OFFENDER_SUP_ID = :offenderSupId
}

OCDSUPST_GET_FEE_ACCOUNT_SUP_START_DATE {
SELECT * FROM OFF_FEE_ACCOUNT_PROFILE WHERE OFFENDER_BOOK_ID = :OFFENDER_BOOK_ID AND FEE_CODE = 'SUPV' AND FEE_ACT_STATUS = 'A'
}

OCDSUPST_UPDATE_FEE_ACCOUNTS {
UPDATE OFF_FEE_ACCOUNT_PROFILE SET FEE_ACT_STATUS = :feeActStatus , STATUS_EFFECTIVE_DATE = :statusEffectiveDate , EFFECTIVE_DATE = :effectiveDate WHERE OFFENDER_FEE_ID =:offenderFeeId
}
OCDSUPST_GET_FEE_ACCOUNT_SUP_DATA {
SELECT * FROM OFF_FEE_ACCOUNT_PROFILE WHERE OFFENDER_BOOK_ID = :OFFENDER_BOOK_ID
}
OCDSUPST_SUPV_HSTY_EXECUTE_QUERY {
select * from OFF_SUPERVISION_STS_HTY where offender_book_id = :offenderBookId  order by OFFENDER_SUP_ID desc
}
OCDSUPST_GET_INTAKE_REVIEW_COUNT {
SELECT COUNT(*) FROM OFF_INTAKE_REVIEW_QUEUE WHERE OFFENDER_BOOK_ID = :OFFENDER_BOOK_ID AND ACCEPTED_FLAG = 'N'
}

OCDSUPST_VALIDATE_START_END_DATES {
SELECT COUNT(*)
FROM OFF_SUPERVISION_STS_HTY
WHERE
OFFENDER_BOOK_ID=:OFFENDER_BOOK_ID AND ERROR_FLAG = 'N'
AND
((to_char(:START_DATETIME,'DD/MM/YYYY HH24:MI') BETWEEN to_char(START_DATETIME,'DD/MM/YYYY HH24:MI') AND to_char(END_DATETIME,'DD/MM/YYYY HH24:MI'))
OR
(to_char(:END_DATETIME,'DD/MM/YYYY HH24:MI') BETWEEN to_char(START_DATETIME,'DD/MM/YYYY HH24:MI') AND to_char(END_DATETIME,'DD/MM/YYYY HH24:MI'))
OR
to_char(START_DATETIME,'DD/MM/YYYY HH24:MI')  = to_char(:START_DATETIME,'DD/MM/YYYY HH24:MI') 
OR
to_char(END_DATETIME,'DD/MM/YYYY HH24:MI')  = to_char(:END_DATETIME,'DD/MM/YYYY HH24:MI')
)
}

OCDSUPST_VALIDATE_START_DATE {
--SELECT COUNT(*)
--FROM OFF_SUPERVISION_STS_HTY
--WHERE
--OFFENDER_BOOK_ID=:OFFENDER_BOOK_ID AND
--ERROR_FLAG = 'N' AND
--((to_date(to_char(:START_DATETIME,'DD/MM/YYYY HH24:MI'),'DD/MM/YYYY HH24:MI') 
--BETWEEN to_date(to_char(START_DATETIME,'DD/MM/YYYY HH24:MI'),'DD/MM/YYYY HH24:MI') 
--AND to_date(to_char(END_DATETIME,'DD/MM/YYYY HH24:MI'),'DD/MM/YYYY HH24:MI'))
--OR to_date(to_char(START_DATETIME,'DD/MM/YYYY HH24:MI'),'DD/MM/YYYY HH24:MI') = to_date(to_char(:START_DATETIME,'DD/MM/YYYY HH24:MI'),'DD/MM/YYYY HH24:MI')
--)
SELECT COUNT(*)
FROM OFF_SUPERVISION_STS_HTY
WHERE
  OFFENDER_BOOK_ID=:OFFENDER_BOOK_ID AND
  ERROR_FLAG = 'N' AND
  ((to_char(to_date(:START_DATETIME,'DD/MM/YYYY HH24:MI'),'DD/MM/YYYY HH24:MI') BETWEEN to_char(START_DATETIME,'DD/MM/YYYY HH24:MI') 
  AND to_char(END_DATETIME,'DD/MM/YYYY HH24:MI')) OR to_char(START_DATETIME,'DD/MM/YYYY HH24:MI') = (to_char(to_date(:START_DATETIME,'DD/MM/YYYY HH24:MI'),'DD/MM/YYYY HH24:MI'))) 

}

OCDSUPST_GET_ACTIVE_COUNT {
SELECT count(*) FROM off_supervision_sts_hty WHERE OFFENDER_BOOK_ID = :OFFENDER_BOOK_ID AND (end_datetime> SYSDATE OR end_datetime IS NULL) AND error_flag = 'Y'
}

OCDSUPST_UPDATE_ACTIVE_RECORD {
UPDATE OFF_SUPERVISION_STS_HTY SET END_DATETIME = :startDatetime WHERE OFFENDER_BOOK_ID = :offenderBookId AND END_DATETIME IS NULL AND ERROR_FLAG = 'N'
}

OCDSUPST_FIND_CASELOAD_DEDUCTION_PROFILES {
SELECT   caseload_id, deduction_type,FO_AL_ALL_OFFENDER_FLAG, BACK_BILL, non_billable_status,max_total_amount,FREQUENCY_TYPE,FREQUENCY_CODE,DAY_OF_MONTH 
    FROM caseload_deduction_profiles where  deduction_type IN (select deduction_type from deduction_types where DEDUCTION_CATEGORY = 'FEE') and caseload_id = :caseloadId
      and fo_al_all_offender_flag ='Y' and (active_flag = 'Y' and expiry_date is null)
}
OCDSUPST_GET_MAX_ODP_VALUE {
select
	COALESCE (MAX(ODP),0)+ 1
from
	OFF_FEE_ACCOUNT_PROFILE
where
	offender_book_id = :offenderBookId
	and fee_code = :FEE_CODE
	and caseload_id =:caseloadId
	}
OCDSUPST_GET_FEE_BILL_CASELOAD_SEQ {
--SELECT %SEQNAME%.NEXTVAL FROM DUAL
select nextval('%SEQNAME%') FROM DUAL;
}
OCDSUPST_UPDATE_FEE_ACCOUNT_STATUS {
UPDATE OFF_FEE_ACCOUNT_PROFILE SET FEE_ACT_STATUS = :feeActStatus , STATUS_EFFECTIVE_DATE = :statusEffectiveDate WHERE OFFENDER_FEE_ID =:offenderFeeId
}
OCDSUPST_OFF_FEE_BILLS__INSERT {
INSERT INTO OFF_FEE_BILLS(BILL_ID,OFFENDER_FEE_ID,BILL_DATE,BILL_GENERATE_DATETIME,BILL_GENERATE_AMOUNT,BILL_GENERATE_STAFF_ID,
BILL_GENERATE_USER,BILL_STATEMENT_DATE,BILL_AR_DUE_DATE,BILL_LDPP_START_DATE,BILL_LDPP_END_DATE,STATEMENT_GENERATED_FLAG,BILLING_STATEMENT_ID,CREATE_DATETIME,CREATE_USER_ID,MODIFY_DATETIME,MODIFY_USER_ID,SEAL_FLAG)
values(:billId,:offenderFeeId,trunc(:billDate),:billGenerateDatetime,:billGenerateAmount,:billGenerateStaffId,
:billGenerateUser,trunc(:billExpectedStatementDate),trunc(:billExpectedStatementDate)+30,trunc(:billExpectedStatementDate)+31,trunc(:billExpectedStatementDate)+90,:statementGeneratedFlag,:billingStatementId,:createDatetime,:createUserId,:modifyDatetime,:modifyUserId,:sealFlag)
}
OCDSUPST_GET_CURRENT_STAFFDETAIL {
 SELECT STAFF_ID FROM   STAFF_MEMBERS  STAFF WHERE  USER_ID = :userId	
 }
 OCDSUPST_OFF_FEE_BILLS_TRANSACTIONS_INSERT {
 INSERT INTO OFF_FEE_BILL_TRANSACTIONS (BILL_ID,BILL_TXN_NO,BILL_TXN_DATETIME,BILL_TXN_STAFF_ID,BILL_TXN_USER,
BILL_TXN_TYPE,BILL_TXN_AMOUNT,TRUST_TXN_ID,TRUST_TXN_ENTRY_SEQ,OFF_ADJ_CANC_RSN,OFF_ADJ_SUB_RSN,OFF_ADJ_TXN_ID,OFF_ADJ_REV_RSN,
BILL_STATUS,BILL_AGING_START_DATE,BILL_AGING_END_DATE,BILL_TXN_COMMENT,ORIGINAL_BILL_ID,ORIGINAL_BILL_TXN_NO,
ORIGINAL_OFF_ADJ_TXN_ID,TXN_STATEMENT_GENERATED_FLAG,BILLING_STATEMENT_ID,CREATE_DATETIME,CREATE_USER_ID,MODIFY_DATETIME,MODIFY_USER_ID,SEAL_FLAG)
values(:billId,:billTxnNo,:billTxnDatetime,:billTxnStaffId,:billTxnUser,
:billTxnType,:billTxnAmount,:trustTxnId,:trustTxnEntrySeq,:offAdjCancRsn,:offAdjSubRsn,:offAdjTxnId,:offAdjRevRsn,
:billStatus,:billAgingStartDate,:billAgingEndDate,:billTxnComment,:originalBillId,:originalBillTxnNo,
:originalOffAdjTxnId,:txnStatementGeneratedFlag,:billingStatementId,:createDatetime,:createUserId,:modifyDatetime,:modifyUserId,:sealFlag)
 }
 OCDSUPST_OFF_FEE_BILLS_TRANSACTIONS_PRE_INSERT {
 select nvl(max(BILL_TXN_NO),0)+1 from OFF_FEE_BILL_TRANSACTIONS where BILL_ID = :BILL_ID
 }
 OCDSUPST_OFF_FEE_BILL_COUNT {
-- select count(*) from off_fee_bills where OFFENDER_FEE_ID = :OFFENDER_FEE_ID 
SELECT count(*)
FROM
  OFF_FEE_BILLS OFB, OFF_FEE_ACCOUNT_PROFILE OFP, OFF_FEE_BILL_TRANSACTIONS OFBT
WHERE
  OFBT.BILL_ID=OFB.BILL_ID AND
  OFP.OFFENDER_FEE_ID=OFB.OFFENDER_FEE_ID AND
  OFP.OFFENDER_BOOK_ID = :OFFENDER_BOOK_ID AND
  OFBT.BILL_STATUS != 'PAID'
 }
 OCDSUPST_GET_SUPV_REC_COUNT {
 	SELECT count(*)  FROM off_fee_account_profile ofap  WHERE ofap.offender_book_id = :offender_book_id and ofap.caseload_id =:caseloadId and
ofap.fee_code In (select deduction_type from caseload_deduction_profiles where FO_AL_ALL_OFFENDER_FLAG = 'Y')
}
OCDSUPST_GET_FEE_ACCOUNT_SUPERVISION_RECORDS_DATA {
SELECT *  FROM off_fee_account_profile ofap  WHERE ofap.offender_book_id = :offender_book_id and
ofap.fee_code In (select deduction_type from caseload_deduction_profiles where FO_AL_ALL_OFFENDER_FLAG = 'Y')
}

OCDSUPST_SUPERVISION_HSTY_CURRENT_EXECUTE_QUERY_RECORD {
select * from OFF_SUPERVISION_STS_HTY where offender_book_id = :offenderBookId  and END_DATETIME is null
}
OCDSUPST_ACTIVE_FEE_OVERRIDE_EXISTS {
SELECT OVERRIDE_AMOUNT FROM OFF_FEE_ACCOUNT_OVERRIDES WHERE OFFENDER_FEE_ID = :OFFENDERFEEID AND OVERRIDE_END_DATE IS NULL
}
OCDSUPST_CHECK_PREPAID_ACCOUNT {
select count(*) from FEE_ACCOUNTS where fee_code =:feeCode
}