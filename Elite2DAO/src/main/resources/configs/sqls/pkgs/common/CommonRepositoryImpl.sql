IMAGE_COLUMN_CUR{
SELECT COLUMN_NAME FROM ALL_TAB_COLUMNS WHERE UPPER(TABLE_NAME) = 'IMAGES' AND UPPER(COLUMN_NAME) IN ('IMAGE_DATA', 'IMAGE_THUMBNAIL');
}

GET_RESULT_IMAGE_MARK_EXISTS{
SELECT 'Y' FROM IMAGES WHERE IMAGE_OBJECT_ID = :P_OFFENDER_BOOK_ID AND IMAGE_OBJECT_TYPE = :P_IMAGE_OBJECT_TYPE AND IMAGE_VIEW_TYPE = :P_MARK_TYPE AND ORIENTATION_TYPE = :P_BODY_PART AND IMAGE_OBJECT_SEQ = :P_OBJECT_SEQ AND :LV_COLUMN_NAME IS NOT NULL
}

GET_COUNT_USER_TABLES_ONE{
SELECT COUNT (*) FROM user_tables WHERE table_name = 'FLOOR_PLAN'
}
GET_COUNT_USER_TABLES_TWO{
SELECT COUNT (*) FROM user_tables WHERE table_name = 'AGENCY_INTERNAL_LOC_HOTSPOT'
}

USER_DATA {
	SELECT USER FROM DUAL
}

UNLOCK_FORM_MODULE{
DELETE FROM LOCKED_MODULES WHERE MODULE_NAME = :P_MODULE_NAME AND CASELOAD_ID= :P_CASELOAD AND USER_ID = :P_USER
}

GET_MAX_OFFENDER_BOOK_ID{
SELECT MAX(OFFENDER_BOOK_ID) FROM OFFENDER_BOOKINGS WHERE OFFENDER_ID = :P_OFF_ID
}

GET_MAX_TXN_ENTRY_SEQ{
SELECT MAX(TXN_ENTRY_SEQ) + 1 AS TXN_ENTRY_SEQ FROM GL_TRANSACTIONS GT WHERE GT.TXN_ID = :P_TXN_ID
}

GET_HOLD_UNTIL_DATE{
SELECT  CURRENT_DATE + :P_HOLD_DAYS FROM DUAL D 
}

INSERT_INTO_OFFENDER_TRANSACTIONS{
INSERT INTO OFFENDER_TRANSACTIONS (TXN_ID , TXN_ENTRY_SEQ , CASELOAD_ID , OFFENDER_ID , OFFENDER_BOOK_ID , TXN_POSTING_TYPE , TXN_TYPE , TXN_ENTRY_DESC , TXN_ENTRY_AMOUNT , TXN_ENTRY_DATE , SUB_ACCOUNT_TYPE , MODIFY_DATE , SLIP_PRINTED_FLAG , TXN_ADJUSTED_FLAG , HOLD_CLEAR_FLAG , HOLD_NUMBER , HOLD_UNTIL_DATE , TXN_REFERENCE_NUMBER , ORG_TXN_TYPE, CREATE_USER_ID, CREATE_DATETIME, MODIFY_DATETIME, MODIFY_USER_ID) VALUES (:P_TXN_ID , :P_TXN_ENTRY_SEQ , :P_CSLD_ID , :P_OFF_ID , :P_OFF_BOOK_ID , :P_TXN_POSTING_TYPE , :P_TXN_TYPE , :P_TXN_DESC , :P_TOT_AMT , CURRENT_DATE , :P_SUB_ACCOUNT_TYPE , CURRENT_DATE , 'N' , :P_TXN_ADJUSTED_FLAG , :P_HOLD_CLEAR_FLAG , :P_HOLD_NUMBER , :P_HOLD_UNTIL_DATE , :P_TXN_REF_NUM , :P_ORG_TXN_TYPE, :CREATEUSERID, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, :CREATEUSERID)
}

UPDATE_OFFENDER_TRUST_ACCOUNTS_A{
update OFFENDER_TRUST_ACCOUNTS set MODIFY_USER_ID = :modifyUserId , MODIFY_DATETIME = CURRENT_TIMESTAMP, HOLD_BALANCE = coalesce (HOLD_BALANCE, 0) + :P_TOT_AMT where OFFENDER_ID = :P_OFF_ID and CASELOAD_ID = :P_CSLD_ID
}

UPDATE_OFFENDER_SUB_ACCOUNTS_B{
UPDATE OFFENDER_SUB_ACCOUNTS SET MODIFY_USER_ID = :MODIFYUSERID , MODIFY_DATETIME = CURRENT_TIMESTAMP, HOLD_BALANCE = COALESCE (HOLD_BALANCE, 0) + :P_TOT_AMT WHERE OFFENDER_ID = :P_OFF_ID AND CASELOAD_ID = :P_CSLD_ID AND TRUST_ACCOUNT_CODE IN ( SELECT ACCOUNT_CODE FROM ACCOUNT_CODES WHERE SUB_ACCOUNT_TYPE = :P_SUB_ACCOUNT_TYPE)
}

SCHEDULE_DAYS_CUR{
SELECT SCHEDULE_COMPLETE_DAYS FROM ASSESSMENTS WHERE SCHEDULE_COMPLETE_DAYS IS NOT NULL AND ASSESSMENT_CLASS = 'TYPE'
}

SELECT_OF_DUE_FOR_INITIAL{
 select
	OB.OFFENDER_BOOK_ID,
	OFF_NAME.OFFENDER_ID_DISPLAY,
	OB.BOOKING_NO,
	case
		when OFF_NAME.MIDDLE_NAME is not null then 
	(OFF_NAME.LAST_NAME || ', ' || OFF_NAME.FIRST_NAME || ' ' || OFF_NAME.MIDDLE_NAME)
		else 
	(OFF_NAME.LAST_NAME || ', ' || OFF_NAME.FIRST_NAME)
	end OFFENDER_NAME,
	LU.DESCRIPTION as location,
	OMS_INTAKE_GET_OFFENDER_SUPERVISION_U(OB.OFFENDER_BOOK_ID,
	:P_USER_NAME::text) CURRENT_LEVEL,
	ASS.DESCRIPTION ASSESSMENT_TYPE,
	ASS.ASSESSMENT_ID,
	(OFFEX.MOVEMENT_DATE + interval '1' day * ASS.SCHEDULE_COMPLETE_DAYS) SCHEDULE_DATE
from
	OFFENDER_BOOKINGS OB,
	ASSESSMENTS ASS,
	OFFENDER_EXTERNAL_MOVEMENTS OFFEX,
	living_units_new LU,
	OFFENDERS OFF_NAME,
	CASELOAD_AGENCY_LOCATIONS CAL
where
	(ASS.SCHEDULE_COMPLETE_DAYS is not null
		and ASS.SCHEDULE_COMPLETE_DAYS::text <> '')
	and ASS.ASSESSMENT_CLASS = 'TYPE'
	and ASS.caseload_type in ('INST' , 'BOTH')
	and ASS.ACTIVE_FLAG = 'Y'
	and OFFEX.MOVEMENT_DATE::date >= ASS.EFFECTIVE_DATE::date
	and OFFEX.OFFENDER_BOOK_ID = OB.OFFENDER_BOOK_ID
	and OB.ACTIVE_FLAG = 'Y'
	and OFFEX.MOVEMENT_TYPE = 'ADM'
	and OFFEX.MOVEMENT_SEQ = (
	select
		MAX(OEM1.MOVEMENT_SEQ)
	from
		OFFENDER_EXTERNAL_MOVEMENTS OEM1
	where
		OEM1.OFFENDER_BOOK_ID = OB.OFFENDER_BOOK_ID
		and OEM1.MOVEMENT_TYPE = 'ADM')
	and not exists (
	select
		'X'
	from
		OFFENDER_ASSESSMENTS OA
	where
		OA.OFFENDER_BOOK_ID = OB.OFFENDER_BOOK_ID
		and OA.ASSESSMENT_TYPE_ID = ASS.ASSESSMENT_ID)
	and (OFFEX.MOVEMENT_DATE::date + interval '1' day * coalesce(ASS.SCHEDULE_COMPLETE_DAYS::int,
	0)) between coalesce(:P_FROM_DATE,
	OFFEX.MOVEMENT_DATE::date + interval '1' day * coalesce(ASS.SCHEDULE_COMPLETE_DAYS::int,
	0)) and coalesce (:P_TO_DATE,
	OFFEX.MOVEMENT_DATE::date + interval '1' day * coalesce(ASS.SCHEDULE_COMPLETE_DAYS::int,
	0))
	and (ASS.ASSESSMENT_ID = :P_ASSESSMENT_ID
		or :P_ASSESSMENT_ID::text is null)
	and CAL.CASELOAD_ID = :P_CASELOAD
	and OB.AGY_LOC_ID = CAL.AGY_LOC_ID
	and (OB.AGY_LOC_ID = :P_AGY_LOC_ID
		or :P_AGY_LOC_ID::text is null)
	and OFF_NAME.OFFENDER_ID = OB.OFFENDER_ID
	and LU.LIVING_UNIT_ID = OB.LIVING_UNIT_ID
	and (LU.DESCRIPTION = :P_LOCATION
		or LU.DESCRIPTION like :P_LOCATION || '-%'
		or :P_LOCATION::text is null)
order by
	SCHEDULE_DATE
}


SELECT_OF_DUE_FOR_REVIEW{
  SELECT
    OFF_ASS.OFFENDER_BOOK_ID,
    OFF_NAME.OFFENDER_ID_DISPLAY,
    OFF_BKG.BOOKING_NO,
    CASE
        WHEN OFF_NAME.MIDDLE_NAME IS NOT NULL THEN 
            (OFF_NAME.LAST_NAME || ', ' || OFF_NAME.FIRST_NAME || ' ' || OFF_NAME.MIDDLE_NAME)
        ELSE 
            (OFF_NAME.LAST_NAME || ', ' || OFF_NAME.FIRST_NAME)
    END AS OFFENDER_NAME,
    LU.DESCRIPTION AS location,
    OMS_INTAKE_GET_OFFENDER_SUPERVISION_U(OFF_BKG.OFFENDER_BOOK_ID, :P_USER_NAME::TEXT) AS CURRENT_LEVEL,
    ASS.DESCRIPTION AS ASSESSMENT_TYPE,
    ASS.ASSESSMENT_ID,
    OFF_ASS.NEXT_REVIEW_DATE AS SCHEDULE_DATE
FROM
    OFFENDER_ASSESSMENTS OFF_ASS
JOIN ASSESSMENTS ASS ON OFF_ASS.ASSESSMENT_TYPE_ID = ASS.ASSESSMENT_ID
JOIN OFFENDER_BOOKINGS OFF_BKG ON OFF_ASS.OFFENDER_BOOK_ID = OFF_BKG.OFFENDER_BOOK_ID
JOIN LIVING_UNITS_NEW LU ON LU.LIVING_UNIT_ID = OFF_BKG.LIVING_UNIT_ID
JOIN OFFENDERS OFF_NAME ON OFF_NAME.OFFENDER_ID = OFF_BKG.OFFENDER_ID
JOIN CASELOAD_AGENCY_LOCATIONS CAL ON CAL.CASELOAD_ID = :P_CASELOAD
    AND OFF_BKG.AGY_LOC_ID = CAL.AGY_LOC_ID
    AND (OFF_BKG.AGY_LOC_ID = :P_AGY_LOC_ID OR :P_AGY_LOC_ID::text IS NULL)
WHERE
    OFF_BKG.ACTIVE_FLAG = 'Y'
    AND (LU.DESCRIPTION = :P_LOCATION
        OR LU.DESCRIPTION LIKE :P_LOCATION || '-%'
        OR :P_LOCATION::TEXT IS NULL)
    AND OFF_ASS.NEXT_REVIEW_DATE IS NOT NULL
    AND OFF_ASS.NEXT_REVIEW_DATE::DATE BETWEEN COALESCE(:P_FROM_DATE, OFF_ASS.NEXT_REVIEW_DATE::DATE)
        AND COALESCE(:P_TO_DATE, OFF_ASS.NEXT_REVIEW_DATE::DATE)
    AND NOT EXISTS (
        SELECT 'X'
        FROM OFFENDER_ASSESSMENTS OSS
        WHERE OSS.OFFENDER_BOOK_ID = OFF_ASS.OFFENDER_BOOK_ID
            AND OSS.ASSESSMENT_TYPE_ID = OFF_ASS.ASSESSMENT_TYPE_ID
            AND OSS.ASSESSMENT_SEQ > OFF_ASS.ASSESSMENT_SEQ
    )
    AND (ASS.ASSESSMENT_CODE <> 'INT_CLS'
        OR (ASS.ASSESSMENT_CODE = 'INT_CLS'
            AND NOT EXISTS (
                SELECT 'X'
                FROM OFFENDER_ASSESSMENTS OFA
                JOIN ASSESSMENTS ASS1 ON OFA.ASSESSMENT_TYPE_ID = ASS1.ASSESSMENT_ID
                WHERE OFA.OFFENDER_BOOK_ID = OFF_ASS.OFFENDER_BOOK_ID
                    AND ASS1.ASSESSMENT_CODE = 'RE_CLS'
            )
        )
    )
    AND (OFF_BKG.AGY_LOC_ID = :P_AGY_LOC_ID OR :P_AGY_LOC_ID::TEXT IS NULL)
    AND (ASS.ASSESSMENT_ID = :P_ASSESSMENT_ID OR :P_ASSESSMENT_ID::TEXT IS NULL)
    AND ASS.ASSESSMENT_CLASS = 'TYPE'
    and ASS.caseload_type in ('INST' , 'BOTH')
    AND ASS.ACTIVE_FLAG = 'Y'
ORDER BY
    SCHEDULE_DATE
}

SELECT_OF_OVERDUE{
select
	OFFENDER_BOOK_ID,
	OFFENDER_ID_DISPLAY,
	BOOKING_NO,
	OFFENDER_NAME,
	location,
	CURRENT_LEVEL,
	ASSESSMENT_TYPE,
	ASSESSMENT_ID,
	SCHEDULE_DATE
from
	(
	select
		OFF_ASS.OFFENDER_BOOK_ID,
		OFF_NAME.OFFENDER_ID_DISPLAY,
		OFF_BKG.BOOKING_NO,
		case when OFF_NAME.MIDDLE_NAME is not null then 
		(OFF_NAME.LAST_NAME || ', ' || OFF_NAME.FIRST_NAME || ' ' || OFF_NAME.MIDDLE_NAME) else 
		(OFF_NAME.LAST_NAME || ', ' || OFF_NAME.FIRST_NAME) end OFFENDER_NAME,
		LU.DESCRIPTION as location,
	OMS_INTAKE_GET_OFFENDER_SUPERVISION_U(OFF_BKG.OFFENDER_BOOK_ID,:P_USER_NAME::text) CURRENT_LEVEL,
		ASS.DESCRIPTION ASSESSMENT_TYPE,
		ASS.ASSESSMENT_ID,
		OFF_ASS.NEXT_REVIEW_DATE SCHEDULE_DATE
	from
		OFFENDER_ASSESSMENTS OFF_ASS,
		ASSESSMENTS ASS,
		OFFENDER_BOOKINGS OFF_BKG,
		(select * FROM agency_internal_locations ail
  WHERE ail.unit_type IS NOT NULL AND ail.unit_type::text <> ''::text) LU,
		OFFENDERS OFF_NAME,
		CASELOAD_AGENCY_LOCATIONS CAL
	where
		OFF_ASS.OFFENDER_BOOK_ID = OFF_BKG.OFFENDER_BOOK_ID
		and OFF_BKG.ACTIVE_FLAG = 'Y'
		and OFF_BKG.AGY_LOC_ID = CAL.AGY_LOC_ID
		and CAL.CASELOAD_ID = :P_CASELOAD
		and LU.internal_location_id = OFF_BKG.LIVING_UNIT_ID
		and (LU.DESCRIPTION = :P_LOCATION
			or LU.DESCRIPTION like :P_LOCATION || '-%'
			or :P_LOCATION::text is null)
		and OFF_NAME.OFFENDER_ID = OFF_BKG.OFFENDER_ID
		and OFF_ASS.NEXT_REVIEW_DATE::DATE < CURRENT_DATE
		and OFF_ASS.ASSESSMENT_TYPE_ID = ASS.ASSESSMENT_ID
		and OFF_ASS.ASSESSMENT_SEQ = (
		select
			MAX(OSS.ASSESSMENT_SEQ)
		from
			OFFENDER_ASSESSMENTS OSS
		where
			OSS.OFFENDER_BOOK_ID = OFF_ASS.OFFENDER_BOOK_ID
			and OSS.ASSESSMENT_TYPE_ID = OFF_ASS.ASSESSMENT_TYPE_ID )
		and (ASS.ASSESSMENT_CODE <> 'INT_CLS'
			or (ASS.ASSESSMENT_CODE = 'INT_CLS'
				and not exists (
				select
					'X'
				from
					OFFENDER_ASSESSMENTS OFA,
					ASSESSMENTS ASS1
				where
					OFA.OFFENDER_BOOK_ID = OFF_ASS.OFFENDER_BOOK_ID
					and OFA.ASSESSMENT_TYPE_ID = ASS1.ASSESSMENT_ID
					and ASS1.ASSESSMENT_CODE = 'RE_CLS') ) )
		and (OFF_BKG.AGY_LOC_ID = :P_AGY_LOC_ID
			or :P_AGY_LOC_ID::text is null)
		and (ASS.ASSESSMENT_ID = :P_ASSESSMENT_ID
			or :P_ASSESSMENT_ID::bigint is null)
		and ASS.ASSESSMENT_CLASS = 'TYPE'
		and ASS.ACTIVE_FLAG = 'Y' 	
		AND	ASS.caseload_type in ('INST' , 'BOTH')
union all
	select
		OB.OFFENDER_BOOK_ID,
		OFF_NAME.OFFENDER_ID_DISPLAY,
		OB.BOOKING_NO,
		case when OFF_NAME.MIDDLE_NAME is not null then 
		(OFF_NAME.LAST_NAME || ', ' || OFF_NAME.FIRST_NAME || ' ' || OFF_NAME.MIDDLE_NAME) else 
		(OFF_NAME.LAST_NAME || ', ' || OFF_NAME.FIRST_NAME) end OFFENDER_NAME,
		LU.DESCRIPTION as location,
		OMS_INTAKE_GET_OFFENDER_SUPERVISION_U(OB.OFFENDER_BOOK_ID,:P_USER_NAME::text) CURRENT_LEVEL,
		ASS.DESCRIPTION ASSESSMENT_TYPE,
		ASS.ASSESSMENT_ID,
		(OFFEX.MOVEMENT_DATE + interval '1' day * ASS.SCHEDULE_COMPLETE_DAYS) SCHEDULE_DATE
	from
		OFFENDER_BOOKINGS OB,
		ASSESSMENTS ASS,
		OFFENDER_EXTERNAL_MOVEMENTS OFFEX,
		(select * FROM agency_internal_locations ail
  WHERE ail.unit_type IS NOT NULL AND ail.unit_type::text <> ''::text) LU,
		OFFENDERS OFF_NAME,
		CASELOAD_AGENCY_LOCATIONS CAL
	where
		(ASS.SCHEDULE_COMPLETE_DAYS is not null
			and ASS.SCHEDULE_COMPLETE_DAYS::text <> '')
		and ASS.ASSESSMENT_CLASS = 'TYPE' AND 		
		ASS.caseload_type in ('INST' , 'BOTH')
		and ASS.ACTIVE_FLAG = 'Y'
		and OFFEX.MOVEMENT_DATE::date >= ASS.EFFECTIVE_DATE::date
		and OFFEX.OFFENDER_BOOK_ID = OB.OFFENDER_BOOK_ID
		and OB.ACTIVE_FLAG = 'Y'
		and OFFEX.MOVEMENT_TYPE = 'ADM'
		and OFFEX.MOVEMENT_SEQ = (
		select
			MAX(OEM1.MOVEMENT_SEQ)
		from
			OFFENDER_EXTERNAL_MOVEMENTS OEM1
		where
			OEM1.OFFENDER_BOOK_ID = OB.OFFENDER_BOOK_ID
			and OEM1.MOVEMENT_TYPE = 'ADM')
		and not exists (
		select
			'X'
		from
			OFFENDER_ASSESSMENTS OA
		where
			OA.OFFENDER_BOOK_ID = OB.OFFENDER_BOOK_ID
			and OA.ASSESSMENT_TYPE_ID = ASS.ASSESSMENT_ID)
		and (OFFEX.MOVEMENT_DATE::date + interval '1' day *  coalesce(ASS.SCHEDULE_COMPLETE_DAYS::int,0)) < CURRENT_DATE
		and (ASS.ASSESSMENT_ID = :P_ASSESSMENT_ID
			or :P_ASSESSMENT_ID::bigint is null)
		and CAL.CASELOAD_ID = :P_CASELOAD
		and OB.AGY_LOC_ID = CAL.AGY_LOC_ID
		and (OB.AGY_LOC_ID = :P_AGY_LOC_ID
			or :P_AGY_LOC_ID::text is null)
		and OFF_NAME.OFFENDER_ID = OB.OFFENDER_ID
		and LU.internal_location_id = OB.LIVING_UNIT_ID
		and (LU.DESCRIPTION = :P_LOCATION
			or LU.DESCRIPTION like :P_LOCATION || '-%'
			or :P_LOCATION::text is null) ) as A
order by
	SCHEDULE_DATE
}

GET_CURRENT_CUR{
 SELECT working_caseload_id FROM staff_members WHERE user_id = upper(:userName)
}

COMM_UPDATE_STAFF_MEMBERS{
UPDATE staff_members SET working_caseload_id =:P_CASELOAD_ID,MODIFY_USER_ID = :MODIFY_USER_ID , MODIFY_DATETIME = CURRENT_TIMESTAMP WHERE user_id =upper(:MODIFY_USER_ID)
}



L_CASELOADS_CUR{
SELECT CASELOAD_ID FROM CASELOADS WHERE CASELOAD_TYPE = (SELECT CASELOAD_TYPE FROM CASELOADS WHERE CASELOAD_ID = :P_CASELOAD_ID) AND TRUST_ACCOUNTS_FLAG = 'Y'
}

L_CURRENT_PERIOD_CUR_NEW{
SELECT ACCOUNT_PERIOD_ID FROM ACCOUNT_PERIODS WHERE :P_DATE  BETWEEN START_DATE AND END_DATE
}

L_LAST_CLOSED_CUR_NEW{
SELECT MAX (ACCOUNT_PERIOD_ID) FROM CASELOAD_ACCOUNT_PERIODS WHERE CASELOAD_ID = :P_CASELOAD_ID AND ACCOUNT_PERIOD_STATUS = 'C'
}

L_CSLD_CURR_ACCT_BASE_CUR_NEW{
select distinct C.CASELOAD_ID CASELOAD_ID, coalesce (:P_ACCOUNT_CODE, AC.ACCOUNT_CODE) ACCOUNT_CODE from CASELOADS C, ACCOUNT_CODES AC, ACCOUNT_PERIODS AP where C.CASELOAD_ID = :P_CASELOAD_ID and AC.CASELOAD_TYPE = C.CASELOAD_TYPE and ( AC.ACCOUNT_CODE = :P_ACCOUNT_CODE or coalesce(:P_ACCOUNT_CODE::text,'')='' ) and AP.ACCOUNT_PERIOD_TYPE = 'MTH' and ( AP.ACCOUNT_PERIOD_ID > :P_ACCOUNT_PERIOD_ID or  coalesce(:P_ACCOUNT_PERIOD_ID::bigint,0)=0) and not exists ( select 1 from CASELOAD_CURRENT_ACCOUNTS_BASE CCABX where CCABX.CASELOAD_ID = C.CASELOAD_ID and CCABX.ACCOUNT_CODE = coalesce (:P_ACCOUNT_CODE, AC.ACCOUNT_CODE))
}

COMMON_L_CSLD_CURR_ACCT_TXNS_CUR{
select NEXTVAL('CASELOAD_CURRENT_ACCOUNT_ID') CASELOAD_CURRENT_ACCOUNT_ID, C.CASELOAD_ID CASELOAD_ID, coalesce (:P_ACCOUNT_CODE, AC.ACCOUNT_CODE) ACCOUNT_CODE, AP.ACCOUNT_PERIOD_ID ACCOUNT_PERIOD_ID, 0 CURRENT_BALANCE, :userName MODIFY_USER_ID, current_date MODIFY_DATE from CASELOADS C, ACCOUNT_CODES AC, ACCOUNT_PERIODS AP where C.CASELOAD_ID = :P_CASELOAD_ID and AC.CASELOAD_TYPE = C.CASELOAD_TYPE and ( AC.ACCOUNT_CODE = :P_ACCOUNT_CODE or coalesce(:P_ACCOUNT_CODE::text, '')= '') and AP.ACCOUNT_PERIOD_TYPE = 'MTH' and ( AP.ACCOUNT_PERIOD_ID > :P_LAST_PERIOD_ID or coalesce(:P_CURRENT_PERIOD_ID::bigint, 0)= 0) and AP.ACCOUNT_PERIOD_ID <= :P_CURRENT_PERIOD_ID and not exists ( select 1 from CASELOAD_CURRENT_ACCOUNTS_TXNS CCATX where CCATX.CASELOAD_ID = C.CASELOAD_ID and CCATX.ACCOUNT_PERIOD_ID = AP.ACCOUNT_PERIOD_ID and CCATX.ACCOUNT_CODE = AC.ACCOUNT_CODE)
}

COMMON_L_CSLD_ACCT_PERIODS_CUR{
select distinct c.caseload_id caseload_id, ap.account_period_id account_period_id, 'O' account_period_status, :userName closing_user_id, current_date closing_date from caseloads c, account_codes ac, account_periods ap where c.caseload_id = :p_caseload_id and ac.caseload_type = c.caseload_type and ap.account_period_type = 'MTH' and ( ap.account_period_id > :p_account_period_id or coalesce(:p_account_period_id::bigint,0)=0) and not exists ( select 1 from caseload_account_periods cap where cap.caseload_id = c.caseload_id and cap.account_period_id = ap.account_period_id)
}

COMMON_L_CSLD_ACCT_SUMM_CUR{
select distinct C.CASELOAD_ID CASELOAD_ID, AC.ACCOUNT_CODE ACCOUNT_CODE, AP.ACCOUNT_PERIOD_ID ACCOUNT_PERIOD_ID, 0 OPEN_BALANCE, 0 CLOSE_BALANCE, 0 PERIOD_TXN_AMOUNT, :userName MODIFY_USER_ID, current_date MODIFY_DATE from CASELOADS C, ACCOUNT_CODES AC, ACCOUNT_PERIODS AP where C.CASELOAD_ID = :P_CASELOAD_ID and AC.CASELOAD_TYPE = C.CASELOAD_TYPE and ( AC.ACCOUNT_CODE = :P_ACCOUNT_CODE or coalesce (:P_ACCOUNT_CODE::bigint,0)=0) and AP.ACCOUNT_PERIOD_TYPE = 'MTH' and ( AP.ACCOUNT_PERIOD_ID > :P_ACCOUNT_PERIOD_ID or coalesce(:P_ACCOUNT_PERIOD_ID::bigint, 0)= 0) and AC.ALL_CASELOAD_FLAG = 'Y' and AC.POSTING_STATUS_FLAG = 'Y' and not exists ( select 1 from CASELOAD_ACCOUNT_SUMMARIES CASX where CASX.CASELOAD_ID = C.CASELOAD_ID and CASX.ACCOUNT_PERIOD_ID = AP.ACCOUNT_PERIOD_ID and CASX.ACCOUNT_CODE = AC.ACCOUNT_CODE)
}

INSERT_INTO_CASELOAD_CURRENT_ACCOUNTS_BASE{
INSERT INTO CASELOAD_CURRENT_ACCOUNTS_BASE ( CASELOAD_ID, ACCOUNT_CODE, ACCOUNT_PERIOD_ID, CURRENT_BALANCE, MODIFY_DATE , CREATE_USER_ID, CREATE_DATETIME, MODIFY_DATETIME) VALUES ( :CASELOAD_ID, :ACCOUNT_CODE, :L_CURRENT_PERIOD_ID, 0, :C_SYSDATE, :CREATEUSERID, CURRENT_TIMESTAMP , CURRENT_TIMESTAMP)
}

INSERT_INTO_CASELOAD_CURRENT_ACCOUNTS_TXNS{
INSERT INTO CASELOAD_CURRENT_ACCOUNTS_TXNS ( CASELOAD_CURRENT_ACCOUNT_ID, CASELOAD_ID, ACCOUNT_CODE, ACCOUNT_PERIOD_ID, CURRENT_BALANCE, MODIFY_DATE, CREATE_USER_ID, CREATE_DATETIME, MODIFY_DATETIME ) VALUES ( :CASELOAD_CURRENT_ACCOUNT_ID, :CASELOAD_ID, :ACCOUNT_CODE, :ACCOUNT_PERIOD_ID, :CURRENT_BALANCE, :MODIFY_DATE, :CREATEUSERID, CURRENT_TIMESTAMP , CURRENT_TIMESTAMP )
}

INSERT_INTO_CASELOAD_ACCOUNT_PERIODS{
INSERT INTO CASELOAD_ACCOUNT_PERIODS ( CASELOAD_ID, ACCOUNT_PERIOD_ID, ACCOUNT_PERIOD_STATUS, CLOSING_USER_ID, CLOSING_DATE, CREATE_USER_ID, CREATE_DATETIME, MODIFY_DATETIME ) VALUES ( :CASELOAD_ID, :ACCOUNT_PERIOD_ID, :ACCOUNT_PERIOD_STATUS, :CLOSING_USER_ID, :CLOSING_DATE, :CREATEUSERID, CURRENT_TIMESTAMP , CURRENT_TIMESTAMP )
}

INSERT_INTO_CASELOAD_ACCOUNT_SUMMARIES{
INSERT INTO CASELOAD_ACCOUNT_SUMMARIES ( CASELOAD_ID, ACCOUNT_CODE, ACCOUNT_PERIOD_ID, OPEN_BALANCE, CLOSE_BALANCE, PERIOD_TXN_AMOUNT, MODIFY_DATE, CREATE_USER_ID, CREATE_DATETIME, MODIFY_DATETIME ) VALUES ( :CASELOAD_ID, :ACCOUNT_CODE, :ACCOUNT_PERIOD_ID, :OPEN_BALANCE, :CLOSE_BALANCE, :PERIOD_TXN_AMOUNT, :MODIFY_DATE, :CREATEUSERID, CURRENT_TIMESTAMP , CURRENT_TIMESTAMP )
}

BILL_STATEMENT_EXISTS{
SELECT statement_generated_flag FROM off_fee_bills WHERE bill_id=:p_bill_id;
}

SELECT_GET_BED_ASS_SEQ_CUR{
SELECT COALESCE (MAX (BED_ASSIGN_SEQ), 0) + 1 FROM BED_ASSIGNMENT_HISTORIES WHERE OFFENDER_BOOK_ID = :LV_OFFENDER_BOOK_ID
}

COMMON_INSERT_BED_ASSIGNMENT_HISTORIES{
INSERT INTO BED_ASSIGNMENT_HISTORIES (OFFENDER_BOOK_ID, BED_ASSIGN_SEQ, LIVING_UNIT_ID,ASSIGNMENT_DATE, ASSIGNMENT_TIME,CREATE_USER_ID,CREATE_DATETIME)
VALUES (:offenderBookId, :bedAssignSeq,:livingUnitId,:assignmentDate,:assignmentTime,:createUserId,current_timestamp)
}

SELECT_OF_DUE_FOR_INITIAL_COMM{
select OB.OFFENDER_BOOK_ID, OFF_NAME.OFFENDER_ID_DISPLAY, OB.BOOKING_NO, case when OFF_NAME.MIDDLE_NAME is not null then (OFF_NAME.LAST_NAME || ', ' || OFF_NAME.FIRST_NAME || ' ' || OFF_NAME.MIDDLE_NAME) else (OFF_NAME.LAST_NAME || ', ' || OFF_NAME.FIRST_NAME) end OFFENDER_NAME, OMS_INTAKE_GET_OFFENDER_SUPERVISION_U(OB.OFFENDER_BOOK_ID,:P_USER_NAME::text) CURRENT_LEVEL, ASS.DESCRIPTION ASSESSMENT_TYPE, ASS.ASSESSMENT_ID, (OB.booking_begin_date + interval '1' day * ASS.SCHEDULE_COMPLETE_DAYS) SCHEDULE_DATE, tag_header_get_officer_u(OB.OFFENDER_BOOK_ID,:P_USER_NAME::text) as primary_officer, (select description from agency_locations al where agy_loc_id = obal.agy_loc_id) as location from OFFENDER_BOOKINGS OB, ASSESSMENTS ASS, OFFENDERS OFF_NAME, CASELOAD_AGENCY_LOCATIONS CAL, offender_booking_agy_locs obal where (ASS.SCHEDULE_COMPLETE_DAYS is not null and ASS.SCHEDULE_COMPLETE_DAYS::text <> '') and ASS.caseload_type in ('COMM' , 'BOTH') and ASS.ASSESSMENT_CLASS = 'TYPE' and ASS.ACTIVE_FLAG = 'Y' and OB.community_active_flag = 'Y' and OB.booking_type = 'COMM' and OB.booking_status = 'O' and OB.booking_begin_date >= ASS.EFFECTIVE_DATE and obal.offender_book_id = ob.offender_book_id and obal.removed_date is null and not exists ( select 'X' from OFFENDER_ASSESSMENTS OA where OA.OFFENDER_BOOK_ID = OB.OFFENDER_BOOK_ID and OA.ASSESSMENT_TYPE_ID = ASS.ASSESSMENT_ID) and (OB.booking_begin_date + interval '1' day * ASS.SCHEDULE_COMPLETE_DAYS) between coalesce(:P_FROM_DATE, OB.booking_begin_date + interval '1' day * ASS.SCHEDULE_COMPLETE_DAYS) and coalesce (:P_TO_DATE, OB.booking_begin_date + interval '1' day * ASS.SCHEDULE_COMPLETE_DAYS) and (ASS.ASSESSMENT_ID = :P_ASSESSMENT_ID or :P_ASSESSMENT_ID::text is null) and CAL.CASELOAD_ID = :P_CASELOAD and obal.agy_loc_id = CAL.AGY_LOC_ID and (obal.agy_loc_id = :P_AGY_LOC_ID or :P_AGY_LOC_ID::text is null) and OFF_NAME.OFFENDER_ID = OB.OFFENDER_ID  order by SCHEDULE_DATE;
}

SELECT_OF_DUE_FOR_REVIEW_COMM{
select distinct OFF_ASS.OFFENDER_BOOK_ID, OFF_NAME.OFFENDER_ID_DISPLAY, OFF_BKG.BOOKING_NO, case when OFF_NAME.MIDDLE_NAME is not null then (OFF_NAME.LAST_NAME || ', ' || OFF_NAME.FIRST_NAME || ' ' || OFF_NAME.MIDDLE_NAME) else (OFF_NAME.LAST_NAME || ', ' || OFF_NAME.FIRST_NAME) end OFFENDER_NAME, OMS_INTAKE_GET_OFFENDER_SUPERVISION_U(OFF_BKG.OFFENDER_BOOK_ID, :P_USER_NAME::text) CURRENT_LEVEL, ASS.DESCRIPTION ASSESSMENT_TYPE, ASS.ASSESSMENT_ID, OFF_ASS.NEXT_REVIEW_DATE SCHEDULE_DATE, tag_header_get_officer_u(OFF_BKG.OFFENDER_BOOK_ID, :P_USER_NAME::text) as PRIMARY_OFFICER, ( select description from agency_locations al where agy_loc_id = obal.agy_loc_id) as location from OFFENDER_ASSESSMENTS OFF_ASS, ASSESSMENTS ASS, OFFENDER_BOOKINGS OFF_BKG, OFFENDERS OFF_NAME, CASELOAD_AGENCY_LOCATIONS CAL, offender_booking_agy_locs obal where ASS.caseload_type in ('COMM' , 'BOTH') and OFF_BKG.community_active_flag = 'Y' and OFF_BKG.booking_status = 'O' and OFF_ASS.OFFENDER_BOOK_ID = OFF_BKG.OFFENDER_BOOK_ID and obal.offender_book_id = OFF_BKG.offender_book_id and obal.removed_date is null and CAL.CASELOAD_ID = :P_CASELOAD and obal.AGY_LOC_ID = ( case when (select count(1) from case_plans cp where offender_book_id = OFF_BKG.offender_book_id and case_plan_status = 'ACTIVE') > 0 then (select case when cal_agy_loc_id is null then OFF_BKG.intake_agy_loc_id else cal_agy_loc_id end from case_plans cp where offender_book_id = OFF_BKG.offender_book_id and case_plan_status = 'ACTIVE') else OFF_BKG.intake_agy_loc_id end ) and obal.AGY_LOC_ID = CAL.AGY_LOC_ID and OFF_NAME.OFFENDER_ID = OFF_BKG.OFFENDER_ID and OFF_ASS.NEXT_REVIEW_DATE is not null and OFF_ASS.NEXT_REVIEW_DATE > current_date and OFF_ASS.NEXT_REVIEW_DATE between coalesce (:P_FROM_DATE, OFF_ASS.NEXT_REVIEW_DATE) and coalesce (:P_TO_DATE, OFF_ASS.NEXT_REVIEW_DATE) and OFF_ASS.ASSESSMENT_TYPE_ID = ASS.ASSESSMENT_ID and OFF_ASS.ASSESSMENT_SEQ = ( select MAX(OSS.ASSESSMENT_SEQ) from OFFENDER_ASSESSMENTS OSS where OSS.OFFENDER_BOOK_ID = OFF_ASS.OFFENDER_BOOK_ID and OSS.ASSESSMENT_TYPE_ID = OFF_ASS.ASSESSMENT_TYPE_ID ) and (ASS.ASSESSMENT_CODE <> 'INT_CLS' or (ASS.ASSESSMENT_CODE = 'INT_CLS' and not exists ( select 'X' from OFFENDER_ASSESSMENTS OFA, ASSESSMENTS ASS1 where OFA.OFFENDER_BOOK_ID = OFF_ASS.OFFENDER_BOOK_ID and OFA.ASSESSMENT_TYPE_ID = ASS1.ASSESSMENT_ID and ASS1.ASSESSMENT_CODE = 'RE_CLS') ) ) and (obal.AGY_LOC_ID = :P_AGY_LOC_ID or :P_AGY_LOC_ID::text is null) and (ASS.ASSESSMENT_ID = :P_ASSESSMENT_ID or :P_ASSESSMENT_ID::text is null) and ASS.ASSESSMENT_CLASS = 'TYPE' and ASS.ACTIVE_FLAG = 'Y' order by SCHEDULE_DATE
}

		
SELECT_OF_OVERDUE_COMM{
select OFFENDER_BOOK_ID, OFFENDER_ID_DISPLAY, BOOKING_NO, OFFENDER_NAME, location, CURRENT_LEVEL, ASSESSMENT_TYPE, ASSESSMENT_ID, SCHEDULE_DATE,PRIMARY_OFFICER from ( select OFF_ASS.OFFENDER_BOOK_ID, OFF_NAME.OFFENDER_ID_DISPLAY, OFF_BKG.BOOKING_NO, case when OFF_NAME.MIDDLE_NAME is not null then (OFF_NAME.LAST_NAME || ', ' || OFF_NAME.FIRST_NAME || ' ' || OFF_NAME.MIDDLE_NAME) else (OFF_NAME.LAST_NAME || ', ' || OFF_NAME.FIRST_NAME) end OFFENDER_NAME, OMS_INTAKE_GET_OFFENDER_SUPERVISION_U(OFF_BKG.OFFENDER_BOOK_ID, :P_USER_NAME::text) CURRENT_LEVEL, ASS.DESCRIPTION ASSESSMENT_TYPE, ASS.ASSESSMENT_ID, OFF_ASS.NEXT_REVIEW_DATE SCHEDULE_DATE, tag_header_get_officer_u(OFF_BKG.OFFENDER_BOOK_ID, :P_USER_NAME::text) as PRIMARY_OFFICER, ( select description from agency_locations al where agy_loc_id = obal.agy_loc_id) as location from OFFENDER_ASSESSMENTS OFF_ASS, ASSESSMENTS ASS, OFFENDER_BOOKINGS OFF_BKG, OFFENDERS OFF_NAME, CASELOAD_AGENCY_LOCATIONS CAL, offender_booking_agy_locs obal where ASS.caseload_type in ('COMM' , 'BOTH') and OFF_BKG.community_active_flag = 'Y' and OFF_BKG.booking_type = 'COMM' and OFF_BKG.booking_status = 'O' and OFF_ASS.OFFENDER_BOOK_ID = OFF_BKG.OFFENDER_BOOK_ID and obal.offender_book_id = OFF_BKG.offender_book_id and obal.removed_date is null and CAL.CASELOAD_ID = :P_CASELOAD and obal.AGY_LOC_ID = CAL.AGY_LOC_ID and OFF_NAME.OFFENDER_ID = OFF_BKG.OFFENDER_ID and OFF_ASS.NEXT_REVIEW_DATE < CURRENT_DATE and OFF_ASS.ASSESSMENT_TYPE_ID = ASS.ASSESSMENT_ID and OFF_ASS.ASSESSMENT_SEQ = ( select MAX(OSS.ASSESSMENT_SEQ) from OFFENDER_ASSESSMENTS OSS where OSS.OFFENDER_BOOK_ID = OFF_ASS.OFFENDER_BOOK_ID and OSS.ASSESSMENT_TYPE_ID = OFF_ASS.ASSESSMENT_TYPE_ID ) and (ASS.ASSESSMENT_CODE <> 'INT_CLS' or (ASS.ASSESSMENT_CODE = 'INT_CLS' and not exists ( select 'X' from OFFENDER_ASSESSMENTS OFA, ASSESSMENTS ASS1 where OFA.OFFENDER_BOOK_ID = OFF_ASS.OFFENDER_BOOK_ID and OFA.ASSESSMENT_TYPE_ID = ASS1.ASSESSMENT_ID and ASS1.ASSESSMENT_CODE = 'RE_CLS') ) ) and (obal.AGY_LOC_ID = :P_AGY_LOC_ID or :P_AGY_LOC_ID::text is null) and (ASS.ASSESSMENT_ID = :P_ASSESSMENT_ID or :P_ASSESSMENT_ID::bigint is null) and ASS.ASSESSMENT_CLASS = 'TYPE' and ASS.ACTIVE_FLAG = 'Y' union all select OB.OFFENDER_BOOK_ID, OFF_NAME.OFFENDER_ID_DISPLAY, OB.BOOKING_NO, case when OFF_NAME.MIDDLE_NAME is not null then (OFF_NAME.LAST_NAME || ', ' || OFF_NAME.FIRST_NAME || ' ' || OFF_NAME.MIDDLE_NAME) else (OFF_NAME.LAST_NAME || ', ' || OFF_NAME.FIRST_NAME) end OFFENDER_NAME, OMS_INTAKE_GET_OFFENDER_SUPERVISION_U(OB.OFFENDER_BOOK_ID, :P_USER_NAME::text) CURRENT_LEVEL, ASS.DESCRIPTION ASSESSMENT_TYPE, ASS.ASSESSMENT_ID, (OB.booking_begin_date + interval '1' day * ASS.SCHEDULE_COMPLETE_DAYS) SCHEDULE_DATE, tag_header_get_officer_u(OB.OFFENDER_BOOK_ID, :P_USER_NAME::text) as PRIMARY_OFFICER, ( select description from agency_locations al where agy_loc_id = obal.agy_loc_id) as location from OFFENDER_BOOKINGS OB, ASSESSMENTS ASS, OFFENDERS OFF_NAME, CASELOAD_AGENCY_LOCATIONS CAL, offender_booking_agy_locs obal where (ASS.SCHEDULE_COMPLETE_DAYS is not null and ASS.SCHEDULE_COMPLETE_DAYS::text <> '') and ASS.caseload_type in ('COMM' , 'BOTH') and ASS.ASSESSMENT_CLASS = 'TYPE' and ASS.ACTIVE_FLAG = 'Y' and OB.community_active_flag = 'Y' and OB.booking_type = 'COMM' and OB.booking_status = 'O' and OB.booking_begin_date >= ASS.EFFECTIVE_DATE and obal.OFFENDER_BOOK_ID = OB.OFFENDER_BOOK_ID and obal.removed_date is null and not exists ( select 'X' from OFFENDER_ASSESSMENTS OA where OA.OFFENDER_BOOK_ID = OB.OFFENDER_BOOK_ID and OA.ASSESSMENT_TYPE_ID = ASS.ASSESSMENT_ID) and (OB.booking_begin_date + interval '1' day * ASS.SCHEDULE_COMPLETE_DAYS) < CURRENT_DATE and (ASS.ASSESSMENT_ID = :P_ASSESSMENT_ID or :P_ASSESSMENT_ID::bigint is null) and CAL.CASELOAD_ID = :P_CASELOAD and obal.AGY_LOC_ID = CAL.AGY_LOC_ID and (obal.AGY_LOC_ID = :P_AGY_LOC_ID or :P_AGY_LOC_ID::text is null) and OFF_NAME.OFFENDER_ID = OB.OFFENDER_ID )  as A where A.SCHEDULE_DATE between coalesce (:P_FROM_DATE,
	A.SCHEDULE_DATE) and coalesce (:P_TO_DATE,
	A.SCHEDULE_DATE) order by SCHEDULE_DATE
}
COMMON_CHECK_CALL_FORM_MODULE_ACCESS {
select 'Y' from MODULE_PRIVILEGES where role_id in ( select role_id from staff_member_roles smr where staff_id in ( select staff_id from staff_members sm where user_id =:userId)) and module_name in (select module_name from module_call_form_relation  mpur where mpur.call_form = :popUp) and access_privilege in (:accessPrivileges) limit 1
}
COMMON_CHECK_OFFENDER_SPECFIC_MODULE_ACCESS {
select 'Y' from MODULE_PRIVILEGES where role_id in ( select role_id from staff_member_roles smr where staff_id in ( select staff_id from staff_members sm where user_id =:userId)) and module_name in (select module_name from offender_api_specific_modules osm) and access_privilege in (:accessPrivileges) limit 1
}

