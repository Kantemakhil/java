CREATE OR REPLACE FUNCTION oms_owner.omuavbed_check_security(p_off_book_id bigint, p_living_unit_id bigint)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
DECLARE

      LV_SUP_LEVEL      OFFENDER_ASSESSMENTS.REVIEW_SUP_LEVEL_TYPE%TYPE;
      LV_ASSESSMENT_SEQ OFFENDER_ASSESSMENTS.ASSESSMENT_SEQ%TYPE;
      CHECK_LIV_UNIT_SECURITY_CUR CURSOR FOR
         SELECT COUNT(*)
           FROM LIVING_UNIT_PROFILES
          WHERE LIVING_UNIT_ID = P_LIVING_UNIT_ID
            AND INT_LOC_PROFILE_TYPE = 'SUP_LVL_TYPE'
            AND INT_LOC_PROFILE_CODE = LV_SUP_LEVEL;
      GET_REV_SUP_LEVEL_CUR CURSOR FOR
         SELECT MAX(OFF_ASSMNT.ASSESSMENT_SEQ)
           FROM OFFENDER_ASSESSMENTS OFF_ASSMNT, ASSESSMENTS ASSMNT
          WHERE OFF_ASSMNT.OFFENDER_BOOK_ID = P_OFF_BOOK_ID
            AND OFF_ASSMNT.ASSESS_STATUS = 'A'
            AND OFF_ASSMNT.EVALUATION_RESULT_CODE = 'APP'
            AND OFF_ASSMNT.ASSESSMENT_TYPE_ID = ASSMNT.ASSESSMENT_ID
            AND ASSMNT.determine_sup_level_flag = 'Y'
            AND ASSMNT.CASELOAD_TYPE in ('INST','BOTH');
      LV_PASS_SECURITY bigint;
      GET_SUP_LEVEL_CUR CURSOR(CP_ASS_SEQ bigint) FOR
         SELECT OFF_ASS.REVIEW_SUP_LEVEL_TYPE
           FROM OFFENDER_ASSESSMENTS OFF_ASS
          WHERE OFF_ASS.OFFENDER_BOOK_ID = P_OFF_BOOK_ID
            AND OFF_ASS.ASSESSMENT_SEQ = CP_ASS_SEQ;

BEGIN
      OPEN GET_REV_SUP_LEVEL_CUR;
      FETCH GET_REV_SUP_LEVEL_CUR
         INTO LV_ASSESSMENT_SEQ;
      CLOSE GET_REV_SUP_LEVEL_CUR;
      OPEN GET_SUP_LEVEL_CUR(LV_ASSESSMENT_SEQ);
      FETCH GET_SUP_LEVEL_CUR
         INTO LV_SUP_LEVEL;
      CLOSE GET_SUP_LEVEL_CUR;
      IF coalesce(LV_SUP_LEVEL::text, '') = ''
      THEN
         RETURN 'Y';
      ELSE
         OPEN CHECK_LIV_UNIT_SECURITY_CUR;
         FETCH CHECK_LIV_UNIT_SECURITY_CUR
            INTO LV_PASS_SECURITY;
         CLOSE CHECK_LIV_UNIT_SECURITY_CUR;
         IF LV_PASS_SECURITY > 0
         THEN
            RETURN 'Y';
         ELSE
            RETURN 'N';
         END IF;
      END IF;
   END;
$function$
;
