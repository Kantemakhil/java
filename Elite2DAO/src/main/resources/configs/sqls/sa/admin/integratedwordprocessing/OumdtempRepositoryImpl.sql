
OUMDTEMP_FIND_RGROLES {
 	SELECT ROLE_CODE    CODE     , ROLE_NAME DESCRIPTION FROM OMS_ROLES  ORDER BY ROLE_SEQ ,ROLE_CODE ,ROLE_NAME
}

OUMDTEMP_FIND_RGBMLIST {
 	SELECT Q.BOOKMARK_NAME ,Q.DESCRIPTION, Q.BOOKMARK_TYPE FROM IWP_BOOKMARKS Q WHERE Q.ACTIVE_FLAG='Y' ORDER BY 1
}

OUMDTEMP_FIND_RGOMSMODULE {
 	SELECT MODULE_NAME CODE, DESCRIPTION FROM OMS_MODULES WHERE MODULE_TYPE = 'SCREEN' ORDER BY MODULE_NAME ,DESCRIPTION
}

OUMDTEMP_FIND_RGREPORTNAME {
 	SELECT MODULE_NAME DESCRIPTION, MODULE_NAME CODE, DESCRIPTION MODULE_NAME FROM OMS_MODULES OMS  WHERE MODULE_TYPE = 'REPORT' ORDER BY MODULE_NAME
}
OUMDTEMP_FIND_RGDOCNAME {
 	SELECT TEMPLATE_NAME DESCRIPTION,TEMPLATE_NAME CODE,DESCRIPTION MODULE_NAME FROM IWP_TEMPLATES  ORDER BY TEMPLATE_NAME
}
OUMDTEMP_FIND_RGSTAFF {
 	select
	SUA.USERNAME ,
	SM.LAST_NAME || ', ' || SM.FIRST_NAME as NAME
from
	STAFF_MEMBERS SM ,
	STAFF_USER_ACCOUNTS SUA
where
	SM.STAFF_ID = SUA.STAFF_ID
	and SUA.USERNAME is not null
 	
}

OUMDTEMP_FIND_RGOBJECTTYPE {
 	select
	DESCRIPTION ,
	CODE
from
	REFERENCE_CODES
where
	domain = 'OBJECT_TYPE'
	and (ACTIVE_FLAG = 'Y' )
order by
	LIST_SEQ ,
	DESCRIPTION ,
	CODE
}

OUMDTEMP_AIWPTEMPLATES_FIND_IWP_TEMPLATES {
 	WITH with_iwp_doc_exist AS (SELECT template_id,  1 as IWP_DOC_EXIST FROM iwp_documents GROUP BY template_id)    
SELECT iwpt.TEMPLATE_ID, TEMPLATE_NAME, DESCRIPTION, LOCATION, ACTIVE_FLAG, DATE_CREATED,USER_CREATED
 	   ,  LOCK_PASSWORD, OBJECT_TYPE, CREATE_DATETIME, CREATE_USER_ID, MODIFY_DATETIME, MODIFY_USER_ID, EXPIRY_DATE, SEAL_FLAG,SIGNATURE_ACCESS,
 	      CASE WHEN TEMPLATE_BODY IS NOT NULL THEN 'TRUE' ELSE 'FALSE' END AS IS_TEMPLATE,
       COALESCE(with_iwp_doc_exist.IWP_DOC_EXIST, 0) AS IWP_DOC_COUNT
  FROM IWP_TEMPLATES iwpt LEFT OUTER JOIN with_iwp_doc_exist 
    ON iwpt.template_id = with_iwp_doc_exist.template_id  WHERE 
}
OUMDTEMP_AIWPTEMPLATES_INSERT_IWP_TEMPLATES {
insert into IWP_TEMPLATES(TEMPLATE_ID, TEMPLATE_NAME, DESCRIPTION, location, ACTIVE_FLAG, TEMPLATE_BODY, DATE_CREATED, USER_CREATED, LOCK_PASSWORD, OBJECT_TYPE, CREATE_DATETIME, CREATE_USER_ID, MODIFY_DATETIME, EXPIRY_DATE, SEAL_FLAG,SIGNATURE_ACCESS) values(nextval('TEMPLATE_ID'), :templateName, :description, :location, :activeFlag, :templateBody, :dateCreated, :userCreated, :lockPassword, :objectType, CURRENT_TIMESTAMP, :createUserId, NULL, :expiryDate, :sealFlag,:signatureAccess) 
}
OUMDTEMP_AIWPTEMPLATES_UPDATE_IWP_TEMPLATES {
update OMS_OWNER.IWP_TEMPLATES set TEMPLATE_NAME =:templateName, DESCRIPTION =:description, location =:location, ACTIVE_FLAG =:activeFlag, DATE_CREATED =:dateCreated, USER_CREATED =:userCreated, LOCK_PASSWORD =:lockPassword, OBJECT_TYPE =:objectType, MODIFY_DATETIME = CURRENT_TIMESTAMP, MODIFY_USER_ID = :modifyUserId, EXPIRY_DATE =:expiryDate, SEAL_FLAG =:sealFlag,SIGNATURE_ACCESS=:signatureAccess where TEMPLATE_ID =:templateId 
}

OUMDTEMP_AIWPTEMPLATES_DELETE_IWP_TEMPLATES { 
	DELETE FROM IWP_TEMPLATES WHERE TEMPLATE_ID=:templateId
}

OUMDTEMP_AIWPTAGRELATIONS_FIND_IWP_TEMPLATE_MODULES {
select ITM.*,
(select count(*) from iwp_documents where template_id =ITM.template_id and object_type =ITM.module_name )as iwp_doc_count
from
IWP_TEMPLATE_MODULES ITM
where
	TEMPLATE_ID =:TEMPLATE_ID
order by
	ACTIVE_FLAG desc,
	MODULE_NAME asc

}
OUMDTEMP_AIWPTAGRELATIONS_INSERT_IWP_TEMPLATE_MODULES {
insert into iwp_template_modules(TEMPLATE_MODULE_ID, TEMPLATE_ID, MODULE_NAME, BLOCK_NAME, BLOCK_DESCRIPTION, ACTIVE_FLAG, EXPIRY_DATE, CREATE_DATETIME, CREATE_USER_ID, MODIFY_DATETIME, SEAL_FLAG) values(:templateModuleId, :templateId, :moduleName, :blockName, :blockDescription, :activeFlag, :expiryDate, CURRENT_TIMESTAMP, :createUserId, NULL, :sealFlag) 
}

OUMDTEMP_AIWPTAGRELATIONS_UPDATE_IWP_TEMPLATE_MODULES {
UPDATE  iwp_template_modules set MODULE_NAME = :moduleName,BLOCK_NAME = :blockName,BLOCK_DESCRIPTION =:blockDescription,
ACTIVE_FLAG =:activeFlag,EXPIRY_DATE =:expiryDate,
MODIFY_DATETIME =CURRENT_TIMESTAMP,MODIFY_USER_ID =:modifyUserId,SEAL_FLAG =:sealFlag where TEMPLATE_MODULE_ID =:templateModuleId
and TEMPLATE_ID =:templateId
	
}

OUMDTEMP_AIWPTAGRELATIONS_DELETE_IWP_TEMPLATE_MODULES { 
	DELETE FROM IWP_TEMPLATE_MODULES where TEMPLATE_MODULE_ID =:templateModuleId and TEMPLATE_ID =:templateId
}

OUMDTEMP_IWPPARAMETERMAPPINGS_FIND_IWP_PARAMETER_MAPPINGS {
 	SELECT MAPPING_ID, TEMPLATE_MODULE_ID, BOOKMARK_NAME, PARAMETER_NAME, FIELD_NAME, DOCUMENT_CONTEXT_FLAG, CREATE_USER_ID, CREATE_DATETIME, MODIFY_USER_ID, MODIFY_DATETIME, SEAL_FLAG,
 	(SELECT parameter_data_type FROM iwp_bookmark_parameters WHERE bookmark_name = ipm.bookmark_name AND parameter_name = ipm.parameter_name) as DATATYPE
    FROM   IWP_PARAMETER_MAPPINGS ipm WHERE  TEMPLATE_MODULE_ID =:TEMPLATE_MODULE_ID
}
OUMDTEMP_IWPPARAMETERMAPPINGS_UPDATE_IWP_PARAMETER_MAPPINGS {
update IWP_PARAMETER_MAPPINGS set FIELD_NAME = :fieldName , DOCUMENT_CONTEXT_FLAG = :documentContextFlag, MODIFY_USER_ID = :modifyUserId , MODIFY_DATETIME = CURRENT_TIMESTAMP where MAPPING_ID = :mappingId
}

OUMDTEMP_TEMPLROLES_INSERT_IWP_10G  {
insert into iwp_template_roles(TEMPLATE_ID, ROLE_CODE, CREATE_DATETIME, CREATE_USER_ID, MODIFY_DATETIME, SEAL_FLAG) values(:templateId, :roleCode, CURRENT_TIMESTAMP, :createUserId, NULL, :sealFlag) 	
}

OUMDTEMP_TEMPLROLES_UPDATE_IWP_10G  {
	UPDATE IWP_10G.GET_TEMPL_ROLES set 
}

OUMDTEMP_TEMPLROLES_DELETE_IWP_10G  { 
DELETE FROM IWP_TEMPLATE_ROLES WHERE TEMPLATE_ID = :templateId AND ROLE_CODE = :roleCode
}


OUMDTEMP_A_IWP_TAG_RELATIONS_PREINSERT {
	SELECT NEXTVAL('IWP_TEMPLATE_MODULES_SEQ')  FROM DUAL
}

OUMDTEMP_A_IWP_TAG_RELATIONS_POSTUPDATE {
	SELECT COUNT(*) FROM IWP_PARAMETER_MAPPINGS WHERE TEMPLATE_MODULE_ID = :TEMPLATEMODULEID
}

OUMDTEMP_A_IWP_TAG_RELATIONS_ONCHECKDELETEMASTER_ {
	SELECT 1 FROM IWP_PARAMETER_MAPPINGS I WHERE I.TEMPLATE_MODULE_ID = :TEMPLATEMODULEID
}

OUMDTEMP_IWP_PARAMETER_MAPPINGS_POSTQUERY_ {
	SELECT PARAMETER_DATA_TYPE FROM IWP_BOOKMARK_PARAMETERS WHERE BOOKMARK_NAME = :BOOKMARKNAME AND PARAMETER_NAME = :PARAMETERNAME
}

OUMDTEMP_CONTEXT_RULE_ {
	SELECT COUNT(*) FROM IWP_BOOKMARKS_GROUPS IBG WHERE IBG.TEMPLATE_ID = :TEMPLATEID AND EXISTS (SELECT 1 FROM IWP_BOOKMARK_PARAMETERS IBP WHERE IBP.PARAMETER_TYPE = 'C' AND IBP.BOOKMARK_NAME = IBG.BOOKMARK_NAME)
}
OUMDTEMP_TEMPLATE_NAMME_EXISTS {
SELECT COUNT(*) FROM IWP_TEMPLATES WHERE TEMPLATE_NAME  IN  (:P_TEMP_NAME)
          }
          
 OUMDTEMP_BOOKMARK_GRP_CUR {
 SELECT COUNT(*) FROM IWP_BOOKMARKS_GROUPS WHERE TEMPLATE_ID = :TEMPLATE_ID
 }
 OUMDTEMP_IS_CONTEXT_REC_CUR {
  SELECT COUNT(*)  FROM IWP_BOOKMARK_PARAMETERS IBP ,IWP_BOOKMARKS_GROUPS IBG WHERE IBP.BOOKMARK_NAME = IBG.BOOKMARK_NAME  AND IBP.ACTIVE_FLAG = 'Y'  
  AND IBP.PARAMETER_TYPE = 'C' AND IBG.TEMPLATE_ID = :TEMPLATE_ID
 }
 OUMDTEMP_REC_EXISTS_CUR {
  SELECT COUNT(*)   FROM IWP_BOOKMARK_PARAMETERS IBP  ,IWP_BOOKMARKS_GROUPS IBG ,IWP_TEMPLATE_MODULES ITM             
        WHERE IBP.BOOKMARK_NAME = IBG.BOOKMARK_NAME AND ITM.TEMPLATE_ID = IBG.TEMPLATE_ID AND IBP.ACTIVE_FLAG = 'Y'
          AND IBP.PARAMETER_TYPE = 'C' AND IBG.TEMPLATE_ID = :TEMPLATE_ID   
          AND EXISTS (SELECT *  FROM IWP_PARAMETER_MAPPINGS IPM WHERE IBP.BOOKMARK_NAME = IPM.BOOKMARK_NAME
          AND IBP.PARAMETER_NAME = IPM.PARAMETER_NAME AND ITM.TEMPLATE_MODULE_ID = IPM.TEMPLATE_MODULE_ID AND IPM.FIELD_NAME IS NULL)
 }
 OUMDTEMP_IS_TEMPL_ROLE_EXISTS {
  SELECT count(*)
           FROM iwp_template_roles
          WHERE template_id IN (:P_TEMPLATE_ID)
            AND role_code IN (:p_role_code)
            }
  A_IWP_TAG_RELATIONS_POST_INSERT {
insert into IWP_PARAMETER_MAPPINGS (mapping_id, template_module_id, bookmark_name, parameter_name, CREATE_DATETIME , MODIFY_DATETIME, CREATE_USER_ID ) ( select nextval('iwp_parameter_mappings_seq'), :templateModuleId, ibp.bookmark_name, ibp.parameter_name, CURRENT_TIMESTAMP , :createUserId , CURRENT_TIMESTAMP from iwp_bookmark_parameters ibp , iwp_bookmarks_groups ibg where ibp.bookmark_name = ibg.bookmark_name and ibp.active_flag = 'Y' and ibp.parameter_type = 'C' and ibg.template_id = :templateId)


	  }
	  
	  GET_IWP_ROLES_FOR_STAFF { 
	  select template_id ,role_code from iwp_template_roles itr where role_code in (select role_code from staff_member_roles smr,staff_members sm where smr.staff_id =sm.staff_id and sm.user_id= :userId)
	  
	  
	  }