UPDATE_OFFENDER_BENEFICIARIES{
update OFFENDER_BENEFICIARIES set RECEIVED_AMOUNT = least ( AMOUNT, coalesce (RECEIVED_AMOUNT, 0) + :P_AMOUNT_TO_BEN ), MODIFY_USER_ID = :modifyUserId , MODIFY_DATETIME = CURRENT_TIMESTAMP where OFFENDER_DEDUCTION_ID = :P_DED_ID and coalesce (PERSON_ID, 0) = coalesce (:P_PER_ID, 0) and coalesce (CORPORATE_ID, 0) = coalesce (:P_CORP_ID, 0) and coalesce (UNKNOWN_BEN_ID, 0) = coalesce (:P_UNKNOWN_ID, 0)
}

GET_OFFENDER_BENEFICIARIES {
	 select * from OFFENDER_BENEFICIARIES where OFFENDER_DEDUCTION_ID=:OFFENDER_DEDUCTION_ID and PERSON_ID=:PERSON_ID and CORPORATE_ID=:CORPORATE_ID

}
 PAYMENT_PERIOD_{
 SELECT ops.payment_plan_id, ops.payment_plan_seq, ops.payment_date, coalesce (ops.payment_amount, 0), coalesce (ops.paid_amount, 0), ops.information_number, ops.GROUP_ID FROM offender_payment_schedules ops WHERE EXISTS ( SELECT 1 FROM offender_payment_plans opp WHERE opp.information_number = :p_info_number AND opp.GROUP_ID = :p_grp_id AND opp.payment_closed_flag <> 'Y' AND opp.offender_id = :p_off_id AND opp.payment_plan_id = ops.payment_plan_id AND opp.payment_plan_seq = ops.payment_plan_seq AND opp.payment_completion_date IS NULL) ORDER BY ops.payment_date, ops.payment_plan_seq
 }
     
                              
 OFFENDER_PAYMENT_SCHEDULES_UPDATE{                             
UPDATE OFFENDER_PAYMENT_SCHEDULES SET PAID_AMOUNT = COALESCE (PAID_AMOUNT, 0) + :V_PAYMENT_AMOUNT, PAID_RECURSIVE_AMOUNT = COALESCE (PAID_RECURSIVE_AMOUNT, 0) + CASE COALESCE (:P_RECURSIVE_AMT, 0) WHEN 0 THEN 0 ELSE :V_PAYMENT_AMOUNT END, MODIFY_DATETIME = current_timestamp,MODIFY_USER_ID = :MODIFY_USER_ID WHERE PAYMENT_PLAN_ID = :C_PAYMENT_PLAN_ID AND PAYMENT_PLAN_SEQ = :C_PAYMENT_PLAN_SEQ AND PAYMENT_DATE = :C_PAYMENT_DATE 
 }
               
               
SEQ_CUR{
SELECT COALESCE (MAX (TRANSACTION_SEQ), 0) + 1 FROM PAYMENT_PLAN_TRANSACTIONS WHERE PAYMENT_PLAN_ID = :NI_PLNID AND PAYMENT_PLAN_SEQ = :NI_PLNSEQ AND PAYMENT_DATE = :DI_PAYDATE
}
            
PAYMENT_PLAN_TRANSACTIONS_INSERT{
insert into payment_plan_transactions (payment_plan_id, payment_plan_seq, payment_date, transaction_seq, transaction_date, transaction_amount, information_number, GROUP_ID, CREATE_USER_ID, CREATE_DATETIME, MODIFY_DATETIME) values (:ni_plnid, :ni_plnseq, :di_paydate, :n_txnseq, :di_txndate, :ni_txnamt, :vi_infono, :ni_grpid, :createUserId, CURRENT_TIMESTAMP, NULL) 
}
                   
 GET_V_STILL_AMOUNT{
 select coalesce (SUM (coalesce (PAYMENT_AMOUNT, 0) - coalesce (PAID_AMOUNT, 0)), 0) from V_OFFENDER_PAYMENT_SCHEDULES where PAYMENT_PLAN_ID = :C_PAYMENT_PLAN_ID
 }
             
 OFFENDER_PAYMENT_PLANS_UPDATE{
 update offender_payment_plans set payment_completion_date = current_date, modify_user_id = :modifyUserId, modify_datetime = current_timestamp where payment_plan_id = :c_payment_plan_id
 }
 
 
C_BEN_TXN{
  SELECT ben_entry_seq, offender_deduction_id, account_code, person_id, corporate_id, unknown_ben_id, txn_entry_amount, caseload_id, txn_type, txn_entry_desc, check_cleared_date, beneficiary_id FROM beneficiary_transactions WHERE txn_id = :p_rev_txn_id AND txn_entry_seq = :p_rev_txn_entry_seq AND gl_entry_seq = :p_rev_gl_entry_seq ORDER BY ben_entry_seq
}
         
         
 INSERT_INTO_BEN_TRANSACTIONS_SELECT{      
SELECT DECODE (COUNT (*), 0, 'N', 'Y') FROM OFFENDER_CREDIT_PRIOR_PAYMENTS WHERE TXN_ID = :P_TXN_ID
 }
 
 GET_TRANSACTION_OPERATION_DATA {
 SELECT TT.TXN_TYPE, TT.DESCRIPTION, OPR.BANK_DR_ACCOUNT_CODE,
                AC.TXN_POSTING_TYPE
           FROM TRANSACTION_TYPES TT,
                TRANSACTION_OPERATIONS OPR,
                ACCOUNT_CODES AC
          WHERE OPR.MODULE_NAME = 'ALLFRM1'
            AND TT.TXN_TYPE = OPR.TXN_TYPE
            AND OPR.BANK_DR_ACCOUNT_CODE = AC.ACCOUNT_CODE
            AND TT.ACTIVE_FLAG = 'Y'
            AND AC.CASELOAD_TYPE = :CSLD_TYPE
            AND OPR.CASELOAD_ID = :P_CSLD_ID
            AND TT.CASELOAD_TYPE = :CSLD_TYPE
 }
 
 GET_ACCOUNT_CODES_DATA {
 SELECT ACCOUNT_CODE, TXN_POSTING_TYPE
           FROM ACCOUNT_CODES
          WHERE SUB_ACCOUNT_TYPE = :P_SUB_ACT_TYPE
            AND CASELOAD_TYPE = :CSLD_TYPE
 }
 
 GET_PROFILE_VALUE_A {
 SELECT PROFILE_VALUE
           FROM SYSTEM_PROFILES
          WHERE PROFILE_TYPE = 'CLIENT' AND PROFILE_CODE = 'DED_INDIGENT'
 }
 
 GET_OVERRIDE_FLAG {
 select
	'Y'
from
	OFFENDER_BENEFICIARIES OB
where
	exists (
	select
		'1'
	from
		OFFENDER_DEDUCTIONS OD
	where
		OD.OFFENDER_DEDUCTION_ID =
                                                     OB.OFFENDER_DEDUCTION_ID
		and OB.OFFENDER_ID = :P_OFF_ID
		and OD.DEDUCTION_STATUS = 'A'
		and date_trunc('day',OD.EFFECTIVE_DATE) <=
                                                         date_trunc('day',CURRENT_TIMESTAMP)
			and ( (( coalesce (OD.DEDUCTION_AMOUNT,
			0)
                                      + coalesce (OD.ADJUSTMENT_AMOUNT,
			0)
                                     ) < coalesce (OD.MAX_TOTAL_AMOUNT,
			0)
                                    )
				or OD.MAX_TOTAL_AMOUNT is null
                                ))
	and coalesce (OVERRIDE_AMOUNT,
	0) > 0
	and OFFENDER_ID = :P_OFF_ID
	
 }
 
 GET_AGY_LOC {
 SELECT AGY_LOC_ID
              FROM OFFENDER_BOOKINGS
             WHERE OFFENDER_BOOK_ID = :P_OFF_BOOK_ID
 }
 
 DO_DEDUCTION_C {
select
	INDIGENT_MANDATORY_FLAG,
	VOD.EXTERNAL_PRIORITY_NO,
	VOD.INTERNAL_PRIORITY_NO,
	VOD.DEDUCTION_TYPE,
	DT.DEDUCTION_CATEGORY,
	VOD.DEDUCTION_PRIORITY,
	VOD.FIFO_FLAG,
	VOD.OFFENDER_DEDUCTION_ID,
	coalesce(ODS.PERCENTAGE, ODR.RECEIPT_PERCENTAGE) NMBR_PRCNT,
	ODR.FLAT_RATE,
	coalesce(VOD.DEDUCTION_AMOUNT, 0) DEDUCTION_AMOUNT,
	coalesce(
                               VOD.MAX_TOTAL_AMOUNT
                             - coalesce(VOD.ADJUSTMENT_AMOUNT, 0),
                             0
                          ) MAX_TOTAL_AMOUNT,
	coalesce(VOD.MAX_RECURSIVE_AMOUNT, 0) MAX_RECURSIVE_AMOUNT,
	coalesce(VOD.MAX_MONTHLY_AMOUNT, 0) MAX_MONTHLY_AMOUNT,
	VOD.EFFECTIVE_DATE,
	case
		when coalesce(VOD.MAX_RECURSIVE_AMOUNT::text, '') = '' then
		case
			when OMD.MONTHLY_DEDUCTION_DATE = date_trunc('month', LOCALTIMESTAMP) then OMD.MONTHLY_DEDUCTION_DATE
			else null
		end
		else OMD.MONTHLY_DEDUCTION_DATE
	end ,
	case
		when coalesce(VOD.MAX_RECURSIVE_AMOUNT::text, '') = '' then
		case
			when OMD.MONTHLY_DEDUCTION_DATE = date_trunc('month', LOCALTIMESTAMP) then coalesce( OMD.DEDUCTION_AMOUNT, 0 )
			else 0
		end
		else coalesce(OMD.DEDUCTION_AMOUNT, 0)
	end ,
	ODS.DEDUCTION_TXN_ENTRY,
	VOD.PAYEE_PERSON_ID,
	VOD.PAYEE_CORPORATE_ID,
	VOD.INFORMATION_NUMBER,
	VOD.ACCOUNT_CODE,
	AC.TXN_POSTING_TYPE,
	VOD.CASELOAD_ID,
	DT.DEDUCTION_CATEGORY,
	coalesce(ODS.CONFIRM_FLAG, 'Y') CONFIRM_FLAG,
	DT.FROM_BALANCE_TYPE,
	VOD.UNLIMITED_DEDUCTION
from
	offender_deduction_receipts odr,
	deduction_types dt,
	account_codes ac,
	v_offender_deductions vod
left outer join offender_deduction_shadows ods on
	(VOD.OFFENDER_DEDUCTION_ID = ODS.OFFENDER_DEDUCTION_ID
		and :P_SHADOW_ID = ODS.SHADOW_ID)
left outer join offender_mon_deductions omd on
	(VOD.OFFENDER_DEDUCTION_ID = OMD.OFFENDER_DEDUCTION_ID)
where
	VOD.PROFILE_CASELOAD_ID = :P_CSLD_ID
	and VOD.CASELOAD_ID =
	case
		when DT.DEDUCTION_CATEGORY = 'ALCN' then :P_CSLD_ID
		else VOD.CASELOAD_ID
	end
	and VOD.OFFENDER_ID = :P_OFF_ID
	and VOD.OFFENDER_DEDUCTION_ID = ODR.OFFENDER_DEDUCTION_ID
	and ODR.RECEIPT_TXN_TYPE = :P_TRANS_TYPE
	and ( VOD.INFORMATION_NUMBER = :P_INFO_NUMBER::text
		or coalesce(:P_INFO_NUMBER::text, '') = ''
                          )
	and ( (( coalesce(VOD.DEDUCTION_AMOUNT, 0)
                                + coalesce(VOD.ADJUSTMENT_AMOUNT, 0)
                               ) < coalesce(VOD.MAX_TOTAL_AMOUNT, 0)
		or DT.DEDUCTION_CATEGORY = 'ALCN'
                              )
	or coalesce(VOD.MAX_TOTAL_AMOUNT::text, '') = ''
                          )
	and date_trunc('day', VOD.EFFECTIVE_DATE) <=
                                                           date_trunc('day', LOCALTIMESTAMP)
	and coalesce(VOD.DELAY_RECAPTURE, 0) <=
                                (
	select
		extract 
		(day
	from
		(date_trunc('day', LOCALTIMESTAMP)
                                      - date_trunc('day', VOD.EFFECTIVE_DATE)))
	from
		OFFENDER_DEDUCTIONS
	where
		OFFENDER_ID = VOD.OFFENDER_ID
		and CASELOAD_ID = VOD.CASELOAD_ID
		and DEDUCTION_TYPE = VOD.DEDUCTION_TYPE
		and INFORMATION_NUMBER =
                                                         VOD.INFORMATION_NUMBER)
	and VOD.DEDUCTION_STATUS = 'A'
	and VOD.ACCOUNT_CODE = AC.ACCOUNT_CODE
	and AC.CASELOAD_TYPE = :CSLD_TYPE
	and VOD.DEDUCTION_TYPE = DT.DEDUCTION_TYPE
	and DT.CASELOAD_CODE in ('BOTH', :CSLD_TYPE)
	and ( ( (VOD.MAX_MONTHLY_AMOUNT is not null
		and VOD.MAX_MONTHLY_AMOUNT::text <> '')
	and ( OMD.MONTHLY_DEDUCTION_DATE =
                                          (
	select
		MAX(OMD4.MONTHLY_DEDUCTION_DATE)
	from
		OFFENDER_MON_DEDUCTIONS OMD4
	where
		OMD4.OFFENDER_DEDUCTION_ID =
                                                      VOD.OFFENDER_DEDUCTION_ID)
	or not exists (
	select
		'1'
	from
		OFFENDER_MON_DEDUCTIONS OMD4
	where
		OMD4.OFFENDER_DEDUCTION_ID =
                                                      VOD.OFFENDER_DEDUCTION_ID)
                                   )
                              )
	or ( coalesce(VOD.MAX_MONTHLY_AMOUNT::text, '') = ''
		and coalesce(VOD.MAX_RECURSIVE_AMOUNT::text, '') = ''
                              )
		or ( (VOD.MAX_RECURSIVE_AMOUNT is not null
			and VOD.MAX_RECURSIVE_AMOUNT::text <> '')
		and ( not exists (
		select
			'1'
		from
			OFFENDER_MON_DEDUCTIONS OMD1
		where
			OMD1.OFFENDER_DEDUCTION_ID =
                                                      VOD.OFFENDER_DEDUCTION_ID)
		or ( OMD.OFFENDER_DEDUCTION_ID =
                                                      VOD.OFFENDER_DEDUCTION_ID
			and OMD.MONTHLY_DEDUCTION_DATE =
                                               (
			select
				MAX(OMD3.MONTHLY_DEDUCTION_DATE)
			from
				OFFENDER_MON_DEDUCTIONS OMD3
			where
				OMD3.OFFENDER_DEDUCTION_ID =
                                                          OMD.OFFENDER_DEDUCTION_ID)
                                       )
                                   )
                              )
                          )
order by
	case
		when :OFF_IND_FLAG = 'Y' then INDIGENT_MANDATORY_FLAG
	end desc,
	VOD.EXTERNAL_PRIORITY_NO,
	VOD.INTERNAL_PRIORITY_NO,
	VOD.DEDUCTION_PRIORITY,
	VOD.EFFECTIVE_DATE,
	VOD.DEDUCTION_TYPE,
	VOD.FIFO_FLAG

}

DEDUCTION_PIRORITY_CUR {
SELECT   CDP.EXTERNAL_PRIORITY_NO,
                        MIN (CDP.INTERNAL_PRIORITY_NO) INTERNAL_PRIORITY_NO,
                        MIN (OD.DEDUCTION_PRIORITY) DEDUCTION_PRIORITY
                   FROM OFFENDER_DEDUCTIONS OD,
                        CASELOAD_DEDUCTION_PROFILES CDP
                  WHERE OD.OFFENDER_ID = :P_OFF_ID
                    AND OD.DEDUCTION_TYPE = CDP.DEDUCTION_TYPE
                    AND CDP.EXTERNAL_PRIORITY_NO = :P_EXT_PRI
                    AND CDP.CASELOAD_ID = :P_CSLD_ID
               GROUP BY CDP.EXTERNAL_PRIORITY_NO
}

 GET_METHOD_FLAG {
 SELECT PROFILE_VALUE
           FROM SYSTEM_PROFILES
          WHERE PROFILE_TYPE = 'CLIENT' AND PROFILE_CODE = 'METHOD'
 }
 
 L_TBD_COUNT_CUR {
 SELECT COUNT (*) FROM OFFENDER_BENEFICIARIES WHERE OFFENDER_DEDUCTION_ID = :P_OFFENDER_DEDUCTION_ID AND TBD_FLAG = 'Y'
 }
 
 CHK_DED_BEN_CUR {
 SELECT '1'
                          FROM OFFENDER_BENEFICIARIES
                         WHERE OFFENDER_DEDUCTION_ID = :P_OFFENDER_DEDUCTION_ID
                           AND PRIORITY IS NOT NULL
                           AND (   PERSON_ID IS NOT NULL
                                OR CORPORATE_ID IS NOT NULL
                                OR UNKNOWN_BEN_ID IS NOT NULL)
}

GET_DEFAULT_ENDDATE {
SELECT OPP.END_DATE
        FROM OFFENDER_DEDUCTIONS OD, OFFENDER_PAYMENT_PLANS OPP
       WHERE OD.OFFENDER_ID = OPP.OFFENDER_ID
         AND OD.OFFENDER_DEDUCTION_ID = :DED_ID
         AND OD.INFORMATION_NUMBER = OPP.INFORMATION_NUMBER
         AND OD.GROUP_ID = OPP.GROUP_ID
         AND OPP.PAYMENT_PLAN_SEQ = 1
}

CHECK_COLLECTION_FEE {
SELECT 'Y'
        FROM OFFENDER_TXN_FEE_DETAILS
       WHERE OFFENDER_DEDUCTION_ID = :CF_OFFENDER_DEDUCTION_ID
         AND RECEIPT_DEDUCTION_TYPE = :DED_TYPE
}

GET_TIERED_FEE_AMOUNTS {
SELECT PERCENTAGE, FEE_AMOUNT
                             FROM TIERED_FEE_AMOUNTS
                            WHERE CASELOAD_ID = :P_CSLD_ID
                              AND DEDUCTION_TYPE = :DED_TYPE
                              AND RECEIPT_TXN_TYPE = :P_TRANS_TYPE
                              AND :P_RECEIPT_AMOUNT BETWEEN FROM_AMOUNT
                                                       AND TO_AMOUNT
}

GET_OVERRIDE_AMOUNT {
SELECT SUM (COALESCE (OVERRIDE_AMOUNT, 0)) FROM OFFENDER_BENEFICIARIES WHERE OFFENDER_DEDUCTION_ID = :DED_ID
}

GET_MIN_TRUST_BALANCE {
SELECT coalesce (MINIMUM_TRUST_BALANCE, 0)
                             FROM CASELOAD_DEDUCTION_PROFILES CDP, CASELOAD_DEDUCTION_DETAILS CDD
                            WHERE coalesce (CDD.MINIMUM_TRUST_BALANCE_FLAG, 'N') = 'Y'
                              AND CDD.CASELOAD_ID = :P_CSLD_ID
                              AND CDD.DEDUCTION_TYPE = :DED_TYPE
                              AND CDD.RECEIPT_TXN_TYPE = :P_TRANS_TYPE
                              AND CDP.CASELOAD_ID = CDD.CASELOAD_ID
                              AND CDP.DEDUCTION_TYPE = CDD.DEDUCTION_TYPE
}

GET_L_TBD_CHECK_CUR {
SELECT   SUM (
                                               coalesce (OB.AMOUNT, 0)
                                             - coalesce (OB.RECEIVED_AMOUNT, 0)
                                          )::text
                                                TOTAL_OWING,
                                          MAX (coalesce (TBD_FLAG, 'N')) TBD_FLAG
                                     FROM OFFENDER_BENEFICIARIES OB,
                                          OFFENDER_DEDUCTIONS OD
                                    WHERE OD.OFFENDER_DEDUCTION_ID =
                                                      :P_OFFENDER_DEDUCTION_ID
                                      AND OB.OFFENDER_DEDUCTION_ID =
                                                     OD.OFFENDER_DEDUCTION_ID
                                      AND (   (   (    OB.OVERRIDE_AMOUNT IS NOT NULL
                                                   AND :P_OVERRIDE_FLAG = 'Y'
                                                  )
                                               OR EXISTS (
                                                     SELECT 1
                                                       FROM DEDUCTION_TYPES DT
                                                      WHERE DT.DEDUCTION_TYPE =
                                                               OD.DEDUCTION_TYPE
                                                        AND DT.DEDUCTION_CATEGORY =
                                                                        'DTF')
                                              )
                                           OR :P_OVERRIDE_FLAG = 'N'
                                          )
                                 GROUP BY PRIORITY
}

GET_SUB_ACCOUNT_TYPE {
SELECT SUB_ACCOUNT_TYPE
                                FROM ACCOUNT_CODES
                               WHERE ACCOUNT_CODE = :CODE_ACNT
                                 AND CASELOAD_TYPE = :CSLD_TYPE
}

GET_OFFENDER_DEDUCTIONS {
SELECT GROUP_ID, INFORMATION_NUMBER
                                   FROM OFFENDER_DEDUCTIONS
                                  WHERE OFFENDER_DEDUCTION_ID = :DED_ID
}
                                  
UPDTAE_OVERRIDE_AMOUNT {
UPDATE OFFENDER_BENEFICIARIES SET OVERRIDE_AMOUNT = null,MODIFY_DATETIME = current_timestamp ,MODIFY_USER_ID = :MODIFY_USER_ID WHERE OFFENDER_DEDUCTION_ID = :DED_ID
}

GET_LEV_DED_LOCK {
select
	'X'
from
	OFFENDER_DEDUCTIONS OD
where
	OD.OFFENDER_ID = :offenderId
	and OD.CASELOAD_ID = :caseloadId
	limit 1
}

GET_LEV_BEN_LOCK {
select
	'X'
from
	OFFENDER_BENEFICIARIES OB
where
	OB.OFFENDER_ID = :offenderId
	limit 1
}

GET_LV_CFPP_FLAG {
SELECT 'Y' FROM OFFENDER_CREDIT_PRIOR_PAYMENTS WHERE TXN_ID = :pTxnId
}

GET_TRUSTACCODE {
SELECT CR_ACCOUNT_CODE FROM TRANSACTION_OPERATIONS WHERE MODULE_NAME = :modName AND TXN_TYPE = :txnType AND CASELOAD_ID = :caseloadId
}

GET_OFFENDERSUBACCOUNTS_PAMOUNT_PMINBAL {
 SELECT COALESCE (BALANCE, 0)BALANCE , MINIMUM_BALANCE FROM OFFENDER_SUB_ACCOUNTS WHERE CASELOAD_ID = :caseloadId AND OFFENDER_ID = :pOffId AND TRUST_ACCOUNT_CODE = :trustAccCode
}

GET_ACTIVE_COLLECTION_FEE {
SELECT OD.OFFENDER_DEDUCTION_ID, OD.DEDUCTION_TYPE, OD.EFFECTIVE_DATE FROM OFFENDER_DEDUCTIONS OD WHERE EXISTS ( SELECT 1 FROM DEDUCTION_TYPES DT WHERE DT.DEDUCTION_CATEGORY = 'CTF' AND DT.DEDUCTION_TYPE = OD.DEDUCTION_TYPE) AND DEDUCTION_STATUS = 'A' AND OFFENDER_ID = :pOffId AND CASELOAD_ID = :caseloadId
}
CHK_CASELOAD_C_FINANCIAL {
SELECT 'X' FROM INSTITUTION_MINI_BALANCES WHERE CASELOAD_ID = :caseloadId ORDER BY LIST_SEQ limit 1
}

GET_INSTITUTIONALMINIBALANCE_PMINBAL {
 SELECT COALESCE (MINIMUM_ACCOUNT_BALANCE, 0) FROM INSTITUTION_MINI_BALANCES WHERE CASELOAD_ID = :caseloadId AND AGY_LOC_ID = :pAgyLocId AND ACCOUNT_CODE = :trustAccCode
 }

SYSTEM_PROFILE_C {
SELECT PROFILE_VALUE, PROFILE_VALUE_2 FROM SYSTEM_PROFILES WHERE PROFILE_TYPE = 'CLIENT' AND PROFILE_CODE = 'IND_CON'
}

GET_REC_OVERPAY_FLAG {
SELECT PROFILE_VALUE FROM SYSTEM_PROFILES WHERE PROFILE_TYPE = 'CLIENT' AND PROFILE_CODE = 'REC_OVERPAY'
}


L_OFFENDER_BOOK_ID_CUR {
 SELECT OFFENDER_BOOK_ID FROM V_HEADER_BLOCK_FN(:USERID) WHERE ROOT_OFFENDER_ID = :P_ROOT_OFFENDER_ID AND IN_OUT_STATUS = 'IN'
}

L_PAYMENT_PLAN_ENDDATE_CUR {
select OPP.END_DATE from OFFENDER_DEDUCTIONS OD, OFFENDER_PAYMENT_PLANS OPP where OD.OFFENDER_ID = OPP.OFFENDER_ID and OD.OFFENDER_DEDUCTION_ID = :P_OFFENDER_DEDUCTION_ID and OD.INFORMATION_NUMBER = OPP.INFORMATION_NUMBER and OD.GROUP_ID = OPP.GROUP_ID and OPP.PAYMENT_PLAN_SEQ = 1
}

L_SENTENCE_ENDDATE_CUR {
SELECT GREATEST ( COALESCE (CALC_POS_REL_DATE, :P_SYSDATE), COALESCE (ACTUAL_MAX_DATE, :P_SYSDATE) ) FROM OFFENDER_SENTENCE_AGGS WHERE OFFENDER_BOOK_ID = :P_OFFENDER_BOOK_ID
}

ADD_MONTHS {
SELECT ADD_MONTHS (:P_DATE ,:DIFFTIME) - INTERVAL '1'  DAY FROM DUAL
}

L_BENEFICIARY_PAID_CUR  {
SELECT SUM ( BT.TXN_ENTRY_AMOUNT * CASE BT.TXN_POST_USAGE WHEN 'CR' THEN 1 ELSE -1 END ) FROM BENEFICIARY_TRANSACTIONS BT, OFFENDER_BENEFICIARIES OB WHERE BT.OFFENDER_DEDUCTION_ID = :P_OFFENDER_DEDUCTION_ID AND BT.OFFENDER_DEDUCTION_ID = OB.OFFENDER_DEDUCTION_ID AND BT.BENEFICIARY_ID = OB.BENEFICIARY_ID AND ( BT.BENEFICIARY_ID = :P_BENEFICIARY_ID OR COALESCE (:P_BENEFICIARY_ID::NUMERIC ,0)=0 ) AND ( OB.PRIORITY = :P_PRIORITY OR COALESCE (:P_PRIORITY::TEXT ,'')='' )
}

GET_CFPP_TXN_DESC_LOCATION {
 SELECT LOCATION, COMMENT_TEXT FROM OFFENDER_CREDIT_PRIOR_PAYMENTS WHERE TXN_ID = :P_TRANS_NUMBER
}

LV_TXN_ENTRY_DESC {
SELECT CONCAT('PRIOR PAYMENTS <$', TO_CHAR (TRUNC (COALESCE (:P_AMNT_OWING, 0))),(SELECT SUBSTR(a, 2, 3) FROM ( SELECT CASE WHEN MOD(COALESCE (:P_AMNT_OWING, 0), 1)= 0 THEN ' .00' ELSE '####' END A)A), '> <',:LV_CPP_LOCATION, '> <',:LV_CPP_COMMENT_TEXT, '>') FROM DUAL
}

L_DEDUCTION_CUR {
 SELECT COALESCE (OD.MAX_TOTAL_AMOUNT, 0) MAX_TOTAL_AMOUNT, COALESCE (OD.MAX_MONTHLY_AMOUNT, 0) MAX_MONTHLY_AMOUNT, COALESCE (OD.MAX_RECURSIVE_AMOUNT, 0) MAX_RECURSIVE_AMOUNT, DT.DEDUCTION_CATEGORY FROM OFFENDER_DEDUCTIONS OD, DEDUCTION_TYPES DT WHERE OD.OFFENDER_DEDUCTION_ID = :P_OFFENDER_DEDUCTION_ID AND OD.DEDUCTION_TYPE = DT.DEDUCTION_TYPE
}

L_RECURSIVE_OVERPAY_CUR {
SELECT PROFILE_VALUE FROM SYSTEM_PROFILES WHERE PROFILE_TYPE = 'CLIENT' AND PROFILE_CODE = 'REC_OVERPAY'
}

L_OFFENDER_BOOK_ID_CUR_ONE {
select MAX (OB.OFFENDER_BOOK_ID) from OFFENDER_BOOKINGS OB where OB.ROOT_OFFENDER_ID = :P_ROOT_OFFENDER_ID and ( OB.BOOKING_TYPE = ( select CASELOAD_TYPE from CASELOADS where CASELOAD_ID = :P_CASELOAD_ID) or coalesce (OB.BOOKING_TYPE::text,'' )='')
}

L_OVERRIDE_CUR {
 SELECT BENEFICIARY_ID, PERSON_ID, CORPORATE_ID, UNKNOWN_BEN_ID, COALESCE (AMOUNT, 0) AMOUNT, COALESCE (RECEIVED_AMOUNT, 0) RECEIVED_AMOUNT, OVERRIDE_AMOUNT FROM OFFENDER_BENEFICIARIES WHERE OFFENDER_DEDUCTION_ID = :P_OFFENDER_DEDUCTION_ID AND OVERRIDE_AMOUNT > 0
 }
 
 INSERT_INTO_BEN_TRANSACTIONS_CFPP_FLAG {
 SELECT CASE COUNT (*) WHEN 0 THEN 'N' ELSE 'Y' END FROM OFFENDER_CREDIT_PRIOR_PAYMENTS WHERE TXN_ID = :P_TXN_ID
}

CFPP_PAYMENT_PER_CUR {
SELECT OB.OVERRIDE_AMOUNT FROM OFFENDER_BENEFICIARIES OB WHERE OB.OFFENDER_DEDUCTION_ID = :P_DED_ID AND OB.PERSON_ID = :P_PER_ID
}

CFPP_PAYMENT_CORP_CUR {
SELECT OB.OVERRIDE_AMOUNT FROM  OFFENDER_BENEFICIARIES OB WHERE OB.OFFENDER_DEDUCTION_ID = :P_DED_ID AND OB.CORPORATE_ID = :P_CORP_ID 
}

V_TXN_ENTRY_DESC {
 select concat('PRIOR PAYMENTS <$',TO_CHAR (TRUNC (:CFPP_PAYMENT)),(select substr(a, 2, 3) from ( select case when mod(coalesce (:CFPP_PAYMENT, 0), 1)= 0 then ' .00' else '####' end a)A),( select substr (:P_TXN_ENTRY_DESC, POSITION(' >' IN :P_TXN_ENTRY_DESC))) ) from dual 
}

INSERT_INTO_BENEFICIARY_TRANSACTIONS {
insert into BENEFICIARY_TRANSACTIONS (TXN_ID, TXN_ENTRY_SEQ, GL_ENTRY_SEQ, BEN_ENTRY_SEQ, OFFENDER_DEDUCTION_ID, ACCOUNT_CODE, PERSON_ID, CORPORATE_ID, UNKNOWN_BEN_ID, TXN_POST_USAGE, TXN_ENTRY_DATE, TXN_ENTRY_TIME, TXN_ENTRY_AMOUNT, CASELOAD_ID, TXN_TYPE, TXN_ENTRY_DESC, MODIFY_USER_ID, MODIFY_DATE, REV_TXN_ID, REV_TXN_ENTRY_SEQ, REV_GL_ENTRY_SEQ, REV_BEN_ENTRY_SEQ, REV_TXN_FLAG, RECEIPT_TXN_TYPE, BENEFICIARY_ID, CREATE_USER_ID, CREATE_DATETIME, modify_datetime) values (:txnId, :txnEntrySeq, :glEntrySeq, :benEntrySeq, :offenderDeductionId, :accountCode, :personId, :corporateId, :unknownBenId, :txnPostUsage, CURRENT_DATE, CURRENT_TIMESTAMP, :txnEntryAmount, :caseloadId, :txnType, :txnEntryDesc, null, current_date, :revTxnId, :revTxnEntrySeq, :revGlEntrySeq, :revBenEntrySeq, :revTxnFlag, :receiptTxnType, :beneficiaryId, :createUserId, CURRENT_TIMESTAMP, null) 
}

UPDATE_BENEFICIARY_TRANSACTIONS {
update BENEFICIARY_TRANSACTIONS set REV_TXN_FLAG = 'Y', modify_datetime = current_timestamp, modify_user_id =:modifyUserId where TXN_ID = :P_REV_TXN_ID and TXN_ENTRY_SEQ = :P_REV_ENTRY_SEQ and GL_ENTRY_SEQ = :P_REV_GL_SEQ and BEN_ENTRY_SEQ = :P_REV_BEN_SEQ 
}

L_PRIORITY_CUR {
SELECT
	PRIORITY,
	SUM (AMOUNT) AMOUNT,  
	SUM (COALESCE (AMOUNT,
	0) - COALESCE (RECEIVED_AMOUNT,
	0)) RECEIVED_AMOUNT  
FROM
	OFFENDER_BENEFICIARIES
WHERE
	OFFENDER_DEDUCTION_ID = :P_OFFENDER_DEDUCTION_ID
GROUP BY
	PRIORITY
}

L_BENEFICIARY_CUR {
SELECT BENEFICIARY_ID, PERSON_ID, CORPORATE_ID, UNKNOWN_BEN_ID, COALESCE (AMOUNT, 0) AMOUNT, COALESCE(MONTHLY_AMOUNT, 0) MONTHLY_AMOUNT, COALESCE (RECEIVED_AMOUNT, 0) RECEIVED_AMOUNT, OVERRIDE_AMOUNT FROM OFFENDER_BENEFICIARIES WHERE OFFENDER_DEDUCTION_ID = :P_OFFENDER_DEDUCTION_ID AND PRIORITY =:P_PRIORITY AND ( COALESCE (RECEIVED_AMOUNT, 0) < COALESCE (AMOUNT, 0) OR (:P_RECURSIVE_FLAG = 'Y' OR :P_MONTHLY_FLAG = 'Y') ) ORDER BY AMOUNT
}

UPDATE_OFFENDER_DEDUCTIONS_FIN_OFFENDER_BENEFICIARIES {
update OFFENDER_BENEFICIARIES set OVERRIDE_AMOUNT = null, modify_datetime = current_timestamp, modify_user_id =:modifyUserId where OFFENDER_DEDUCTION_ID = :P_OFF_DED_ID 
}

UPDATE_OFFENDER_DEDUCTIONS_FIN_OFFENDER_DEDUCTIONS {
UPDATE OFFENDER_DEDUCTIONS SET DEDUCTION_AMOUNT = COALESCE (DEDUCTION_AMOUNT, 0) + :P_AMOUNT_TO_DEDUCT, MODIFY_DATE = CURRENT_TIMESTAMP , MODIFY_USER_ID = :MODIFY_USER_ID WHERE OFFENDER_DEDUCTION_ID = :P_OFF_DED_ID AND COALESCE (DEDUCTION_AMOUNT, 0) + :P_AMOUNT_TO_DEDUCT <= 9999999.99
}

L_LAST_RECURSIVE_PAID_CUR {
SELECT MONTHLY_DEDUCTION_DATE, DEDUCTION_AMOUNT FROM OFFENDER_MON_DEDUCTIONS OMD WHERE OFFENDER_DEDUCTION_ID = :P_OFFENDER_DEDUCTION_ID AND DEDUCTION_AMOUNT > 0 AND MONTHLY_DEDUCTION_DATE = ( SELECT MAX (MONTHLY_DEDUCTION_DATE) FROM OFFENDER_MON_DEDUCTIONS OMDX WHERE OMDX.OFFENDER_DEDUCTION_ID = :P_OFFENDER_DEDUCTION_ID AND OMDX.DEDUCTION_AMOUNT > 0)
}

UPDATE_OFFENDER_MON_DEDUCTIONS_FIN {
update OFFENDER_MON_DEDUCTIONS set DEDUCTION_AMOUNT = :DEDUCTION_AMOUNT + :L_AMOUNT_TO_APPLY, modify_datetime =current_timestamp , modify_user_id =:modifyUserId where OFFENDER_DEDUCTION_ID = :P_OFF_DED_ID and MONTHLY_DEDUCTION_DATE = :L_LAST_RECURSIVE_PAID_DATE 
}

INSERT_INTO_OFFENDER_MON_DEDUCTIONS_FIN {
INSERT INTO OFFENDER_MON_DEDUCTIONS (OFFENDER_DEDUCTION_ID, MONTHLY_DEDUCTION_DATE, MODIFY_DATE, MODIFY_USER_ID, CREATE_USER_ID, CREATE_DATETIME , DEDUCTION_AMOUNT) VALUES (:P_OFF_DED_ID, DATE_TRUNC('MONTH', :MONTHLY_DEDUCTION_DATE)::DATE, CURRENT_DATE::DATE, :USERNAME, :USERNAME, CURRENT_TIMESTAMP, :P_AMOUNT_TO_DEDUCT)
}
 
UPDATE_OFFENDER_MON_DEDUCTIONS_FIN_ONE {
update OFFENDER_MON_DEDUCTIONS set DEDUCTION_AMOUNT = coalesce (DEDUCTION_AMOUNT, 0) + :P_AMOUNT_TO_DEDUCT, MODIFY_DATE = CURRENT_DATE, MODIFY_USER_ID = :MODIFY_USER_ID, modify_datetime=current_timestamp where OFFENDER_DEDUCTION_ID = :P_OFF_DED_ID and MONTHLY_DEDUCTION_DATE = DATE_TRUNC('MONTH', CURRENT_DATE)::DATE 
}

MONTHS_BETWEEN_UPDATE_DEDUCTIONS_FIN {
SELECT DATE_PART ('YEAR', F) * 12 + DATE_PART ('MONTH', F) FROM AGE (:L_RECURSIVE_END_DATE,:L_RECURSIVE_START_DATE) F
}

PAYMENT_PERIOD {
SELECT OPS.PAYMENT_PLAN_ID, OPS.PAYMENT_PLAN_SEQ, OPS.PAYMENT_DATE, COALESCE (OPS.PAYMENT_AMOUNT, 0)PAYMENT_AMOUNT, COALESCE (OPS.PAID_AMOUNT, 0)PAID_AMOUNT, OPS.INFORMATION_NUMBER, OPS.GROUP_ID FROM OFFENDER_PAYMENT_SCHEDULES OPS WHERE EXISTS ( SELECT 1 FROM OFFENDER_PAYMENT_PLANS OPP WHERE OPP.INFORMATION_NUMBER = :P_INFO_NUMBER AND OPP.GROUP_ID =:P_GRP_ID AND OPP.PAYMENT_CLOSED_FLAG <> 'Y' AND OPP.OFFENDER_ID = :P_OFF_ID AND OPP.PAYMENT_PLAN_ID = OPS.PAYMENT_PLAN_ID AND OPP.PAYMENT_PLAN_SEQ = OPS.PAYMENT_PLAN_SEQ AND COALESCE(OPP.PAYMENT_COMPLETION_DATE::TEXT,'')='') ORDER BY OPS.PAYMENT_DATE, OPS.PAYMENT_PLAN_SEQ
}

PAYMENT_PERIOD_OFFENDER_PAYMENT_SCHEDULES {
update OFFENDER_PAYMENT_SCHEDULES set PAID_AMOUNT = coalesce (PAID_AMOUNT, 0) + :V_PAYMENT_AMOUNT, PAID_RECURSIVE_AMOUNT = coalesce (PAID_RECURSIVE_AMOUNT, 0) + case coalesce (:P_RECURSIVE_AMT, 0) when 0 then 0 else :V_PAYMENT_AMOUNT end, MODIFY_DATETIME = current_timestamp, MODIFY_USER_ID = :MODIFY_USER_ID where PAYMENT_PLAN_ID = :C_PAYMENT_PLAN_ID and PAYMENT_PLAN_SEQ = :C_PAYMENT_PLAN_SEQ and PAYMENT_DATE = :C_PAYMENT_DATE and MODIFY_USER_ID = :MODIFY_USER_ID 
}

CHK_DED_BEN_CUR_ONE {
SELECT COALESCE (SUM (COALESCE (PAYMENT_AMOUNT, 0) - COALESCE (PAID_AMOUNT, 0)), 0) FROM V_OFFENDER_PAYMENT_SCHEDULES WHERE PAYMENT_PLAN_ID = :C_PAYMENT_PLAN_ID
}

GET_RPERCENT_FLATFEE {
SELECT PERCENTAGE, FEE_AMOUNT FROM OFFENDER_TIER_TXN_FEE_AMOUNTS WHERE :CF_DED_AMOUNT BETWEEN FROM_AMOUNT AND TO_AMOUNT AND OFFENDER_DEDUCTION_ID = :CF_OFFENDER_DEDUCTION_ID
}
GET_OFFENDER_BENEFICIARIES_BYID{
SELECT * from OFFENDER_BENEFICIARIES WHERE BENEFICIARY_ID = :BENEFICIARY_ID;
}

L_BENEFICIARY_MON_OWING_CUR{
select SUM ( BT.TXN_ENTRY_AMOUNT * case BT.TXN_POST_USAGE when 'CR' then 1 else -1 end ) from BENEFICIARY_TRANSACTIONS BT, OFFENDER_BENEFICIARIES OB where BT.OFFENDER_DEDUCTION_ID = :P_OFFENDER_DEDUCTION_ID and BT.OFFENDER_DEDUCTION_ID = OB.OFFENDER_DEDUCTION_ID and BT.BENEFICIARY_ID = OB.BENEFICIARY_ID and OB.BENEFICIARY_ID = :P_BENEFICIARY_ID and date_trunc('Month', BT.TXN_ENTRY_DATE) = date_trunc('Month', CURRENT_TIMESTAMP)
}