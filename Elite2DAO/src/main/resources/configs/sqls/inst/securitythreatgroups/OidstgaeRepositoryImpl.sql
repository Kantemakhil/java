
OIDSTGAE_FIND_RGSTG2 {
 select
	*
from
	(
	select
		ST1.DESCRIPTION STG_LEVEL ,
		ST1.STG_CODE STG_CODE ,
		TO_CHAR(ST1.STG_ID) CODE ,
		ST1.DESCRIPTION DESCRIPTION,
		(case
			when ST1.STG_ID in (
			select
				STG_ID
			from
				SECURITY_THREAT_GROUPS
			where
				STG_LEVEL = 'GANG'
				and ACTIVE_FLAG = 'Y'
				and STG_ID <> :stgId) then 'Y'
			else 'N'
		end ) ACTIVE_FLAG
	from
		SECURITY_THREAT_GROUPS ST1
union
	select
		ST2.DESCRIPTION || '-' || ST1.DESCRIPTION STG_LEVEL ,
		ST1.STG_CODE STG_CODE ,
		TO_CHAR(ST1.STG_ID) CODE ,
		ST2.DESCRIPTION DESCRIPTION,
		(case
			when ST1.STG_ID in (
			select
				STG_ID
			from
				SECURITY_THREAT_GROUPS
			where
				STG_LEVEL = 'SET'
				and ACTIVE_FLAG = 'Y'
				and STG_ID <> :stgId) then 'Y'
			else 'N'
		end ) ACTIVE_FLAG
	from
		SECURITY_THREAT_GROUPS ST1 ,
		SECURITY_THREAT_GROUPS ST2
	where
		ST1.PARENT_STG_ID = ST2.STG_ID)A
order by
	ACTIVE_FLAG desc
}

OIDSTGAE_FIND_RGSTG1 {
 select
	*
from
	(
	select
		ST1.DESCRIPTION STG_LEVEL ,
		ST1.STG_CODE STG_CODE ,
		TO_CHAR(ST1.STG_ID) CODE ,
		ST1.DESCRIPTION DESCRIPTION,
		(case
			when ST1.STG_ID in (
			select
				STG_ID
			from
				SECURITY_THREAT_GROUPS
			where
				STG_LEVEL = 'SET'
				and ACTIVE_FLAG = 'Y'
				and STG_ID <> :stgId) then 'Y'
			else 'N'
		end ) ACTIVE_FLAG
	from
		SECURITY_THREAT_GROUPS ST1)A
order by
	ACTIVE_FLAG desc
}

OIDSTGAE_FIND_RGSTG3 {
 	select
	*
from
	(
	select
		ST1.DESCRIPTION STG_LEVEL ,
		ST1.STG_CODE STG_CODE ,
		TO_CHAR(ST1.STG_ID) CODE ,
		ST1.DESCRIPTION DESCRIPTION,
		(case
			when ST1.STG_ID in (
			select
				STG_ID
			from
				SECURITY_THREAT_GROUPS
			where
				STG_LEVEL = 'NATION'
				and ACTIVE_FLAG = 'Y'
				and STG_ID <> :stgId) then 'Y'
			else 'N'
		end ) ACTIVE_FLAG
	from
		SECURITY_THREAT_GROUPS ST1
union
	select
		ST2.DESCRIPTION || '-' || ST1.DESCRIPTION STG_LEVEL ,
		ST1.STG_CODE STG_CODE ,
		TO_CHAR(ST1.STG_ID) CODE ,
		ST1.DESCRIPTION DESCRIPTION,
		(case
			when ST1.STG_ID in (
			select
				STG_ID
			from
				SECURITY_THREAT_GROUPS
			where
				STG_LEVEL = 'GANG'
				and ACTIVE_FLAG = 'Y'
				and STG_ID <> :stgId) then 'Y'
			else 'N'
		end ) ACTIVE_FLAG
	from
		SECURITY_THREAT_GROUPS ST1 ,
		SECURITY_THREAT_GROUPS ST2
	where
		ST1.PARENT_STG_ID = ST2.STG_ID
union
	select
		ST3.DESCRIPTION || '-' || ST2.DESCRIPTION || '-' || ST1.DESCRIPTION STG_LEVEL ,
		ST1.STG_CODE STG_CODE ,
		TO_CHAR(ST1.STG_ID) CODE ,
		ST1.DESCRIPTION DESCRIPTION,
		(case
			when ST1.STG_ID in (
			select
				STG_ID
			from
				SECURITY_THREAT_GROUPS
			where
				STG_LEVEL = 'SET'
				and ACTIVE_FLAG = 'Y'
				and STG_ID <> :stgId) then 'Y'
			else 'N'
		end ) ACTIVE_FLAG
	from
		SECURITY_THREAT_GROUPS ST1 ,
		SECURITY_THREAT_GROUPS ST2 ,
		SECURITY_THREAT_GROUPS ST3
	where
		ST1.PARENT_STG_ID = ST2.STG_ID
		and ST2.PARENT_STG_ID = ST3.STG_ID)A
order by
	ACTIVE_FLAG desc
}

OIDSTGAE_FIND_RECREASON2 {
 	select
	DESCRIPTION ,
	CODE
from
	REFERENCE_CODES
where
	domain = 'STG_NONA_RSN'
	and (ACTIVE_FLAG = 'Y')
}

OIDSTGAE_FIND_RECSTG2 {
 	select
	ST1.DESCRIPTION STG_DESC ,
	ST1.STG_ID STG_ID
from
	SECURITY_THREAT_GROUPS ST1
where
	ST1.STG_LEVEL = 'NATION'
	and ST1.ACTIVE_FLAG = 'Y'
union
select
	ST2.DESCRIPTION || '-' || ST1.DESCRIPTION STG_DESC ,
	ST1.STG_ID STG_ID
from
	SECURITY_THREAT_GROUPS ST1 ,
	SECURITY_THREAT_GROUPS ST2
where
	ST1.STG_LEVEL = 'GANG'
	and ST1.ACTIVE_FLAG = 'Y'
	and ST1.PARENT_STG_ID = ST2.STG_ID
union
select
	ST3.DESCRIPTION || '-' || ST2.DESCRIPTION || '-' || ST1.DESCRIPTION STG_DESC ,
	ST1.STG_ID STG_ID
from
	SECURITY_THREAT_GROUPS ST1 ,
	SECURITY_THREAT_GROUPS ST2 ,
	SECURITY_THREAT_GROUPS ST3
where
	ST1.STG_LEVEL = 'SET'
	and ST1.ACTIVE_FLAG = 'Y'
	and ST1.PARENT_STG_ID = ST2.STG_ID
	and ST2.PARENT_STG_ID = ST3.STG_ID
}

OIDSTGAE_FIND_RECSTG {
 	SELECT ST1.DESCRIPTION STG_DESC , ST1.STG_ID STG_ID FROM SECURITY_THREAT_GROUPS ST1 WHERE ST1.STG_LEVEL = 'NATION' AND ST1.ACTIVE_FLAG = 'Y' UNION SELECT ST2.DESCRIPTION||'-'||ST1.DESCRIPTION STG_DESC , ST1.STG_ID STG_ID FROM SECURITY_THREAT_GROUPS ST1 , SECURITY_THREAT_GROUPS ST2 WHERE ST1.STG_LEVEL = 'GANG' AND ST1.ACTIVE_FLAG = 'Y' AND ST1.PARENT_STG_ID = ST2.STG_ID UNION SELECT ST3.DESCRIPTION||'-'||ST2.DESCRIPTION||'-'||ST1.DESCRIPTION STG_DESC , ST1.STG_ID STG_ID FROM SECURITY_THREAT_GROUPS ST1 , SECURITY_THREAT_GROUPS ST2 , SECURITY_THREAT_GROUPS ST3  WHERE ST1.STG_LEVEL = 'SET' AND ST1.ACTIVE_FLAG = 'Y' AND ST1.PARENT_STG_ID = ST2.STG_ID AND ST2.PARENT_STG_ID = ST3.STG_ID
}

OIDSTGAE_FIND_RECREASON {
 	select
	DESCRIPTION ,
	CODE
from
	REFERENCE_CODES
where
	domain = 'STG_ALLY_RSN'
	and ACTIVE_FLAG = 'Y'
}

OIDSTGAE_STGRLT_FIND_STG_RELATIONSHIPS {
 	SELECT STG_ID ,RELATIONSHIP_SEQ ,RELATIONSHIP_TYPE ,RELATED_STG_ID ,REASON ,EFFECTIVE_DATE ,CREATE_DATETIME ,CREATE_USER_ID ,ACTIVE_FLAG ,EXPIRY_DATE ,EXPIRED_BY ,COMMENT_TEXT ,MODIFY_DATETIME ,MODIFY_USER_ID ,SEAL_FLAG   FROM STG_RELATIONSHIPS  WHERE STG_ID = :stgId AND RELATIONSHIP_TYPE = :relationshipType ORDER BY EFFECTIVE_DATE DESC
}
OIDSTGAE_STGRLT_INSERT_STG_RELATIONSHIPS {
insert into STG_RELATIONSHIPS(STG_ID , RELATIONSHIP_SEQ , RELATIONSHIP_TYPE , RELATED_STG_ID , REASON , EFFECTIVE_DATE , ACTIVE_FLAG , EXPIRY_DATE , EXPIRED_BY , create_user_id, create_datetime, COMMENT_TEXT , modify_datetime , SEAL_FLAG ) values(:stgId , :relationshipSeq , :relationshipType , :relatedStgId , :reason , current_date , :activeFlag , :expiryDate , :expiredBy , :createUserId, current_timestamp, :commentText , null , 'N' )
}

OIDSTGAE_STGRLT_UPDATE_STG_RELATIONSHIPS {
	update STG_RELATIONSHIPS set ACTIVE_FLAG = :activeFlag , EXPIRY_DATE = :expiryDate , EXPIRED_BY = :expiredBy , COMMENT_TEXT = :commentText, modify_user_id = :modifyUserId, modify_datetime = current_timestamp where STG_ID = :stgId and RELATIONSHIP_SEQ = :relationshipSeq
}


OIDSTGAE_STG_RLT_PREINSERT_PREINSERT {
	select
	coalesce(MAX(RELATIONSHIP_SEQ + 1),
	1)
from
	STG_RELATIONSHIPS
where
	STG_ID = :stgId
	and RELATIONSHIP_TYPE = 'ALIANCE'
}

OIDSTGAE_STG_RELATIONSHIPS_PREINSERT {
	select
	coalesce(MAX(RELATIONSHIP_SEQ + 1),
	1)
from
	STG_RELATIONSHIPS
where
	STG_ID = :stgId
	and RELATIONSHIP_TYPE = 'ENEMY'
}

OIDSTGAE_OIDSTGAE_ONCOMMIT_ONCOMMIT {
	SELECT COUNT(*) FROM STG_RELATIONSHIPS WHERE STG_ID = :stgId AND RELATED_STG_ID = :relatedStgId AND RELATIONSHIP_TYPE = :relationshipType AND REASON = :reason
}

OIDSTGAE_OIDSTGAE_ONCOMMITON-COMMIT {
	SELECT COUNT(*) FROM STG_RELATIONSHIPS WHERE STG_ID = :STGID AND RELATED_STG_ID = :RELATEDSTGID AND RELATIONSHIP_TYPE = 'ENEMY' AND REASON = :REASON
}

OIDSTGAE_CREATE_FORM_GLOBALS {
	SELECT DESCRIPTION INTO V_FORM_DESC FROM OMS_MODULES WHERE MODULE_NAME = V_FORM_NAME
}

OIDSTGAE_CGWHEN_NEW_FORM_INSTANCE {
	SELECT PROFILE_VALUE FROM SYSTEM_PROFILES WHERE PROFILE_CODE = 'STG_LOV_LVL'
}

OIDSTGAE_CGWHEN_NEW_FORM_INSTANCE_STG_LOV_LVL_CUR {
	select
	case
		when :V_STG_LOV_LVL = '1' then 'RG_STG1'
		when :V_STG_LOV_LVL = '2' then 'RG_STG2'
		when :V_STG_LOV_LVL = '3' then 'RG_STG3'
		else 'RG_STG3'
	end
from dual;

}

OIDSTGAE_CGPOST_QUERY_RLT_REASON_ {
select
	DESCRIPTION
from
	REFERENCE_CODES
where
	domain = 'STG_ALLY_RSN'
	and CODE = :REASON
	and ACTIVE_FLAG = 'Y'
		
}

OIDSTGAE_CGPOST_QUERY_RLT_GROUP_ {
select
	DESCRIPTION
from
	SECURITY_THREAT_GROUPS
where
	STG_ID = :V_STG_ID
}

OIDSTGAE_CGPOST_QUERY_RLT2_GROUP_ {
	select
	DESCRIPTION
from
	SECURITY_THREAT_GROUPS
where
	STG_ID = :V_STG_ID
}

OIDSTGAE_CGPOST_QUERY_RLT2_REASON_ {
	select
	DESCRIPTION
from
	REFERENCE_CODES
where
	domain = 'STG_NONA_RSN'
	and CODE = :REASON
	and ACTIVE_FLAG = 'Y'
		
}

OIDSTGAE_ASS_ALIANCE_STGASS_ALIANCE_STG {
select
 coalesce(MAX(SR1.RELATIONSHIP_SEQ + 1),
	1)
from
	STG_RELATIONSHIPS SR1
where
	SR1.STG_ID = :relatedStgId
	and SR1.RELATIONSHIP_TYPE = 'ALIANCE'
	and not exists (
	select
		1
	from
		STG_RELATIONSHIPS SR2
	where
		SR2.STG_ID = SR1.STG_ID
		and SR2.RELATED_STG_ID = :stgId
		and SR2.RELATIONSHIP_TYPE = 'ALIANCE')
}
OIDSTGAE_DE_ACTIVATE_ALIANCE_UPDATE {
	UPDATE STG_RELATIONSHIPS  SET ACTIVE_FLAG = 'N',  EXPIRY_DATE = :expiryDate, modify_user_id = :modifyUserId,EXPIRED_BY = :expiredBy,
	modify_datetime = current_timestamp WHERE RELATED_STG_ID = :relatedStgId AND STG_ID = :stgId AND REASON = :reason
}
OIDSTGAE_RE_ACTIVATE_ALIANCE_UPDATE {
UPDATE STG_RELATIONSHIPS SET ACTIVE_FLAG = 'Y',  EXPIRY_DATE = :expiryDate,  EXPIRED_BY = :expiredBy,
	modify_user_id = :modifyUserId,modify_datetime = current_timestamp WHERE RELATED_STG_ID = :stgId
   AND STG_ID = :relatedStgId
   AND REASON = :reason
}
OIDSTGAE_DE_ACTIVE_ENEMY {
       UPDATE STG_RELATIONSHIPS sr  SET ACTIVE_FLAG = 'N', EXPIRY_DATE = :expiryDate , EXPIRED_BY = :expiredBy,modify_datetime = current_timestamp, modify_user_id = :modifyUserId
       WHERE sr.RELATIONSHIP_TYPE ='ENEMY' AND (sr.STG_ID = :stgId  AND sr.STG_ID = :relatedStgId AND sr.RELATIONSHIP_SEQ = :relationship_seq
        OR exists (select * from SECURITY_THREAT_GROUPS  where PARENT_STG_ID = :relatedStgId  and stg_id = sr.stg_id)
        OR exists (select *  from SECURITY_THREAT_GROUPS  where PARENT_STG_ID = :stgId and stg_id = sr.stg_id))
        AND (sr.RELATED_STG_ID = :relatedStgId OR sr.RELATED_STG_ID = :stgId
       OR exists (select * FROM SECURITY_THREAT_GROUPS WHERE PARENT_STG_ID = :relatedStgId  and sr.related_stg_id = stg_id)
       OR exists (select * FROM SECURITY_THREAT_GROUPS WHERE PARENT_STG_ID = :stgId and sr.related_stg_id = stg_id))
}
OIDSTGAE_RE_ACTIVE_ENEMY {
		UPDATE STG_RELATIONSHIPS sr  SET ACTIVE_FLAG = 'Y', EXPIRY_DATE =:expiryDate, EXPIRED_BY =:expiredBy WHERE sr.RELATIONSHIP_TYPE ='ENEMY' AND (sr.STG_ID = :stgId AND sr.STG_ID = :relatedStgId AND sr.RELATIONSHIP_SEQ = :relationship_seq
        OR exists (select * from SECURITY_THREAT_GROUPS  where PARENT_STG_ID = :relatedStgId  and stg_id = sr.stg_id)
        OR exists (select * from SECURITY_THREAT_GROUPS where PARENT_STG_ID = :stgId and stg_id = sr.stg_id))
        AND (sr.RELATED_STG_ID = :relatedStgId OR sr.RELATED_STG_ID = :stgId
       OR exists (select * FROM SECURITY_THREAT_GROUPS WHERE PARENT_STG_ID = :relatedStgId and sr.related_stg_id = stg_id)
       OR exists (select * FROM SECURITY_THREAT_GROUPS WHERE PARENT_STG_ID = :stgId  and sr.related_stg_id = stg_id))

}

OIDSTGAE_STG_RLT_CHECK_BOX_CHANGE {
	SELECT COUNT(*) FROM STG_RELATIONSHIPS WHERE STG_ID = :stgId AND RELATED_STG_ID = :relatedStgId	AND RELATIONSHIP_TYPE = 'ENEMY' AND ACTIVE_FLAG = 'Y'
}

OIDSTGAE_STG_RLT_GROUP_POST_CHANGE {
	SELECT COUNT(*) FROM STG_RELATIONSHIPS WHERE STG_ID = :stgId AND RELATED_STG_ID = :relatedStgId AND RELATIONSHIP_TYPE = 'ENEMY' AND ACTIVE_FLAG = 'Y'
}
OIDSTGAE_STG_RELATIONSHIPS_CHECK_BOX_CHANGE {
	SELECT COUNT(*) FROM STG_RELATIONSHIPS WHERE STG_ID = :stgId AND RELATED_STG_ID = :relatedStgId	AND RELATIONSHIP_TYPE = 'ALIANCE' AND ACTIVE_FLAG = 'Y'
}