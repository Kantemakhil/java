
OIDINCDE_AGENCYINCIDENTS_INSERT_AGENCY_INCIDENTS {
        INSERT INTO AGENCY_INCIDENTS (
		 REPORTED_STAFF_ID,
		 AGENCY_INCIDENT_ID,
		 INCIDENT_DATE,
		 INTERNAL_LOCATION_ID,
		 INCIDENT_TIME,
		 INCIDENT_TYPE,
		 INCIDENT_STATUS,
		 CREATE_DATETIME,
		 CREATE_USER_ID,
		 LOCK_FLAG,
		 INCIDENT_DETAILS,
		 REPORT_DATE,
		 REPORT_TIME,
		 AGY_LOC_ID,
		 LEVEL_CODE,
		 LOG_NO,
		 INCIDENT_TEXT,
		 SEAL_FLAG,
		 modify_datetime
	   ) VALUES (
	      :reportedStaffId,
	      :agencyIncidentId,
		  :incidentDate::date,
		  :internalLocationId,
		  :incidentTime,
		  :incidentType,
		  :incidentStatus,
		  CURRENT_TIMESTAMP,
		  :createUserId,
		  :lockFlag,
		  :incidentDetails,
		  :reportDate::date,
		  :reportTime,
		  :agyLocId,
		  :levelCode,
		  :logNo,
		  :incidentText,
		  :sealFlag ,
		  null
	  )
}		 

OIDINCDE_AGENCYINCIDENTS_UPDATE_AGENCY_INCIDENTS {
    UPDATE AGENCY_INCIDENTS SET
		  INTERNAL_LOCATION_ID =:internalLocationId,
		  INCIDENT_TYPE =:incidentType,
		  INCIDENT_DETAILS =:incidentDetails,
		  LOCK_FLAG =:lockFlag,
		  REPORTED_STAFF_ID=:reportedStaffId,
		  MODIFY_DATETIME =current_timestamp,
		  MODIFY_USER_ID =:modifyUserId
	WHERE AGENCY_INCIDENT_ID =:agencyIncidentId

}

 

OIDINCDE_AGENCYINCIDENTS_FIND_AGENCY_INCIDENTS {
     SELECT AI.REPORTED_STAFF_ID,
      		LAST_NAME || ', ' || FIRST_NAME as REPORT_STAFF_ID_AS_CODE,
		    AI.AGENCY_INCIDENT_ID,
			AI.INCIDENT_DATE,
			AI.INTERNAL_LOCATION_ID,
			AI.INCIDENT_TIME,
			AI.INCIDENT_TYPE,
            DESCRIPTION AS INCIDENT_TYPE_DESCRIPTION,
			AI.INCIDENT_STATUS,
			AI.CREATE_DATETIME,
			AI.CREATE_USER_ID,
			AI.MODIFY_USER_ID,
			AI.MODIFY_DATETIME,
			AI.LOCK_FLAG,
			AI.INCIDENT_DETAILS,
			AI.REPORT_DATE,
			AI.REPORT_TIME,
			AI.AGY_LOC_ID,
			AI.LEVEL_CODE,
			AI.LOG_NO,
			AI.INCIDENT_TEXT,
			AI.SEAL_FLAG
		FROM AGENCY_INCIDENTS AI INNER JOIN REFERENCE_CODES ON code=AI.INCIDENT_TYPE AND  DOMAIN='INC_TYPE'
		INNER JOIN STAFF_MEMBERS ON STAFF_ID=AI.REPORTED_STAFF_ID 
 }

OIDINCDE_AGYINCPARTIESOFFENDER_INSERT_AGENCY_INCIDENT_PARTIES {
        INSERT INTO AGENCY_INCIDENT_PARTIES ( AGENCY_INCIDENT_ID, PARTY_SEQ, INCIDENT_ROLE, OFFENDER_BOOK_ID, STAFF_ID, PERSON_ID, DISPOSITION_TYPE, DISPOSITION_DATE, OIC_INCIDENT_ID, COMMENT_TEXT, CREATE_DATETIME, CREATE_USER_ID, ACTION_CODE, PARTY_ADDED_DATE, SEAL_FLAG , modify_datetime ) VALUES ( :agencyIncidentId, :partySeq, :incidentRole, :offenderBookId, :staffId, :personId, :dispositionType, :dispositionDate, :oicIncidentId, :commentText, :createDateTime, :createUserId, :actionCode, :partyAddedDate, :sealFlag , null )
}

OIDINCDE_AGYINCPARTIESOFFENDER_UPDATE_AGENCY_INCIDENT_PARTIES {
     UPDATE AGENCY_INCIDENT_PARTIES  SET
     	 AGENCY_INCIDENT_ID =:agencyIncidentId,
     	  PARTY_SEQ =:partySeq,
	     INCIDENT_ROLE =:incidentRole,
		 OFFENDER_BOOK_ID =:offenderBookId,
		  STAFF_ID =:staffId,
		  PERSON_ID =:personId,
		  DISPOSITION_TYPE =:dispositionType,
		  DISPOSITION_DATE =:dispositionDate,
		  OIC_INCIDENT_ID =:oicIncidentId,
		  COMMENT_TEXT =:commentText,
		  ACTION_CODE =:actionCode,
		  PARTY_ADDED_DATE =:partyAddedDate,
		  MODIFY_DATETIME = CURRENT_TIMESTAMP,
		  MODIFY_USER_ID =:modifyUserId,
		  SEAL_FLAG = :sealFlag
	WHERE AGENCY_INCIDENT_ID =:agencyIncidentId AND PARTY_SEQ =:partySeq
}

OIDINCDE_AGYINCPARTIESOFFENDER_DELETE_AGENCY_INCIDENT_PARTIES{
       DELETE  
        FROM AGENCY_INCIDENT_PARTIES AIP    
         WHERE AIP.AGENCY_INCIDENT_ID = :agencyIncidentId  AND AIP.PARTY_SEQ = :partySeq
}    

OIDINCDE_INCIDENTSTAFF_DELETE_INCIDENT_STAFF_REPORTS{
 DELETE  
        FROM incident_staff_reports ISR    
         WHERE ISR.AGENCY_INCIDENT_ID = :agencyIncidentId  AND ISR.PARTY_SEQ = :partySeq and ISR.REPORT_DETAILS is null
}

OIDINCDE_AGYINCPARTIESOFFENDER_FIND_AGENCY_INCIDENT_PARTIES {
          SELECT AIP.AGENCY_INCIDENT_ID,
        AIP.PARTY_SEQ,
	    AIP.INCIDENT_ROLE,
		AIP.OFFENDER_BOOK_ID,
		AIP.STAFF_ID,
		AIP.PERSON_ID,
		AIP.DISPOSITION_TYPE,
		AIP.DISPOSITION_DATE,
		AIP.OIC_INCIDENT_ID,
		AIP.COMMENT_TEXT,
		AIP.CREATE_DATETIME,
		AIP.CREATE_USER_ID,
		AIP.ACTION_CODE,
		AIP.PARTY_ADDED_DATE,
		AIP.MODIFY_DATETIME,
		AIP.MODIFY_USER_ID,
		AIP.SEAL_FLAG
		FROM AGENCY_INCIDENT_PARTIES AIP
		
}

OIDINCDE_AGYINCPARTIESOFFENDER_FIND_AGENCY_STAFF_INCIDENT_PARTIES {
       SELECT AIP.AGENCY_INCIDENT_ID,
             AIP.PARTY_SEQ,
		    AIP.INCIDENT_ROLE,
			AIP.OFFENDER_BOOK_ID,
			AIP.STAFF_ID,
			AIP.PERSON_ID,
			AIP.DISPOSITION_TYPE,
			AIP.DISPOSITION_DATE,
			AIP.OIC_INCIDENT_ID,
			AIP.COMMENT_TEXT,
			AIP.CREATE_DATETIME,
			AIP.CREATE_USER_ID,
			AIP.ACTION_CODE,
			AIP.PARTY_ADDED_DATE,
			AIP.MODIFY_DATETIME,
			AIP.MODIFY_USER_ID,
			AIP.SEAL_FLAG,
		FROM AGENCY_INCIDENT_PARTIES AIP 
		
}

OIDINCDE_AGENCYINCIDENTCHARGES_INSERT_AGENCY_INCIDENT_CHARGES {
       INSERT INTO AGENCY_INCIDENT_CHARGES  (
		 AGENCY_INCIDENT_ID,
		 CHARGE_SEQ,
		 PARTY_SEQ,
		 OIC_CHARGE_ID,
		 FINDING_CODE,
		 GUILTY_EVIDENCE_TEXT,
		 REPORT_TEXT,
		 EVIDENCE_DISPOSE_TEXT,
		 CREATE_DATETIME,
		 CREATE_USER_ID,
		 LIDS_CHARGE_NUMBER,
		 CHARGED_OIC_OFFENCE_ID,
		 RESULT_OIC_OFFENCE_ID,
		 SEAL_FLAG ,
		 modify_datetime 
	   ) VALUES (
	      :agencyIncidentId,
	      :chargeSeq,
          :partySeq,	
		  :oicChargeId,
		  :findingCode,
		  :guiltyEvidenceText,
		  :reportText,
		  :evidenceDisposeText,
		  CURRENT_TIMESTAMP,
		  :createUserId,
		  :lidsChargeNumber,
		  :chargedOicOffenceId,
		  :resultOicOffenceId,
		  :sealFlag ,
		  null
	  )

}

OIDINCDE_AGENCYINCIDENTCHARGES_UPDATE_AGENCY_INCIDENT_CHARGES {
     UPDATE AGENCY_INCIDENT_CHARGES SET
	      PARTY_SEQ =:partySeq,
		  OIC_CHARGE_ID =:oicChargeId,
		  FINDING_CODE =:findingCode,
		  GUILTY_EVIDENCE_TEXT =:guiltyEvidenceText,
		  REPORT_TEXT =:reportText,
		  EVIDENCE_DISPOSE_TEXT =:evidenceDisposeText,
		  MODIFY_DATETIME = CURRENT_TIMESTAMP,
		  MODIFY_USER_ID =:modifyUserId,
		  LIDS_CHARGE_NUMBER =:lidsChargeNumber,
		  CHARGED_OIC_OFFENCE_ID =:chargedOicOffenceId,
		  RESULT_OIC_OFFENCE_ID =:resultOicOffenceId,
		  SEAL_FLAG =:sealFlag
	WHERE AGENCY_INCIDENT_ID =:agencyIncidentId AND CHARGE_SEQ =:chargeSeq
}
	
OIDINCDE_AGENCYINCIDENTCHARGES_DELETE_AGENCY_INCIDENT_CHARGES {
     DELETE 
		FROM AGENCY_INCIDENT_CHARGES AIC
		WHERE AIC.AGENCY_INCIDENT_ID = :agencyIncidentId and AIC.CHARGE_SEQ = :chargeSeq
}

OIDINCDE_AGENCYINCIDENTCHARGES_FIND_AGENCY_INCIDENT_CHARGES {
     SELECT AIC.AGENCY_INCIDENT_ID,
			AIC.CHARGE_SEQ,
			AIC.PARTY_SEQ,
			AIC.OIC_CHARGE_ID,
			AIC.FINDING_CODE,
			AIC.GUILTY_EVIDENCE_TEXT,
			AIC.REPORT_TEXT,
			AIC.EVIDENCE_DISPOSE_TEXT,
			AIC.CREATE_DATETIME,
			AIC.CREATE_USER_ID,
			AIC.MODIFY_DATETIME,
			AIC.MODIFY_USER_ID,
			AIC.LIDS_CHARGE_NUMBER,
			AIC.CHARGED_OIC_OFFENCE_ID,
			AIC.RESULT_OIC_OFFENCE_ID,
			AIC.SEAL_FLAG
		FROM AGENCY_INCIDENT_CHARGES AIC
}

OIDINCDE_AGENCYINCIDENTREPAIRS_INSERT_AGENCY_INCIDENT_REPAIRS	{
        INSERT INTO AGENCY_INCIDENT_REPAIRS	 (
		    AGENCY_INCIDENT_ID,
			REPAIR_SEQ,
			REPAIR_TYPE,
			COMMENT_TEXT,
			REPAIR_COST,
			CREATE_DATETIME,
			CREATE_USER_ID,
			SEAL_FLAG,
			modify_datetime
		 ) VALUES (
		 :agencyIncidentId,
		 :repairSeq,
		 :repairType,
		 :commentText,
		 :repairCost,
		 CURRENT_TIMESTAMP,
		 :createUserId,
		 :sealFlag,
		 null
	  )
}		 

OIDINCDE_AGENCYINCIDENTREPAIRS_UPDATE_AGENCY_INCIDENT_REPAIRS {
     UPDATE AGENCY_INCIDENT_REPAIRS SET
	      AGENCY_INCIDENT_ID =:agencyIncidentId,
		  REPAIR_SEQ =:repairSeq,
		  REPAIR_TYPE =:repairType,
		  COMMENT_TEXT =:commentText,
		  MODIFY_USER_ID =:modifyUserId,
		  MODIFY_DATETIME = CURRENT_TIMESTAMP,
		  REPAIR_COST =:repairCost,
	      SEAL_FLAG =:sealFlag
	WHERE AGENCY_INCIDENT_ID =:agencyIncidentId AND REPAIR_SEQ =:repairSeq
}

OIDINCDE_AGENCYINCIDENTREPAIRS_DELETE_AGENCY_INCIDENT_REPAIRS {
     DELETE 
		FROM AGENCY_INCIDENT_REPAIRS AIR
		WHERE AIR.AGENCY_INCIDENT_ID = :agencyIncidentId and AIR.REPAIR_SEQ = :repairSeq
}
		 
OIDINCDE_AGENCYINCIDENTREPAIRS_FIND_AGENCY_INCIDENT_REPAIRS {
     SELECT AIR.AGENCY_INCIDENT_ID,
			AIR.REPAIR_SEQ,
			AIR.REPAIR_TYPE,
			AIR.COMMENT_TEXT,
			AIR.MODIFY_USER_ID,
			AIR.MODIFY_DATETIME,
			AIR.REPAIR_COST,
			AIR.CREATE_DATETIME,
			AIR.CREATE_USER_ID,
			AIR.SEAL_FLAG
		FROM AGENCY_INCIDENT_REPAIRS AIR
		WHERE AIR.AGENCY_INCIDENT_ID = :agencyIncidentId
}

OIDINCDE_FIND_RGAGYLOCIDS {        
             SELECT AL.AGY_LOC_ID, 
                    AL.DESCRIPTION 
      FROM AGENCY_LOCATIONS AL , CASELOAD_AGENCY_LOCATIONS CAL  
      WHERE CAL.CASELOAD_ID = :caseloadId  AND AL.AGY_LOC_ID = CAL.AGY_LOC_ID    AND AL.AGENCY_LOCATION_TYPE = 'INST' AND AL.AGY_LOC_ID NOT IN ('TRN' , 'OUT' ) AND (('ENTER-QUERY' = 'ENTER-QUERY') OR ('ENTER-QUERY' = 'ENTER-QUERY' AND AL.ACTIVE_FLAG = 'Y')) ORDER BY AL.LIST_SEQ , AL.DESCRIPTION		 
		 
	}	 

OIDINCDE_FIND_REFERENCE_CODES  {
	SELECT RC.CODE , RC.DESCRIPTION, RC.ACTIVE_FLAG
	 FROM REFERENCE_CODES RC 
	 WHERE RC.DOMAIN = :domain AND (('ENTER-QUERY' = 'ENTER-QUERY') OR ('ENTER-QUERY'= 'ENTER-QUERY' AND RC.ACTIVE_FLAG = 'Y' AND RC.EXPIRED_DATE IS NULL)) and parent_code in ('CUST','BOTH') ORDER BY RC.LIST_SEQ , RC.DESCRIPTION 
	}
	
OIDINCDE_FIND_RGLEVELINTERNALLOCATIONIDS  {
	SELECT C.INTERNAL_LOCATION_ID ,
	       C.INTERNAL_LOCATION_CODE ,
	       C.DESCRIPTION  
   FROM INT_LOC_USAGE_LOCATIONS A , INTERNAL_LOCATION_USAGES B , AGENCY_INTERNAL_LOCATIONS C 
   WHERE A.INTERNAL_LOCATION_USAGE_ID = B.INTERNAL_LOCATION_USAGE_ID    AND B.INTERNAL_LOCATION_USAGE = 'OCCUR'  
   AND B.AGY_LOC_ID =:agyLocId       AND A.INTERNAL_LOCATION_ID = C.INTERNAL_LOCATION_ID    AND ((C.ACTIVE_FLAG = 'Y'    AND C.DEACTIVATE_DATE IS NULL )    OR ('ENTER-QUERY' = 'ENTER-QUERY' ) ) 
	}
	
OIDINCDE_FIND_RGREPORTEDSTAFFIDS  { 
select SM.LAST_NAME || ', ' || SM.FIRST_NAME STAFF_NAME, SM.STAFF_ID from STAFF_MEMBERS SM where SM.STAFF_ID in ( select SAC.STAFF_ID from STAFF_ACCESSIBLE_CASELOADS SAC where SAC.CASELOAD_ID = :caseloadId ) and SM.STATUS = 'ACTIVE' and SM.SUSPENDED_FLAG = 'N' and SM.TERMINATION_DATE is null order by SM.LAST_NAME , SM.FIRST_NAME
	}
	
OIDINCDE_FIND_RGOICOFFENCECODES  {	
select
	OC.OIC_OFFENCE_CODE , 
	       OMS_MISCELLANEOUS_GETDESCCODE ( 'OIC_OFN_TYPE' ,
	OC.OIC_OFFENCE_TYPE) OIC_OFFENCE_TYPE, 
	       OC.DESCRIPTION DESCRIPTION, 
	       OC.OIC_OFFENCE_ID, 
	       OC.OIC_OFFENCE_CATEGORY
from
	OIC_OFFENCES OC
where
	('ENTER-QUERY' = 'ENTER-QUERY'
		or ACTIVE_FLAG = 'Y')
	AND EXPIRY_DATE IS NULL 
	and OC.START_DATE::date <= :startDate::date
	and coalesce(OC.END_DATE::date , '01/01/9000'::date) >=:endDate::date
order by
	OC.LIST_SEQ ,
	OC.DESCRIPTION
}
	
OIDINCDE_FIND_OFFENDERS	{
	
     SELECT LAST_NAME,
            FIRST_NAME,
            OFFENDER_ID_DISPLAY 
     FROM OFFENDERS 
     WHERE OFFENDER_ID in (SELECT OFFENDER_ID FROM OFFENDER_BOOKINGS WHERE OFFENDER_BOOK_ID = :offenderBookId)	
	}
	
	
OIDINCDE_FIND_SEARCHSTAFFMEMBERS {
	  SELECT LAST_NAME, 
	         FIRST_NAME,
	         STAFF_ID 
	  FROM STAFF_MEMBERS 
	  WHERE STAFF_ID = :staffId 
}	
	
	
OIDINCDE_FIND_SEARCHEVIDENCETYPE {
      SELECT DESCRIPTION ,
             CODE  
      FROM REFERENCE_CODES  
      WHERE DOMAIN = :domain and CODE = :code ORDER BY list_seq
}	
	
OIDINCDE_AGENCYINCIDENTPARTIES_FIND_AGENCY_INCIDENT_PARTIES_OIC {	
      SELECT coalesce(MAX(OIC_INCIDENT_ID),0) + 1 
      FROM   AGENCY_INCIDENT_PARTIES	
}	

OIDINCDE_AGENCYINCIDENTPARTIES_FIND_AGENCY_INCIDENT_PARTIES_SEQ {
	  SELECT coalesce(MAX(PARTY_SEQ),0) + 1 
	  FROM   AGENCY_INCIDENT_PARTIES 
	  WHERE AGENCY_INCIDENT_ID = :agencyIncidentId
}	  

OIDINCDE_AGENCYINCIDENTS_FIND_AGENCY_INCIDENTS_SEQ {
	  SELECT coalesce(MAX(AGENCY_INCIDENT_ID),0) + 1 
	  FROM  AGENCY_INCIDENTS
}

OIDINCDE_AGENCYINCIDENTREPAIRS_FIND_AGENCY_INCIDENT_REPAIR_SEQ { 
      SELECT coalesce(MAX(REPAIR_SEQ),0) + 1 
      FROM   AGENCY_INCIDENT_REPAIRS 
      WHERE AGENCY_INCIDENT_ID = :agencyIncidentId 
}

OIDINCDE_AGENCY_INCIDENTS_ONCHECKDELETEMASTER_AGY_INC_PARTIES_CUR { 
      SELECT 1 
      FROM AGENCY_INCIDENT_PARTIES A 
      WHERE A.AGENCY_INCIDENT_ID = :agencyIncidentId 
}

OIDINCDE_AGENCY_INCIDENTS_ONCHECKDELETEMASTER_AGENCY {
      SELECT 1 
      FROM AGENCY_INCIDENT_REPAIRS A 
      WHERE A.AGENCY_INCIDENT_ID = :agencyIncidentId
}

OIDINCDE_AGY_INC_PARTIES_OFFENDER_ONCHECKDELETEMASTER_AGENCY {
      SELECT 1 
      FROM AGENCY_INCIDENT_CHARGES A 
      WHERE A.AGENCY_INCIDENT_ID = :agencyIncidentId AND A.PARTY_SEQ = :partySeq
}

OIDINCDE_AGY_INC_PARTIES_OFFENDER_PREINSERT {
      SELECT COUNT(*) 
      FROM AGENCY_INCIDENT_PARTIES 
      WHERE OFFENDER_BOOK_ID   = :OFFENDER_BOOK_ID AND  AGENCY_INCIDENT_ID = :AGENCY_INCIDENT_ID
}

OIDINCDE_AGENCY_INCIDENT_CHARGES_POSTQUERY {
      SELECT OIC_OFFENCE_CATEGORY 
      INTO AGENCY_INCIDENT_CHARGES.NBT_OIC_OFFENCE_CATEGORY 
      FROM OIC_OFFENCES 
      WHERE OIC_OFFENCE_CODE = AGENCY_INCIDENT_CHARGES.NBT_CHG_OIC_OFFENCE_CODE
}

OIDINCDE_SET_GLOBAL_CASELOAD_ID_WORKING_CASELOAD_CUR {
      SELECT SM.WORKING_CASELOAD_ID 
      FROM STAFF_MEMBERS SM 
      WHERE SM.USER_ID = USER
}

OIDINCDE_OIDINCDE_STATE_ADM_USR_CSR { 
      SELECT 'Y' 
      FROM STAFF_MEMBERS SM, OMS_ROLES OMSR, STAFF_MEMBER_ROLES SMR 
      WHERE SM.USER_ID = :USERNAME AND SM.STAFF_ID = SMR.STAFF_ID AND SMR.ROLE_ID = OMSR.ROLE_ID AND OMSR.ROLE_NAME = 'OIC_ADMIN'
}

OIDINCDE_OIDINCDE_STATE {
     SELECT AGY_LOC.AGY_LOC_ID, 
            AGY_LOC.DESCRIPTION
     FROM AGENCY_LOCATIONS AGY_LOC, CASELOAD_AGENCY_LOCATIONS CAL 
     WHERE CAL.CASELOAD_ID = :caseloadId AND AGY_LOC.AGY_LOC_ID = CAL.AGY_LOC_ID AND AGY_LOC.AGENCY_LOCATION_TYPE = 'INST' AND AGY_LOC.AGY_LOC_ID NOT IN ('TRN', 'OUT') AND AGY_LOC.ACTIVE_FLAG = 'Y'
}

OIDINCDE_SET_UPDATED_INCIDENT_DETAILS_UPD_INC_DET_CUR {  
          SELECT AI.INCIDENT_DETAILS 
          FROM AGENCY_INCIDENTS AI 
          WHERE AI.AGENCY_INCIDENT_ID = :agencyIncidentId
}

OIDINCDE_CHECK_UNLOCK_ACCESS_SP_PROFILE_CUR {
          SELECT SP.PROFILE_VALUE, SP.PROFILE_VALUE_2 
          FROM SYSTEM_PROFILES SP 
          WHERE SP.PROFILE_TYPE = 'CLIENT' AND SP.PROFILE_CODE = 'INC_ROLE_UNL'
}

OIDINCDE_CHECK_UNLOCK_ACCESS_CHECK_UNLOCK_ACCESS {  
 IS SELECT 'Y' 
              FROM STAFF_MEMBER_ROLES 
              WHERE ROLE_CODE IN (P_VALUE3) OMS_MISCELLANEOUS_GET_PROFILE_VALUE ('CLIENT', 'INC_ROLE_UNL') AND STAFF_ID = TAG_UTILS.GET_STAFF_ID(USER)
}

OIDINCDE_CHECK_UNLOCK_ACCESS_CHECK_ROLE_ACCESS {  
             SELECT ROLE_CODE 
             FROM OMS_ROLES 
             WHERE ROLE_ID IN (P_VALUE,P_VALUE2)
}
OIDINCDE_STAFF_ID {
       SELECT   SM.STAFF_ID,LAST_NAME,FIRST_NAME FROM STAFF_MEMBERS SM WHERE  USER_ID=:userId
}
Pre_INSERT_REPAIR_SEQ {
SELECT coalesce(MAX(REPAIR_SEQ),0) + 1 FROM   AGENCY_INCIDENT_REPAIRS WHERE AGENCY_INCIDENT_ID =:agencyIncidentId
}

Pre_INSERT_CHARGE_SEQ {
SELECT coalesce(MAX(CHARGE_SEQ),0) + 1 FROM   AGENCY_INCIDENT_CHARGES WHERE AGENCY_INCIDENT_ID =:agencyIncidentId
}

OIINAMES_NAMESRCH_FIND_V_NAME_SEARCH {
 	SELECT LAST_NAME ,FIRST_NAME,OFFENDER_BOOK_ID ,OFFENDER_ID_DISPLAY  FROM V_NAME_SEARCH_fn(:USERID) V_NAME_SEARCH  where OFFENDER_ID_DISPLAY=:OFFENDER_ID_DISPLAY
}

OIINAMES_NAMESRCH_SEARCH_V_NAME_SEARCH_INCIDENT { 	
SELECT O.OFFENDER_ID_DISPLAY, O.LAST_NAME, O.FIRST_NAME
           FROM OFFENDER_BOOKINGS OB, OFFENDERS O
          WHERE OB.OFFENDER_BOOK_ID = :OFFENDER_BOOK_ID
            AND OB.OFFENDER_ID = O.OFFENDER_ID
}
CHAREGE_DATA{
SELECT OC.OIC_OFFENCE_CODE ,
OMS_MISCELLANEOUS_GETDESCCODE ( 'OIC_OFN_TYPE' , OC.OIC_OFFENCE_TYPE) as OIC_OFFENCE_TYPE ,
OC.DESCRIPTION DESCRIPTION,
OC.OIC_OFFENCE_ID,
OC.OIC_OFFENCE_CATEGORY
FROM OIC_OFFENCES OC

}

OCUOICCH_AGY_INCIDENT_CHG_POSTQUERY {
 SELECT OIC_OFFENCE_CODE,DESCRIPTION,OMS_MISCELLANEOUS_GETDESCCODE('OIC_OFN_TYPE',OIC_OFFENCE_TYPE) OIC_OFFENCE_TYPE,OIC_OFFENCE_CATEGORY FROM OIC_OFFENCES WHERE OIC_OFFENCE_ID = :OIC_OFFENCE_ID
}

NEXT_ID_GET_AGENCY_INCIDENT_ID {
SELECT coalesce (MAX(agency_incident_id), 0) + 1 FROM AGENCY_INCIDENTS
}

OIDINCDE_DATA_SIGNIFICANT_INCIDENT{
select
	ASI.AGENCY_INCIDENT_ID,
	ASI.SIGNIFICANCE_TYPE,
	ASI.MODIFY_USER_ID,
	ASI.CREATE_DATETIME,
	ASI.CREATE_USER_ID,
	ASI.MODIFY_DATETIME,
	ASI.SEAL_FLAG,
	ASI.ENTRY_DATE,
	ASI.recorded_by_staff_id,
	(select SM.LAST_NAME || ', ' || SM.FIRST_NAME STAFF_NAME from STAFF_MEMBERS SM where SM.STAFF_ID=ASI.recorded_by_staff_id) as MODIFIED_STAFF_ID 
from
	AGENCY_SIGNIFICANT_INCIDENTS ASI
}

OIDINCDE_INSERT_VALUES_SIGNIFICANT_INCIDENT{
INSERT INTO AGENCY_SIGNIFICANT_INCIDENTS (AGENCY_INCIDENT_ID, SIGNIFICANCE_TYPE, recorded_by_staff_id,SEAL_FLAG,ENTRY_DATE,CREATE_DATETIME,
			CREATE_USER_ID) VALUES (:agencyIncidentId,:significanceType,:recordedByStaffId,:sealFlag,:entryDate,CURRENT_TIMESTAMP,
		 :createUserId)
}

OIDINCDE_UPDATE_SIGNIFICANT_INCIDENT{
UPDATE AGENCY_SIGNIFICANT_INCIDENTS SET AGENCY_INCIDENT_ID=:agencyIncidentId,SIGNIFICANCE_TYPE=:significanceType,MODIFY_USER_ID=:modifyUserId,ENTRY_DATE=:entryDate,
MODIFY_DATETIME =current_timestamp, recorded_by_staff_id=:recordedByStaffId WHERE AGENCY_INCIDENT_ID=:agencyIncidentId AND SIGNIFICANCE_TYPE=:significanceType 
}

OIDINCDE_DELETE_SIGNIFICANT_INCIDENT{
DELETE FROM AGENCY_SIGNIFICANT_INCIDENTS WHERE AGENCY_INCIDENT_ID=:agencyIncidentId AND SIGNIFICANCE_TYPE=:significanceType
}

GET_NEXT_PARTY_SEQ{
SELECT coalesce ( MAX ( AIP.PARTY_SEQ ), 0 ) + 1 PARTY_SEQ FROM AGENCY_INCIDENT_PARTIES AIP WHERE AIP.AGENCY_INCIDENT_ID = :P_AGENCY_INCIDENT_ID
}

OIDINCDE_FIND_SEARCHSTAFFMEMBERS_BY_USERID{
	  SELECT LAST_NAME, 
	         FIRST_NAME,
	         STAFF_ID 
	  FROM STAFF_MEMBERS 
	  WHERE user_id = :userId 
}

OIDINCDE_GET_ENHANCED_STAF_REPORTER {
select 'X' from STAFF_MEMBER_ROLES where staff_id  = :staffId and role_code = 'STAFF_ENHAN'
}

OIDINCDE_UPDATE_INCIDENT_STAFF_REPORT_REPORT_TYPE {
update incident_staff_reports set report_type = :staffReportType, MODIFY_DATETIME = :modifyDateTime,MODIFY_USER_ID = :modifyUserId where  agency_incident_id =:agencyIncidentId and 
PARTY_SEQ = :partySeq 
}

OIDINCDE_INSERT_OFFENDER_FOLLOW_UP_DATA {
 INSERT INTO INCIDENT_FOLLOW_UP_DETAILS	 (
            INCIDENT_FOLLOW_UP_ID,
		    AGENCY_INCIDENT_ID,
			POLICY,
			COMPLIANCE,
			COMMENT_TEXT,
			CREATE_DATETIME,
			CREATE_USER_ID,
			SEAL_FLAG
		 ) VALUES (
		 nextval('INCIDENT_FOLLOW_UP_ID'),
		 :agencyIncidentId,
		 :policy,
		 :compliance,
		 :commentText,
		 CURRENT_TIMESTAMP,
		 :createUserId,
		 :sealFlag
	  )
}

OIDINCDE_UPDATE_OFFENDER_FOLLOW_UP_DATA {
update INCIDENT_FOLLOW_UP_DETAILS set POLICY=:policy,COMPLIANCE=:compliance,COMMENT_TEXT=:commentText,MODIFY_USER_ID = :modifyUserId, MODIFY_DATETIME = CURRENT_TIMESTAMP  where INCIDENT_FOLLOW_UP_ID=:incidentFollowUpId
}

OIDINCDE_DELETE_OFFENDER_FOLLOW_UP_DATA {
delete from INCIDENT_FOLLOW_UP_DETAILS where INCIDENT_FOLLOW_UP_ID=:incidentFollowUpId
}
OIDINCDE_GET_OFFENDER_FOLLOW_UP_GRID_DATA {
select * from INCIDENT_FOLLOW_UP_DETAILS where AGENCY_INCIDENT_ID=:agencyIncidentId order by MODIFY_DATETIME DESC nulls  last
}

OIDINCDE_INCIDENTSTAFF_DELETE_INCIDENT_STAFF_REPORTS{
 DELETE  
        FROM incident_staff_reports ISR    
         WHERE ISR.AGENCY_INCIDENT_ID = :agencyIncidentId  AND ISR.PARTY_SEQ = :partySeq and ISR.REPORT_DETAILS is null
}
OIDINCDE_DELETE_INCIDENT_STAFF_FORCES{
delete from incident_staff_forces where  incident_report_id = :incidentReportId  
}

OIDINCDE_DELETE_INCIDENT_STAFF_EQUIPMENT{
delete from incident_staff_equipments where incident_report_id = :incidentReportId 
}

OIDINCDE_AGYINCPARTIES_STAFF_FIND_AGENCY_INCIDENT_PARTIES {
select aip.*,isr.incident_report_id,
isr.report_type,
isr.report_time,
isr.report_details,
isr.reporter_staff_id,
isr.rep_complet_flag,
isr.lock_flag,
case when (select count(*) from incident_staff_forces isf where isf.incident_report_id=isr.incident_report_id ) > 0 then 'true' else 'false' end as force_used_flag,
isr.locked_by,
isr.lock_reference_time from agency_incident_parties aip,incident_staff_reports isr where aip.agency_incident_id =:agencyIncidentId 
and aip.agency_incident_id  = isr.agency_incident_id and aip.party_seq = isr.party_seq
}
GET_STAFF_FORCE_COUNT{
SELECT count(*) from INCIDENT_STAFF_FORCES WHERE INCIDENT_REPORT_ID=:incidentReportId and List_seq=:partySeq
}

GET_STAFF_EQUIPMENT_COUNT{
SELECT count(*) from INCIDENT_STAFF_EQUIPMENTS WHERE INCIDENT_REPORT_ID=:incidentReportId 
}

OIDINCDE_GET_SYSTEM_PROFILE_CODE{
select profile_value from system_profiles where profile_code = 'CREATE_OIC'
}
OIDINCDE_FIND_COMMUNITY_OFFICES_DATA {
 SELECT AL.AGY_LOC_ID, 
                    AL.DESCRIPTION 
      FROM AGENCY_LOCATIONS AL , CASELOAD_AGENCY_LOCATIONS CAL  
      WHERE CAL.CASELOAD_ID = :caseloadId  AND AL.AGY_LOC_ID = CAL.AGY_LOC_ID    AND AL.AGY_LOC_ID NOT IN ('TRN' , 'OUT' ) AND (('ENTER-QUERY' = 'ENTER-QUERY') OR ('ENTER-QUERY' = 'ENTER-QUERY' AND AL.ACTIVE_FLAG = 'Y')) ORDER BY AL.LIST_SEQ , AL.DESCRIPTION		 
}
OIDINCDE_FIND_REFERENCE_CODES_COMM_CASELOAD  {
	SELECT RC.CODE , RC.DESCRIPTION, RC.ACTIVE_FLAG
	 FROM REFERENCE_CODES RC 
	 WHERE RC.DOMAIN = :domain AND (('ENTER-QUERY' = 'ENTER-QUERY') OR ('ENTER-QUERY'= 'ENTER-QUERY' AND RC.ACTIVE_FLAG = 'Y' AND RC.EXPIRED_DATE IS NULL)) and parent_code in ('COMM','BOTH') ORDER BY RC.LIST_SEQ , RC.DESCRIPTION 
	}
	
	
OIDINCDE_FIND_RGROLESTAFFIDS{
select
	SM.LAST_NAME || ', ' || SM.FIRST_NAME STAFF_NAME,
	SM.STAFF_ID
from
	STAFF_MEMBERS SM
where
	SM.STAFF_ID in (
	select
		SAC_STAFF_ID
	from
		STAFF_LOCATION_ROLES SAC where cal_agy_loc_id in (select agy_loc_id from caseload_agency_locations cal where caseload_id = :caseloadId and agy_loc_id=:agyLocId) )
	and SM.STATUS = 'ACTIVE'
	and SM.SUSPENDED_FLAG = 'N'
	and SM.TERMINATION_DATE is null
order by
	SM.LAST_NAME ,
	SM.FIRST_NAME;
	}
	
OIDINCDE_GET_USER_ROLES
{
select role_code  from staff_member_roles smr where staff_id =(select staff_id  from staff_members sm where user_id =:userID)
}
OIDINCDE_GET_REPORT_TYPE_COUNT_IN_STAFF_REPORT_MAINT{
 SELECT COUNT(*)  FROM   staff_reports_maint WHERE   report_type = :report_type;
}

OIDINCDE_GET_PROFILE_CODE_FOR_STAFF_INVOLVEMENT{
SELECT PROFILE_VALUE FROM SYSTEM_PROFILES WHERE PROFILE_TYPE='CLIENT' and PROFILE_CODE='INC_STF_INV'
}
OIDINCDE_FIND_ALL_AGYLOC_RGROLESTAFFIDS{
select
	SM.LAST_NAME || ', ' || SM.FIRST_NAME STAFF_NAME,
	SM.STAFF_ID
from
	STAFF_MEMBERS SM
where
	SM.STAFF_ID in (
	select
		SAC_STAFF_ID
	from
		STAFF_LOCATION_ROLES SAC where cal_agy_loc_id in 
		(select agy_loc_id from agency_locations where  active_flag = 'Y' and agency_location_type IN 
	(select agency_location_type from agency_locations al where agy_loc_id =:agyLocId)
))
	and SM.STATUS = 'ACTIVE'
	and SM.SUSPENDED_FLAG = 'N'
	and SM.TERMINATION_DATE is null
order by
	SM.LAST_NAME ,
	SM.FIRST_NAME
	}