
OIDSTABS_FIND_RGSUBTYPE {
 select movement_reason_code CODE , DESCRIPTION ,LIST_SEQ, ACTIVE_FLAG from movement_reasons mr where movement_type=:movementType;
}

OIDSTABS_FIND_RGESCORT {
 	SELECT REF_CODE1.CODE CODE ,        REF_CODE1.DESCRIPTION  DESCRIPTION, LIST_SEQ   FROM REFERENCE_CODES REF_CODE1  WHERE DOMAIN = 'ESCORT'     AND ((ACTIVE_FLAG = 'Y'    AND EXPIRED_DATE IS NULL ) OR :MODE = 'ENTER-QUERY' )  ORDER BY REF_CODE1.LIST_SEQ , DESCRIPTION
}

OIDSTABS_FIND_RGTRANSPORT {
 	SELECT REF_CODE1.CODE CODE ,        REF_CODE1.DESCRIPTION  DESCRIPTION, LIST_SEQ   FROM REFERENCE_CODES REF_CODE1  WHERE DOMAIN = 'TA_TRANSPORT'    AND ((ACTIVE_FLAG = 'Y'    AND EXPIRED_DATE IS NULL ) OR '' = 'ENTER-QUERY' )  ORDER BY REF_CODE1.LIST_SEQ , DESCRIPTION
}

OIDSTABS_FIND_RGSTATUS {
 	SELECT DESCRIPTION ,CODE, LIST_SEQ FROM   REFERENCE_CODES RC WHERE   DOMAIN = 'TA_STATUS'  AND EXISTS(SELECT RC1.CODE  FROM   REFERENCE_CODES RC1 WHERE   DOMAIN = 'EVENT_STS' AND RC.CODE = RC1.CODE    ) AND ((RC.ACTIVE_FLAG = 'Y'    AND RC.EXPIRED_DATE IS NULL  ) OR :MODE = 'ENTER-QUERY' )  ORDER BY RC.LIST_SEQ , DESCRIPTION
}

OIDSTABS_FIND_RGCORPLOC {
 	SELECT C.CORPORATE_NAME DESCRIPTION , A.ADDRESS_ID ADDRESS_ID , A.SUITE_NUMBER , A.STREET_INFORMATION , A.CITY_NAME , A.PROV_STATE_DESC , A.ZIP_POSTAL_CODE , A.COUNTRY FROM CORPORATES C , V_CORPORATE_ADDRESSES A WHERE C.CORPORATE_ID = A.CORPORATE_ID
}

OIDSTABS_FIND_RGAGYLOC {
 	select AL.DESCRIPTION AGY_LOC_ID_DESC , AL.AGY_LOC_ID AGY_LOC_ID, ADR.SUITE_NUMBER , ADR.STREET_INFORMATION , ADR.CITY_NAME , ADR.PROV_STATE_DESC , ADR.ZIP_POSTAL_CODE , ADR.ADDRESS_ID from AGENCY_LOCATIONS AL , V_AGENCY_ADDRESSES ADR where AL.AGY_LOC_ID = ADR.AGY_LOC_ID and AL.AGY_LOC_ID not in ('OUT' , 'TRN' ) and (coalesce (DEACTIVATION_DATE::timestamp, '2020-12-12')= '2020-12-12' ) or DEACTIVATION_DATE > current_timestamp and PRIMARY_FLAG = 'Y'
}

OIDSTABS_FIND_RGOTHLOC {
 	SELECT SUBSTR(LAST_NAME||', '||FIRST_NAME ,1 ,100 ) DESCRIPTION , ADDRESS_ID ADDRESS_ID , V.SUITE_NUMBER , V.STREET_INFORMATION , V.CITY_NAME , V.PROV_STATE_DESC , V.ZIP_POSTAL_CODE , V.COUNTRY COUNTRY FROM OFFENDERS O , V_ADDRESS_USAGES V WHERE O.OFFENDER_ID = V.OWNER_ID AND V.OWNER_ID = :ROOTOFFENDERID::bigint AND ADDRESS_USAGE = 'TAP'
}

OIDSTABS_OFFSCHEDULES_FIND_V_OFFENDER_ALL_SCHEDULES {
 	SELECT EVENT_ID ,OFFENDER_BOOK_ID ,IN_OUT_STATUS ,BOOKING_NO ,BOOKING_ACTIVE_FLAG ,OFFENDER_ID ,OFFENDER_ID_DISPLAY ,OFFENDER_LAST_NAME ,OFFENDER_FIRST_NAME ,EVENT_DATE ,START_TIME ,END_TIME ,EVENT_CLASS ,EVENT_TYPE ,EVENT_TYPE_DESC ,EVENT_SUB_TYPE ,EVENT_SUB_TYPE_DESC ,ACTIVE_FLAG ,EVENT_STATUS ,EVENT_STATUS_DESC ,EVENT_OUTCOME ,EVENT_OUTCOME_DESC ,BUSY_DATE_FLAG ,OUTCOME_REASON_CODE ,REFERENCE_ID ,APPLICATION_DATE ,APPLICATION_TIME ,RETURN_DATE ,RETURN_TIME ,COMMENT_TEXT ,DETAILS ,AGY_LOC_ID ,AGY_LOC_DESC ,LIVING_UNIT_ID ,LIVING_UNIT_DESC ,LU_LEVEL_1_CODE ,LU_LEVEL_2_CODE ,LU_LEVEL_3_CODE ,LU_LEVEL_4_CODE ,AGENCY_IML_ID ,AGENCY_IML_DESC ,AGENCY_IML_LEVEL_1_CODE ,AGENCY_IML_LEVEL_2_CODE ,AGENCY_IML_LEVEL_3_CODE ,TO_AGY_LOC_ID ,TO_AGY_LOC_DESC ,TO_LOC ,TO_LOC_DESC ,ESCORT_CODE ,ESCORT_DESC ,DIRECTION_CODE ,SCHEDULE_MOVEMENT_TIME ,FROM_CITY_CODE ,FROM_CITY_NAME ,TO_CITY_CODE ,TO_CITY_NAME ,TO_INTERNAL_LOCATION_ID ,TO_INTERNAL_LOCATION_DESC ,TO_INT_LOC_LEVEL_1_CODE ,TO_INT_LOC_LEVEL_2_CODE ,TO_INT_LOC_LEVEL_3_CODE ,TO_INT_LOC_USER_DESC ,CREDITED_HOURS ,ENGAGEMENT_CODE ,UNDERSTANDING_CODE ,PIECE_WORK ,IN_TIME ,OUT_TIME ,PERFORMANCE_CODE ,TRANSPORT_CODE ,SICK_NOTE_EXPIRY_DATE ,SICK_NOTE_RECEIVED_DATE ,UNEXCUSED_ABSENCE_FLAG ,UNPAID_WORK_ACTION ,UNPAID_WORK_BEHAVIOUR ,AGREED_TRAVEL_HOUR ,CHECK_BOX_1 ,CHECK_BOX_2 ,HIDDEN_COMMENT_TEXT ,IN_CHARGE_STAFF_ID ,IN_CHARGE_STAFF_NAME ,OFF_PRGREF_ID ,CONTACT_PERSON_NAME ,TO_ADDRESS_OWNER_CLASS ,TO_ADDRESS_ID ,UNPAID_WORK_SUPERVISOR ,TA_ID ,RECORD_SOURCE ,CHECK_SUM ,PROV_STATE_CODE ,PROV_STATE_DESC ,SCHEDULED_TRIP_ID ,EVENT_PURPOSE
 	 FROM V_OFFENDER_ALL_SCHEDULES WHERE  OFFENDER_BOOK_ID = :OFFENDER_BOOK_ID AND RETURN_DATE IS NOT NULL ORDER BY APPLICATION_DATE DESC, APPLICATION_TIME DESC
}
OIDSTABS_OFFSCHEDULES_INSERT_V_OFFENDER_ALL_SCHEDULES {
	INSERT INTO V_OFFENDER_ALL_SCHEDULES(EVENT_ID ,OFFENDER_BOOK_ID ,IN_OUT_STATUS ,BOOKING_NO ,BOOKING_ACTIVE_FLAG ,OFFENDER_ID ,OFFENDER_ID_DISPLAY ,OFFENDER_LAST_NAME ,OFFENDER_FIRST_NAME ,EVENT_DATE ,START_TIME ,END_TIME ,EVENT_CLASS ,EVENT_TYPE ,EVENT_TYPE_DESC ,EVENT_SUB_TYPE ,EVENT_SUB_TYPE_DESC ,ACTIVE_FLAG ,EVENT_STATUS ,EVENT_STATUS_DESC ,EVENT_OUTCOME ,EVENT_OUTCOME_DESC ,BUSY_DATE_FLAG ,OUTCOME_REASON_CODE ,REFERENCE_ID ,APPLICATION_DATE ,APPLICATION_TIME ,RETURN_DATE ,RETURN_TIME ,COMMENT_TEXT ,DETAILS ,AGY_LOC_ID ,AGY_LOC_DESC ,LIVING_UNIT_ID ,LIVING_UNIT_DESC ,LU_LEVEL_1_CODE ,LU_LEVEL_2_CODE ,LU_LEVEL_3_CODE ,LU_LEVEL_4_CODE ,AGENCY_IML_ID ,AGENCY_IML_DESC ,AGENCY_IML_LEVEL_1_CODE ,AGENCY_IML_LEVEL_2_CODE ,AGENCY_IML_LEVEL_3_CODE ,TO_AGY_LOC_ID ,TO_AGY_LOC_DESC ,TO_LOC ,TO_LOC_DESC ,ESCORT_CODE ,ESCORT_DESC ,DIRECTION_CODE ,SCHEDULE_MOVEMENT_TIME ,FROM_CITY_CODE ,FROM_CITY_NAME ,TO_CITY_CODE ,TO_CITY_NAME ,TO_INTERNAL_LOCATION_ID ,TO_INTERNAL_LOCATION_DESC ,TO_INT_LOC_LEVEL_1_CODE ,TO_INT_LOC_LEVEL_2_CODE ,TO_INT_LOC_LEVEL_3_CODE ,TO_INT_LOC_USER_DESC ,CREDITED_HOURS ,ENGAGEMENT_CODE ,UNDERSTANDING_CODE ,PIECE_WORK ,IN_TIME ,OUT_TIME ,PERFORMANCE_CODE ,TRANSPORT_CODE ,SICK_NOTE_EXPIRY_DATE ,SICK_NOTE_RECEIVED_DATE ,UNEXCUSED_ABSENCE_FLAG ,UNPAID_WORK_ACTION ,UNPAID_WORK_BEHAVIOUR ,AGREED_TRAVEL_HOUR ,CHECK_BOX_1 ,CHECK_BOX_2 ,HIDDEN_COMMENT_TEXT ,IN_CHARGE_STAFF_ID ,IN_CHARGE_STAFF_NAME ,OFF_PRGREF_ID ,CONTACT_PERSON_NAME ,TO_ADDRESS_OWNER_CLASS ,TO_ADDRESS_ID ,UNPAID_WORK_SUPERVISOR ,TA_ID ,RECORD_SOURCE ,CHECK_SUM ,PROV_STATE_CODE ,PROV_STATE_DESC ,SCHEDULED_TRIP_ID ) VALUES(:eventId ,:offenderBookId ,:inOutStatus ,:bookingNo ,:bookingActiveFlag ,:offenderId ,:offenderIdDisplay ,:offenderLastName ,:offenderFirstName ,:eventDate ,:startTime ,:endTime ,:eventClass ,:eventType ,:eventTypeDesc ,:eventSubType ,:eventSubTypeDesc ,:activeFlag ,:eventStatus ,:eventStatusDesc ,:eventOutcome ,:eventOutcomeDesc ,:busyDateFlag ,:outcomeReasonCode ,:referenceId ,:applicationDate ,:applicationTime ,:returnDate ,:returnTime ,:commentText ,:details ,:agyLocId ,:agyLocDesc ,:livingUnitId ,:livingUnitDesc ,:luLevel1Code ,:luLevel2Code ,:luLevel3Code ,:luLevel4Code ,:agencyImlId ,:agencyImlDesc ,:agencyImlLevel1Code ,:agencyImlLevel2Code ,:agencyImlLevel3Code ,:toAgyLocId ,:toAgyLocDesc ,:toLoc ,:toLocDesc ,:escortCode ,:escortDesc ,:directionCode ,:scheduleMovementTime ,:fromCityCode ,:fromCityName ,:toCityCode ,:toCityName ,:toInternalLocationId ,:toInternalLocationDesc ,:toIntLocLevel1Code ,:toIntLocLevel2Code ,:toIntLocLevel3Code ,:toIntLocUserDesc ,:creditedHours ,:engagementCode ,:understandingCode ,:pieceWork ,:inTime ,:outTime ,:performanceCode ,:transportCode ,:sickNoteExpiryDate ,:sickNoteReceivedDate ,:unexcusedAbsenceFlag ,:unpaidWorkAction ,:unpaidWorkBehaviour ,:agreedTravelHour ,:checkBox1 ,:checkBox2 ,:hiddenCommentText ,:inChargeStaffId ,:inChargeStaffName ,:offPrgrefId ,:contactPersonName ,:toAddressOwnerClass ,:toAddressId ,:unpaidWorkSupervisor ,:taId ,:recordSource ,:checkSum ,:provStateCode ,:provStateDesc ,:scheduledTripId )
}

OIDSTABS_OFFSCHEDULES_UPDATE_V_OFFENDER_ALL_SCHEDULES {
	UPDATE V_OFFENDER_ALL_SCHEDULES set EVENT_ID  = :eventId ,OFFENDER_BOOK_ID  = :offenderBookId ,IN_OUT_STATUS  = :inOutStatus ,BOOKING_NO  = :bookingNo ,BOOKING_ACTIVE_FLAG  = :bookingActiveFlag ,OFFENDER_ID  = :offenderId ,OFFENDER_ID_DISPLAY  = :offenderIdDisplay ,OFFENDER_LAST_NAME  = :offenderLastName ,OFFENDER_FIRST_NAME  = :offenderFirstName ,EVENT_DATE  = :eventDate ,START_TIME  = :startTime ,END_TIME  = :endTime ,EVENT_CLASS  = :eventClass ,EVENT_TYPE  = :eventType ,EVENT_TYPE_DESC  = :eventTypeDesc ,EVENT_SUB_TYPE  = :eventSubType ,EVENT_SUB_TYPE_DESC  = :eventSubTypeDesc ,ACTIVE_FLAG  = :activeFlag ,EVENT_STATUS  = :eventStatus ,EVENT_STATUS_DESC  = :eventStatusDesc ,EVENT_OUTCOME  = :eventOutcome ,EVENT_OUTCOME_DESC  = :eventOutcomeDesc ,BUSY_DATE_FLAG  = :busyDateFlag ,OUTCOME_REASON_CODE  = :outcomeReasonCode ,REFERENCE_ID  = :referenceId ,APPLICATION_DATE  = :applicationDate ,APPLICATION_TIME  = :applicationTime ,RETURN_DATE  = :returnDate ,RETURN_TIME  = :returnTime ,COMMENT_TEXT  = :commentText ,DETAILS  = :details ,AGY_LOC_ID  = :agyLocId ,AGY_LOC_DESC  = :agyLocDesc ,LIVING_UNIT_ID  = :livingUnitId ,LIVING_UNIT_DESC  = :livingUnitDesc ,LU_LEVEL_1_CODE  = :luLevel1Code ,LU_LEVEL_2_CODE  = :luLevel2Code ,LU_LEVEL_3_CODE  = :luLevel3Code ,LU_LEVEL_4_CODE  = :luLevel4Code ,AGENCY_IML_ID  = :agencyImlId ,AGENCY_IML_DESC  = :agencyImlDesc ,AGENCY_IML_LEVEL_1_CODE  = :agencyImlLevel1Code ,AGENCY_IML_LEVEL_2_CODE  = :agencyImlLevel2Code ,AGENCY_IML_LEVEL_3_CODE  = :agencyImlLevel3Code ,TO_AGY_LOC_ID  = :toAgyLocId ,TO_AGY_LOC_DESC  = :toAgyLocDesc ,TO_LOC  = :toLoc ,TO_LOC_DESC  = :toLocDesc ,ESCORT_CODE  = :escortCode ,ESCORT_DESC  = :escortDesc ,DIRECTION_CODE  = :directionCode ,SCHEDULE_MOVEMENT_TIME  = :scheduleMovementTime ,FROM_CITY_CODE  = :fromCityCode ,FROM_CITY_NAME  = :fromCityName ,TO_CITY_CODE  = :toCityCode ,TO_CITY_NAME  = :toCityName ,TO_INTERNAL_LOCATION_ID  = :toInternalLocationId ,TO_INTERNAL_LOCATION_DESC  = :toInternalLocationDesc ,TO_INT_LOC_LEVEL_1_CODE  = :toIntLocLevel1Code ,TO_INT_LOC_LEVEL_2_CODE  = :toIntLocLevel2Code ,TO_INT_LOC_LEVEL_3_CODE  = :toIntLocLevel3Code ,TO_INT_LOC_USER_DESC  = :toIntLocUserDesc ,CREDITED_HOURS  = :creditedHours ,ENGAGEMENT_CODE  = :engagementCode ,UNDERSTANDING_CODE  = :understandingCode ,PIECE_WORK  = :pieceWork ,IN_TIME  = :inTime ,OUT_TIME  = :outTime ,PERFORMANCE_CODE  = :performanceCode ,TRANSPORT_CODE  = :transportCode ,SICK_NOTE_EXPIRY_DATE  = :sickNoteExpiryDate ,SICK_NOTE_RECEIVED_DATE  = :sickNoteReceivedDate ,UNEXCUSED_ABSENCE_FLAG  = :unexcusedAbsenceFlag ,UNPAID_WORK_ACTION  = :unpaidWorkAction ,UNPAID_WORK_BEHAVIOUR  = :unpaidWorkBehaviour ,AGREED_TRAVEL_HOUR  = :agreedTravelHour ,CHECK_BOX_1  = :checkBox1 ,CHECK_BOX_2  = :checkBox2 ,HIDDEN_COMMENT_TEXT  = :hiddenCommentText ,IN_CHARGE_STAFF_ID  = :inChargeStaffId ,IN_CHARGE_STAFF_NAME  = :inChargeStaffName ,OFF_PRGREF_ID  = :offPrgrefId ,CONTACT_PERSON_NAME  = :contactPersonName ,TO_ADDRESS_OWNER_CLASS  = :toAddressOwnerClass ,TO_ADDRESS_ID  = :toAddressId ,UNPAID_WORK_SUPERVISOR  = :unpaidWorkSupervisor ,TA_ID  = :taId ,RECORD_SOURCE  = :recordSource ,CHECK_SUM  = :checkSum ,PROV_STATE_CODE  = :provStateCode ,PROV_STATE_DESC  = :provStateDesc ,SCHEDULED_TRIP_ID  = :scheduledTripId 
}

OIDSTABS_OFFSCHEDULES_DELETE_V_OFFENDER_ALL_SCHEDULES { 
	DELETE FROM V_OFFENDER_ALL_SCHEDULES
}

OIDSTABS_AGYADR_FIND_V_AGENCY_ADDRESSES {
 	SELECT ADDRESS_ID ,ADDRESS_TYPE ,ADDRESS_TYPE_DESC ,AGY_LOC_ID ,START_DATE ,END_DATE ,ACTIVE_FLAG ,HOUSE ,STREET ,AREA ,COUNTRY ,SUITE_NUMBER ,STREET_NUMBER ,STREET_DIRECTION ,STREET_DIRECTION_DESC ,STREET_INFORMATION ,CITY_CODE ,CITY_NAME ,PROV_STATE_CODE ,PROV_STATE_DESC ,ZIP_POSTAL_CODE ,COUNTRY_CODE ,COMMENT_TEXT ,PRIMARY_FLAG ,MAIL_FLAG ,VALIDATED_FLAG ,MAIL_CARE_OF,ADDRESS_LINE1  
 	FROM V_AGENCY_ADDRESSES  WHERE ADDRESS_ID = :ADDRESS_ID
}
OIDSTABS_AGYADR_INSERT_V_AGENCY_ADDRESSES {
	INSERT INTO V_AGENCY_ADDRESSES(ADDRESS_ID ,ADDRESS_TYPE ,ADDRESS_TYPE_DESC ,AGY_LOC_ID ,START_DATE ,END_DATE ,ACTIVE_FLAG ,HOUSE ,STREET ,AREA ,COUNTRY ,SUITE_NUMBER ,STREET_NUMBER ,STREET_DIRECTION ,STREET_DIRECTION_DESC ,STREET_INFORMATION ,CITY_CODE ,CITY_NAME ,PROV_STATE_CODE ,PROV_STATE_DESC ,ZIP_POSTAL_CODE ,COUNTRY_CODE ,COMMENT_TEXT ,PRIMARY_FLAG ,MAIL_FLAG ,VALIDATED_FLAG ,MAIL_CARE_OF ) VALUES(:addressId ,:addressType ,:addressTypeDesc ,:agyLocId ,:startDate ,:endDate ,:activeFlag ,:house ,:street ,:area ,:country ,:suiteNumber ,:streetNumber ,:streetDirection ,:streetDirectionDesc ,:streetInformation ,:cityCode ,:cityName ,:provStateCode ,:provStateDesc ,:zipPostalCode ,:countryCode ,:commentText ,:primaryFlag ,:mailFlag ,:validatedFlag ,:mailCareOf)
}

OIDSTABS_AGYADR_UPDATE_V_AGENCY_ADDRESSES {
	UPDATE V_AGENCY_ADDRESSES set ADDRESS_ID  = :addressId ,ADDRESS_TYPE  = :addressType ,ADDRESS_TYPE_DESC  = :addressTypeDesc ,AGY_LOC_ID  = :agyLocId ,START_DATE  = :startDate ,END_DATE  = :endDate ,ACTIVE_FLAG  = :activeFlag ,HOUSE  = :house ,STREET  = :street ,AREA  = :area ,COUNTRY  = :country ,SUITE_NUMBER  = :suiteNumber ,STREET_NUMBER  = :streetNumber ,STREET_DIRECTION  = :streetDirection ,STREET_DIRECTION_DESC  = :streetDirectionDesc ,STREET_INFORMATION  = :streetInformation ,CITY_CODE  = :cityCode ,CITY_NAME  = :cityName ,PROV_STATE_CODE  = :provStateCode ,PROV_STATE_DESC  = :provStateDesc ,ZIP_POSTAL_CODE  = :zipPostalCode ,COUNTRY_CODE  = :countryCode ,COMMENT_TEXT  = :commentText ,PRIMARY_FLAG  = :primaryFlag ,MAIL_FLAG  = :mailFlag ,VALIDATED_FLAG  = :validatedFlag ,MAIL_CARE_OF  = :mailCareOf 
}

OIDSTABS_BUSADR_FIND_V_CORPORATE_ADDRESSES {
 	SELECT ADDRESS_ID ,ADDRESS_TYPE ,ADDRESS_TYPE_DESC ,CORPORATE_ID ,ADDRESS_SEQ ,START_DATE ,END_DATE ,ACTIVE_FLAG ,HOUSE ,STREET ,AREA ,COUNTRY ,SUITE_NUMBER ,STREET_NUMBER ,STREET_INFORMATION ,STREET_DIRECTION ,STREET_DIRECTION_DESC ,CITY_CODE ,CITY_NAME ,PROV_STATE_CODE ,PROV_STATE_DESC ,ZIP_POSTAL_CODE ,COUNTRY_CODE ,COMMENT_TEXT ,PRIMARY_FLAG ,MAIL_FLAG ,SERVICES_FLAG ,SPECIAL_NEEDS ,VALIDATED_FLAG ,CONTACT_PERSON_NAME ,BUSINESS_HOUR,ADDRESS_LINE1  
 	FROM V_CORPORATE_ADDRESSES  WHERE ADDRESS_ID = :ADDRESS_ID
}
OIDSTABS_BUSADR_INSERT_V_CORPORATE_ADDRESSES {
	INSERT INTO V_CORPORATE_ADDRESSES(ADDRESS_ID ,ADDRESS_TYPE ,ADDRESS_TYPE_DESC ,CORPORATE_ID ,ADDRESS_SEQ ,START_DATE ,END_DATE ,ACTIVE_FLAG ,HOUSE ,STREET ,AREA ,COUNTRY ,SUITE_NUMBER ,STREET_NUMBER ,STREET_INFORMATION ,STREET_DIRECTION ,STREET_DIRECTION_DESC ,CITY_CODE ,CITY_NAME ,PROV_STATE_CODE ,PROV_STATE_DESC ,ZIP_POSTAL_CODE ,COUNTRY_CODE ,COMMENT_TEXT ,PRIMARY_FLAG ,MAIL_FLAG ,SERVICES_FLAG ,SPECIAL_NEEDS ,VALIDATED_FLAG ,CONTACT_PERSON_NAME ,BUSINESS_HOUR ) VALUES(:addressId ,:addressType ,:addressTypeDesc ,:corporateId ,:addressSeq ,:startDate ,:endDate ,:activeFlag ,:house ,:street ,:area ,:country ,:suiteNumber ,:streetNumber ,:streetInformation ,:streetDirection ,:streetDirectionDesc ,:cityCode ,:cityName ,:provStateCode ,:provStateDesc ,:zipPostalCode ,:countryCode ,:commentText ,:primaryFlag ,:mailFlag ,:servicesFlag ,:specialNeeds ,:validatedFlag ,:contactPersonName ,:businessHour )
}

OIDSTABS_BUSADR_UPDATE_V_CORPORATE_ADDRESSES {
	UPDATE V_CORPORATE_ADDRESSES set ADDRESS_ID  = :addressId ,ADDRESS_TYPE  = :addressType ,ADDRESS_TYPE_DESC  = :addressTypeDesc ,CORPORATE_ID  = :corporateId ,ADDRESS_SEQ  = :addressSeq ,START_DATE  = :startDate ,END_DATE  = :endDate ,ACTIVE_FLAG  = :activeFlag ,HOUSE  = :house ,STREET  = :street ,AREA  = :area ,COUNTRY  = :country ,SUITE_NUMBER  = :suiteNumber ,STREET_NUMBER  = :streetNumber ,STREET_INFORMATION  = :streetInformation ,STREET_DIRECTION  = :streetDirection ,STREET_DIRECTION_DESC  = :streetDirectionDesc ,CITY_CODE  = :cityCode ,CITY_NAME  = :cityName ,PROV_STATE_CODE  = :provStateCode ,PROV_STATE_DESC  = :provStateDesc ,ZIP_POSTAL_CODE  = :zipPostalCode ,COUNTRY_CODE  = :countryCode ,COMMENT_TEXT  = :commentText ,PRIMARY_FLAG  = :primaryFlag ,MAIL_FLAG  = :mailFlag ,SERVICES_FLAG  = :servicesFlag ,SPECIAL_NEEDS  = :specialNeeds ,VALIDATED_FLAG  = :validatedFlag ,CONTACT_PERSON_NAME  = :contactPersonName ,BUSINESS_HOUR  = :businessHour
}

OIDSTABS_BUSADR_DELETE_V_CORPORATE_ADDRESSES { 
	DELETE FROM V_CORPORATE_ADDRESSES
}

OIDSTABS_OTHADR_FIND_V_ADDRESS_USAGES {
 	SELECT ADDRESS_ID ,ADDRESS_TYPE ,ADDRESS_USAGE ,OWNER_CLASS ,OWNER_ID ,OWNER_SEQ ,OWNER_CODE ,START_DATE ,END_DATE ,ADDRESS_ACTIVE_FLAG ,USAGE_ACTIVE_FLAG ,ACTIVE_FLAG ,FULL_ADDRESS ,HOUSE ,STREET ,AREA ,COUNTRY ,SUITE_NUMBER ,STREET_NUMBER ,STREET_DIRECTION ,STREET_INFORMATION ,CITY_CODE ,CITY_NAME ,PROV_STATE_CODE ,PROV_STATE_DESC ,ZIP_POSTAL_CODE ,COUNTRY_CODE ,CAPACITY ,COMMENT_TEXT ,PRIMARY_FLAG ,MAIL_FLAG ,VALIDATED_FLAG ,CREATE_DATETIME ,CREATE_USER_ID ,MODIFY_DATETIME ,MODIFY_USER_ID ,ADDRESS_LINE1 
 	FROM V_ADDRESS_USAGES WHERE ADDRESS_ID = :ADDRESS_ID AND ADDRESS_USAGE='TAP'
}
OIDSTABS_OTHADR_INSERT_V_ADDRESS_USAGES {
	INSERT INTO V_ADDRESS_USAGES(ADDRESS_ID ,ADDRESS_TYPE ,ADDRESS_USAGE ,OWNER_CLASS ,OWNER_ID ,OWNER_SEQ ,OWNER_CODE ,START_DATE ,END_DATE ,ADDRESS_ACTIVE_FLAG ,USAGE_ACTIVE_FLAG ,ACTIVE_FLAG ,FULL_ADDRESS ,HOUSE ,STREET ,AREA ,COUNTRY ,SUITE_NUMBER ,STREET_NUMBER ,STREET_DIRECTION ,STREET_INFORMATION ,CITY_CODE ,CITY_NAME ,PROV_STATE_CODE ,PROV_STATE_DESC ,ZIP_POSTAL_CODE ,COUNTRY_CODE ,CAPACITY ,COMMENT_TEXT ,PRIMARY_FLAG ,MAIL_FLAG ,VALIDATED_FLAG ,CREATE_DATETIME ,CREATE_USER_ID, MODIFY_USER_ID, MODIFY_DATETIME
	) VALUES(:addressId ,:addressType ,:addressUsage ,:ownerClass ,:ownerId ,:ownerSeq ,:ownerCode ,:startDate ,:endDate ,:addressActiveFlag ,:usageActiveFlag ,:activeFlag ,:fullAddress ,:house ,:street ,:area ,:country ,:suiteNumber ,:streetNumber ,:streetDirection ,:streetInformation ,:cityCode ,:cityName ,:provStateCode ,:provStateDesc ,:zipPostalCode ,:countryCode ,:capacity ,:commentText ,:primaryFlag ,:mailFlag ,:validatedFlag ,:createDatetime ,:createUserId, null, null)
}

OIDSTABS_OTHADR_UPDATE_V_ADDRESS_USAGES {
	UPDATE V_ADDRESS_USAGES set ADDRESS_ID  = :addressId ,ADDRESS_TYPE  = :addressType ,ADDRESS_USAGE  = :addressUsage ,OWNER_CLASS  = :ownerClass ,OWNER_ID  = :ownerId ,OWNER_SEQ  = :ownerSeq ,OWNER_CODE  = :ownerCode ,START_DATE  = :startDate ,END_DATE  = :endDate ,ADDRESS_ACTIVE_FLAG  = :addressActiveFlag ,USAGE_ACTIVE_FLAG  = :usageActiveFlag ,ACTIVE_FLAG  = :activeFlag ,FULL_ADDRESS  = :fullAddress ,HOUSE  = :house ,STREET  = :street ,AREA  = :area ,COUNTRY  = :country ,SUITE_NUMBER  = :suiteNumber ,STREET_NUMBER  = :streetNumber ,STREET_DIRECTION  = :streetDirection ,STREET_INFORMATION  = :streetInformation ,CITY_CODE  = :cityCode ,CITY_NAME  = :cityName ,PROV_STATE_CODE  = :provStateCode ,PROV_STATE_DESC  = :provStateDesc ,ZIP_POSTAL_CODE  = :zipPostalCode ,COUNTRY_CODE  = :countryCode ,CAPACITY  = :capacity ,COMMENT_TEXT  = :commentText ,PRIMARY_FLAG  = :primaryFlag ,MAIL_FLAG  = :mailFlag ,VALIDATED_FLAG  = :validatedFlag  ,MODIFY_DATETIME  = :modifyDatetime ,MODIFY_USER_ID  = :modifyUserId 
}

OIDSTABS_OTHADR_DELETE_V_ADDRESS_USAGES { 
	DELETE FROM V_ADDRESS_USAGES
}

OIDSTABS_AGYPHONES_FIND_V_PHONES {
 	SELECT PHONE_ID ,OWNER_CLASS ,OWNER_ID ,OWNER_SEQ ,OWNER_CODE ,PHONE_TYPE ,PHONE_AREA ,PHONE_NO ,EXT_NO,FORMAT  
 	FROM V_PHONES   where  OWNER_CLASS='ADDR' and OWNER_ID = :OWNER_ID
}

OIDSTABS_OFF_BKG_ONCHECKDELETEMASTER_ {
	SELECT 1 FROM V_OFFENDER_ALL_SCHEDULES V WHERE V.OFFENDER_BOOK_ID = :OFFENDERBOOKID
}

OIDSTABS_OFF_SCHEDULES_ONCHECKDELETEMASTER_ {
	SELECT 1 FROM V_AGENCY_ADDRESSES V WHERE V.ADDRESS_ID = :TOADDRESSID
}

OIDSTABS_OFF_SCHEDULES_ONCHECKDELETEMASTER_ {
	SELECT 1 FROM V_CORPORATE_ADDRESSES V WHERE V.ADDRESS_ID = :TOADDRESSID
}

OIDSTABS_OFF_SCHEDULES_ONCHECKDELETEMASTER_ {
	SELECT 1 FROM V_ADDRESS_USAGES V WHERE V.ADDRESS_ID = :TOADDRESSID
}

OIDSTABS_OFF_SCHEDULES_ONCHECKDELETEMASTER_ {
	SELECT 1 FROM V_PHONES V WHERE V.OWNER_ID = :TOADDRESSID
}

OIDSTABS_OFF_SCHEDULES_ONCHECKDELETEMASTER_ {
	SELECT 1 FROM V_PHONES V WHERE V.OWNER_ID = :TOADDRESSID
}

OIDSTABS_OFF_SCHEDULES_ONCHECKDELETEMASTER_ {
	SELECT 1 FROM V_PHONES V WHERE V.OWNER_ID = :TOADDRESSID
}

OIDSTABS_POPULATE_OTH_ADDRESS_ {
	SELECT SUITE_NUMBER, STREET_INFORMATION, CITY_NAME, PROV_STATE_DESC, ZIP_POSTAL_CODE, COUNTRY FROM V_ADDRESS_USAGES WHERE ADDRESS_ID = P_ADDRESS_ID
}
OIDSTABS_CALUCULATE_DAYS_OUT {
	SELECT COALESCE(TO_DATE('15/10/2021','DD/MM/YYYY')-(TO_DATE('16/10/2021','DD/MM/YYYY')),0) FROM DUAL
}
OIDSTABS_CALUCULATE_HOURS_OUT {
select round(extract(epoch from (to_timestamp(:RETURN_TIME,'DD/MM/YYYY HH24:MI')-to_timestamp(:START_TIME,'DD/MM/YYYY HH24:MI'))/3600)::numeric,2)     

}
OIDSTABS_INSERT_OFFENDER_IND_SCHEDULES {
insert into OFFENDER_IND_SCHEDULES(EVENT_ID, OFFENDER_BOOK_ID, EVENT_DATE, START_TIME, END_TIME, EVENT_CLASS, EVENT_TYPE, EVENT_SUB_TYPE, EVENT_STATUS, COMMENT_TEXT, HIDDEN_COMMENT_TEXT, APPLICATION_DATE, PARENT_EVENT_ID, AGY_LOC_ID, TO_AGY_LOC_ID, FROM_CITY, TO_CITY, CRS_SCH_ID, ORDER_ID, SENTENCE_SEQ, OUTCOME_REASON_CODE, JUDGE_NAME, CHECK_BOX_1, CHECK_BOX_2, CREDITED_HOURS, REPORT_IN_DATE, PIECE_WORK, ENGAGEMENT_CODE, UNDERSTANDING_CODE, DETAILS, CREDITED_WORK_HOUR, AGREED_TRAVEL_HOUR, UNPAID_WORK_SUPERVISOR, UNPAID_WORK_BEHAVIOUR, UNPAID_WORK_ACTION, SICK_NOTE_RECEIVED_DATE, SICK_NOTE_EXPIRY_DATE, COURT_EVENT_RESULT, UNEXCUSED_ABSENCE_FLAG, CREATE_USER_ID, CREATE_DATETIME, ESCORT_CODE, CONFIRM_FLAG, DIRECTION_CODE, TO_CITY_CODE, FROM_CITY_CODE, OFF_PRGREF_ID, IN_TIME, OUT_TIME, PERFORMANCE_CODE, TEMP_ABS_SCH_ID, TRANSPORT_CODE, APPLICATION_TIME, CONTACT_PERSON_NAME, TO_ADDRESS_OWNER_CLASS, RETURN_DATE, RETURN_TIME, TO_CORPORATE_ID, TA_ID, EVENT_OUTCOME, PROV_STATE_CODE, SEAL_FLAG, MODIFY_USER_ID, MODIFY_DATETIME
,EVENT_PURPOSE) values (:eventId, :offenderBookId, :eventDate, :startTime, :endTime, :eventClass, :eventType, :eventSubType, :eventStatus, :commentText, :hiddenCommentText, :applicationDate, :parentEventId, :agyLocId, :toAgyLocId, :fromCity, :toCity, :crsSchId, :orderId, :sentenceSeq, :outcomeReasonCode, :judgeName, :checkBox1, :checkBox2, :creditedHours, :reportInDate, :pieceWork, :engagementCode, :understandingCode, :details, :creditedWorkHour, :agreedTravelHour, :unpaidWorkSupervisor, :unpaidWorkBehaviour, :unpaidWorkAction, :sickNoteReceivedDate, :sickNoteExpiryDate, :courtEventResult, :unexcusedAbsenceFlag, :createUserId, current_timestamp, :escortCode, :confirmFlag, :directionCode, :toCityCode, :fromCityCode, :offPrgrefId, :inTime, :outTime, :performanceCode, :tempAbsSchId, :transportCode, :applicationTime, :contactPersonName, :toAddressOwnerClass, :returnDate, :returnTime, :toCorporateId, :taId, :eventOutcome, :provStateCode, :sealFlag, null, null,:eventPurpose)
}
OIDSTABS_PRE_INSERT_OFFENDER_IND_SCHEDULES {
SELECT NEXTVAL('EVENT_ID') FROM DUAL
}
OIDSTABS_PRE_UPDATE_OFFENDER_IND_SCHEDULES {
UPDATE OFFENDER_IND_SCHEDULES SET APPLICATION_DATE =:applicationDate,APPLICATION_TIME=:applicationTime,EVENT_DATE = :eventDate ,START_TIME = :startTime, PROV_STATE_CODE = :provStateCode,TRANSPORT_CODE = :transportCode ,EVENT_STATUS = :eventStatus, EVENT_TYPE = :eventType, EVENT_SUB_TYPE =:eventSubType, ESCORT_CODE = :escortCode, COMMENT_TEXT = :commentText,
        RETURN_DATE = :returnDate, RETURN_TIME = :returnTime,MODIFY_DATETIME=current_timestamp ,MODIFY_USER_ID=:modifyUserId, EVENT_PURPOSE=:eventPurpose
       WHERE EVENT_ID = :eventId
       }
  OIDSTABS_PRE_DELETE_OFFENDER_IND_SCHEDULES {
DELETE FROM OFFENDER_IND_SCHEDULES WHERE EVENT_ID = :eventId
}  

OIDSTABS_ADRESS_LOC_UPDATE_OFFENDER_IND_SCHEDULES {
UPDATE OFFENDER_IND_SCHEDULES SET TO_ADDRESS_ID = :toAddressId,CONTACT_PERSON_NAME = :contactPersonName ,TO_AGY_LOC_ID = :toAgyLocId  ,TO_ADDRESS_OWNER_CLASS = :toAddressOwnerClass,MODIFY_DATETIME=current_timestamp ,MODIFY_USER_ID=:modifyUserId
 WHERE EVENT_ID = :eventId
       }
OIDSTABS_CHECK_SCHEDULE_CONFLICT {
select COUNT(*) from V_OFFENDER_ALL_SCHEDULES_2 where OFFENDER_BOOK_ID = :OFFENDER_BOOK_ID and exists ( select 'Y' from schedules_and_mvmnt_settings where encode(setting_value, 'escape') like '%' || EVENT_STATUS || '%') AND ( (EVENT_DATE >= :EVENT_DATE AND EVENT_DATE <= :RETURN_DATE) OR (RETURN_DATE >= :EVENT_DATE AND RETURN_DATE <= :RETURN_DATE) OR (EVENT_DATE <= :EVENT_DATE AND RETURN_DATE >= :RETURN_DATE))
}
 
OIDSTABS_CHECK_SCHEDULE_CONFLICTS {
 select
	*
from
	OFFENDER_IND_SCHEDULES
where
	OFFENDER_BOOK_ID = :offenderBookID
	and (EVENT_DATE = :eventDate::timestamp or return_date = :returnDate::timestamp
	or EVENT_DATE = :returnDate::timestamp or return_date = :eventDate::timestamp)
	and event_status IN('SCH','PEN') 
	and EVENT_CLASS = 'EXT_MOV'
	and EVENT_TYPE = 'TAP'
	order by EVENT_DATE desc 
 
}
OIDSTABS_FIND_RGPURPOSE{
select DESCRIPTION,CODE,LIST_SEQ,ACTIVE_FLAG  from REFERENCE_CODES RC where domain = 'TAP_PURPOSE' and parent_code =:reason order by list_seq ,description
}