OIDVIRES_FIND_TAG_VISITS_GET_STAFF_ID {
SELECT TAG_VISITS_GET_STAFF_ID_u(:username) USER_ID from dual
}

OIDVIRES_FIND_RGAUTHPRIRELATIONSHIPTYPE {
 	SELECT   REF_CODE.DESCRIPTION ,          REF_CODE.CODE     FROM REFERENCE_CODES REF_CODE ,          CONTACT_PERSON_TYPES CPT    WHERE REF_CODE.DOMAIN = 'RELATIONSHIP'      AND CPT.EXPIRY_DATE IS NULL      AND CPT.ACTIVE_FLAG = 'Y'         AND REF_CODE.CODE = CPT.RELATIONSHIP_TYPE      AND CPT.CONTACT_TYPE = :contactType      AND ((REF_CODE.ACTIVE_FLAG = 'Y' ) OR '' = 'ENTER-QUERY' ) ORDER BY CPT.LIST_SEQ , REF_CODE.DESCRIPTION
}

OIDVIRES_FIND_RGAUTHVISRELATIONSHIPTYPE {
 	SELECT   REF_CODE.DESCRIPTION ,          REF_CODE.CODE     FROM REFERENCE_CODES REF_CODE ,          CONTACT_PERSON_TYPES CPT    WHERE REF_CODE.DOMAIN = 'RELATIONSHIP'      AND CPT.EXPIRY_DATE IS NULL      AND CPT.ACTIVE_FLAG = 'Y'      AND REF_CODE.CODE = CPT.RELATIONSHIP_TYPE      AND CPT.CONTACT_TYPE = ::CONTACTTYPE      AND ((REF_CODE.ACTIVE_FLAG = 'Y' ) OR ::MODE = 'ENTER-QUERY' ) ORDER BY CPT.LIST_SEQ ,REF_CODE.DESCRIPTION
}

OIDVIRES_FIND_RGAUTHVISCONTACTTYPE {
 	SELECT REF_CODE.DESCRIPTION ,        REF_CODE.CODE   FROM REFERENCE_CODES REF_CODE  WHERE DOMAIN = 'CONTACTS'    AND (  (ACTIVE_FLAG = 'Y' )        OR ::MODE = 'QUERY' )  ORDER BY REF_CODE.LIST_SEQ ASC , REF_CODE.DESCRIPTION ASC
}

OIDVIRES_FIND_RGSTAFFID {
SELECT SM.LAST_NAME || ', ' || SM.FIRST_NAME as NAME , SM.STAFF_ID CODE , SM.STATUS, CASE WHEN  EXISTS (SELECT CASELOAD_ID  FROM CASELOAD_AGENCY_LOCATIONS CAL  WHERE CAL.CASELOAD_ID = SM.WORKING_CASELOAD_ID  AND CAL.AGY_LOC_ID = :agyLocId) THEN 'Y' ELSE 'N' END MIDDLE_NAME
FROM STAFF_MEMBERS SM , STAFF_ACCESSIBLE_CASELOADS SAC  WHERE SM.STAFF_ID = SAC.STAFF_ID    AND SM.WORKING_CASELOAD_ID = SAC.CASELOAD_ID    AND SAC.UPDATE_ALLOWED_FLAG = 'Y' ORDER BY LAST_NAME , FIRST_NAME
}

OIDVIRES_FIND_RGOFFRESTRICTIONTYPE {
 	SELECT   REF_CODE.DESCRIPTION ,                REF_CODE.CODE              FROM REFERENCE_CODES REF_CODE    WHERE DOMAIN = 'VST_RST_TYPE'    AND ((ACTIVE_FLAG = 'Y' ) OR ::MODE = 'ENTER-QUERY' ) ORDER BY REF_CODE.LIST_SEQ ,  REF_CODE.DESCRIPTION
}

OIDVIRES_OFFVISITREST_FIND_OFFENDER_RESTRICTIONS {
 	SELECT OFFENDER_BOOK_ID ,OFFENDER_RESTRICTION_ID ,RESTRICTION_TYPE ,EFFECTIVE_DATE ,EXPIRY_DATE ,COMMENT_TEXT ,AUTHORISED_STAFF_ID ,ENTERED_STAFF_ID ,CREATE_DATETIME ,CREATE_USER_ID ,MODIFY_DATETIME ,MODIFY_USER_ID ,SEAL_FLAG   FROM OFFENDER_RESTRICTIONS WHERE OFFENDER_BOOK_ID = :offenderBookId ORDER BY EFFECTIVE_DATE DESC, EXPIRY_DATE DESC
}
OIDVIRES_OFFVISITREST_INSERT_OFFENDER_RESTRICTIONS {
insert into OFFENDER_RESTRICTIONS(OFFENDER_BOOK_ID, OFFENDER_RESTRICTION_ID, RESTRICTION_TYPE, EFFECTIVE_DATE, EXPIRY_DATE, COMMENT_TEXT, AUTHORISED_STAFF_ID, ENTERED_STAFF_ID, create_datetime, modify_datetime, create_user_id) values(:offenderBookId, NEXTVAL('OFFENDER_RESTRICTION_ID'), :restrictionType, :effectiveDate, :expiryDate, :commentText, :authorisedStaffId, TAG_VISITS_GET_STAFF_ID_u(:username), current_timestamp, NULL, :createUserId) 
}

OIDVIRES_OFFVISITREST_UPDATE_OFFENDER_RESTRICTIONS {
	UPDATE OFFENDER_RESTRICTIONS set RESTRICTION_TYPE  = :restrictionType ,EFFECTIVE_DATE  = :effectiveDate ,EXPIRY_DATE  = :expiryDate ,COMMENT_TEXT  = :commentText ,AUTHORISED_STAFF_ID  = :authorisedStaffId, modify_user_id =:modifyUserId, modify_datetime = current_timestamp  WHERE OFFENDER_BOOK_ID  = :offenderBookId AND OFFENDER_RESTRICTION_ID  = :offenderRestrictionId 
}

OIDVIRES_OFFAUTHVISITORS_FIND_OFFENDER_CONTACT_PERSONS {
select OFF_CONT_PER.OFFENDER_BOOK_ID, OFF_CONT_PER.PERSON_ID, OFF_CONT_PER.CONTACT_TYPE, OFF_CONT_PER.RELATIONSHIP_TYPE, OFF_CONT_PER.APPROVED_VISITOR_FLAG, OFF_CONT_PER.CASELOAD_TYPE, OFF_CONT_PER.MODIFY_DATETIME, OFF_CONT_PER.MODIFY_USER_ID, OFF_CONT_PER.COMMENT_TEXT, OFF_CONT_PER.CASE_INFO_NUMBER, OFF_CONT_PER.AWARE_OF_CHARGES_FLAG, OFF_CONT_PER.CAN_BE_CONTACTED_FLAG, OFF_CONT_PER.CREATE_DATETIME, OFF_CONT_PER.CREATE_USER_ID, OFF_CONT_PER.EMERGENCY_CONTACT_FLAG, OFF_CONT_PER.NEXT_OF_KIN_FLAG, OFF_CONT_PER.ACTIVE_FLAG, OFF_CONT_PER.EXPIRY_DATE, OFF_CONT_PER.OFFENDER_CONTACT_PERSON_ID, OFF_CONT_PER.CONTACT_ROOT_OFFENDER_ID, PER.LAST_NAME, PER.FIRST_NAME, PER.MIDDLE_NAME, PER.BIRTHDATE, case when ( select COUNT(*) from VISITOR_RESTRICTIONS where PERSON_ID = OFF_CONT_PER.PERSON_ID and (EFFECTIVE_DATE) <= (SYSDATE()) and ( (EXPIRY_DATE)> (SYSDATE()) or EXPIRY_DATE is null)) > 0 then 'BAN' else null end VISIT_BAN, case when ( select COUNT(*) from OFFENDER_PERSON_RESTRICTS where OFFENDER_CONTACT_PERSON_ID = OFF_CONT_PER.OFFENDER_CONTACT_PERSON_ID and (RESTRICTION_EFFECTIVE_DATE) <= (SYSDATE()) and ( (RESTRICTION_EXPIRY_DATE)> (SYSDATE()) or RESTRICTION_EXPIRY_DATE is null)) > 0 then 'RESTRICTION' else null end RESTRICTION, case when exists ( select 1 from OFFENDER_VISITS OV, OFFENDER_VISIT_VISITORS OVV where OV.OFFENDER_BOOK_ID = OFF_CONT_PER.OFFENDER_BOOK_ID and OV.OFFENDER_VISIT_ID = OVV.OFFENDER_VISIT_ID and OVV.PERSON_ID = OFF_CONT_PER.PERSON_ID) or exists ( select 1 from OFFENDER_CONTACT_PERSONS OCP, OFFENDER_PERSON_RESTRICTS OPR where OCP.OFFENDER_BOOK_ID = OFF_CONT_PER.OFFENDER_BOOK_ID and OCP.PERSON_ID = OFF_CONT_PER.PERSON_ID and OCP.OFFENDER_CONTACT_PERSON_ID = OPR.OFFENDER_CONTACT_PERSON_ID) then 'Y' else 'N' end SEAL_FLAG from OFFENDER_CONTACT_PERSONS OFF_CONT_PER , PERSONS PER where OFF_CONT_PER.PERSON_ID is not null and PER.PERSON_ID = OFF_CONT_PER.PERSON_ID and OFF_CONT_PER.OFFENDER_BOOK_ID = :offenderBookId order by tag_visits_sort_on_visitor_lastname(OFF_CONT_PER.PERSON_ID) , tag_visits_sort_on_visitor_firstname(OFF_CONT_PER.PERSON_ID)
}

OIDVIRES_OFFVISITING_FIND_OFFENDER_CONTACT_PERSONS {
select
	OFF_CONT_PER.OFFENDER_BOOK_ID,
	OFF_CONT_PER.PERSON_ID,
	OFF_CONT_PER.CONTACT_TYPE,
	OFF_CONT_PER.RELATIONSHIP_TYPE,
	OFF_CONT_PER.APPROVED_VISITOR_FLAG,
	OFF_CONT_PER.CASELOAD_TYPE,
	OFF_CONT_PER.MODIFY_DATETIME,
	OFF_CONT_PER.MODIFY_USER_ID,
	OFF_CONT_PER.COMMENT_TEXT,
	OFF_CONT_PER.CASE_INFO_NUMBER,
	OFF_CONT_PER.AWARE_OF_CHARGES_FLAG,
	OFF_CONT_PER.CAN_BE_CONTACTED_FLAG,
	OFF_CONT_PER.CREATE_DATETIME,
	OFF_CONT_PER.CREATE_USER_ID,
	OFF_CONT_PER.EMERGENCY_CONTACT_FLAG,
	OFF_CONT_PER.NEXT_OF_KIN_FLAG,
	OFF_CONT_PER.ACTIVE_FLAG,
	OFF_CONT_PER.EXPIRY_DATE,
	OFF_CONT_PER.OFFENDER_CONTACT_PERSON_ID,
	OFF_CONT_PER.CONTACT_ROOT_OFFENDER_ID,
	OFF_CONT_PER.SEAL_FLAG,
	case
		when (
		select
			COUNT(*)
		from
			V_OFFENDER_RESTRICTIONS
		where
			OFFENDER_BOOK_ID = (
			select
				offender_book_id
			from
				v_name_search2_fn(:userId)
			where
				root_offender_id = OFF_CONT_PER.CONTACT_ROOT_OFFENDER_ID)
			and EFFECTIVE_DATE::date <= SYSDATE()::date
			and (EXPIRY_DATE is null
				or EXPIRY_DATE::date > SYSDATE()::date)) > 0 then
		case
			when (
			select
				count(*)
			from
				V_OFFENDER_RESTRICTIONS
			where
				OFFENDER_BOOK_ID = (
				select
					offender_book_id
				from
					v_name_search2_fn(:userId)
				where
					root_offender_id = OFF_CONT_PER.CONTACT_ROOT_OFFENDER_ID)
				and RESTRICTION_DESC in ('Banned', 'Permanent Ban')
					and EFFECTIVE_DATE::date <= SYSDATE()::date
					and (EXPIRY_DATE is null
						or EXPIRY_DATE::date > SYSDATE()::date)) > 0 then 'BAN'
			else 'RESTRICTION'
		end
		else null
	end RESTRICTION,
	VNS.OFFENDER_ID_DISPLAY,
	VNS.LAST_NAME,
	VNS.FIRST_NAME,
	VNS.LIVING_UNIT_DESCRIPTION
from
	OFFENDER_CONTACT_PERSONS OFF_CONT_PER,
	V_NAME_SEARCH2_FN(:userId) VNS
where
	CONTACT_ROOT_OFFENDER_ID is not null
	and
  OFF_CONT_PER.OFFENDER_BOOK_ID = :offenderBookId
	and
  OFF_CONT_PER.PERSON_ID is null
	and (
	select
		offender_book_id
	from
		v_name_search2_fn(:userId)
	where
		root_offender_id = OFF_CONT_PER.CONTACT_ROOT_OFFENDER_ID) = VNS.OFFENDER_BOOK_ID
order by
	TAG_VISITS_SORT_ON_OFFENDER_LASTNAME(OFF_CONT_PER.CONTACT_ROOT_OFFENDER_ID) ,
	TAG_VISITS_SORT_ON_OFFENDER_FIRSTNAME(OFF_CONT_PER.CONTACT_ROOT_OFFENDER_ID)
}

OIDVIRES_OFFAUTHVISITORS_INSERT_OFFENDER_CONTACT_PERSONS {
insert into OFFENDER_CONTACT_PERSONS (OFFENDER_BOOK_ID, PERSON_ID, CONTACT_TYPE, RELATIONSHIP_TYPE, APPROVED_VISITOR_FLAG, EMERGENCY_CONTACT_FLAG, NEXT_OF_KIN_FLAG, ACTIVE_FLAG, OFFENDER_CONTACT_PERSON_ID, COMMENT_TEXT, create_datetime, modify_datetime, create_user_id) values (:offenderBookId, :personId, :contactType, :relationshipType, :approvedVisitorFlag, 'N', 'N', 'Y', nextval('offender_contact_person_id') , :commentText, current_timestamp, NULL, :createUserId) 
}

OIDVIRES_OFFAUTHVISITORS_UPDATE_OFFENDER_CONTACT_PERSONS {
	UPDATE OFFENDER_CONTACT_PERSONS SET CONTACT_TYPE = :contactType, RELATIONSHIP_TYPE = :relationshipType, APPROVED_VISITOR_FLAG = :approvedVisitorFlag, COMMENT_TEXT = :commentText,modify_user_id =:modifyUserId, modify_datetime = current_timestamp  WHERE OFFENDER_BOOK_ID = :offenderBookId AND PERSON_ID = :personId
}

OIDVIRES_OFFAUTHVISITORS_DELETE_OFFENDER_CONTACT_PERSONS { 
	DELETE FROM OFFENDER_CONTACT_PERSONS WHERE OFFENDER_BOOK_ID = :offenderBookId AND PERSON_ID = :personId
}

OIDVIRES_OFFAUTHVISITOFF_INSERT_OFFENDER_CONTACT_PERSONS {
 insert into OFFENDER_CONTACT_PERSONS (OFFENDER_BOOK_ID, CONTACT_TYPE, RELATIONSHIP_TYPE, APPROVED_VISITOR_FLAG, EMERGENCY_CONTACT_FLAG, NEXT_OF_KIN_FLAG, ACTIVE_FLAG, OFFENDER_CONTACT_PERSON_ID, CONTACT_ROOT_OFFENDER_ID, COMMENT_TEXT, create_datetime, modify_datetime, create_user_id ) values (:offenderBookId, :contactType, :relationshipType, :approvedVisitorFlag, 'N', 'N', 'Y', NEXTVAL('offender_contact_person_ID'), TAG_VISITS_GET_ROOT_OFFENDER_ID(:offenderIdDisplay), :commentText, current_timestamp, NULL, :createUserId ) 
}

OIDVIRES_OFFAUTHVISITOFF_UPDATE_OFFENDER_CONTACT_PERSONS {
	UPDATE OFFENDER_CONTACT_PERSONS SET CONTACT_TYPE = :contactType, RELATIONSHIP_TYPE = :relationshipType, APPROVED_VISITOR_FLAG = :approvedVisitorFlag, COMMENT_TEXT = :commentText,modify_user_id =:modifyUserId, modify_datetime = current_timestamp WHERE OFFENDER_BOOK_ID = :offenderBookId AND CONTACT_ROOT_OFFENDER_ID = :contactRootOffenderId
}

OIDVIRES_OFFAUTHVISITOFF_DELETE_OFFENDER_CONTACT_PERSONS { 
	DELETE FROM OFFENDER_CONTACT_PERSONS WHERE OFFENDER_BOOK_ID = :offenderBookId AND PERSON_ID IS NULL AND CONTACT_ROOT_OFFENDER_ID = :contactRootOffenderId
}

OIDVIRES_IMAGEVISIT_FIND_IMAGES {
 	SELECT IMAGE_ID ,CAPTURE_DATE ,IMAGE_OBJECT_TYPE ,IMAGE_OBJECT_ID ,IMAGE_OBJECT_SEQ ,IMAGE_VIEW_TYPE ,IMAGE_THUMBNAIL ,ACTIVE_FLAG ,ORIENTATION_TYPE ,SEAL_FLAG ,CREATE_DATETIME ,CREATE_USER_ID ,MODIFY_DATETIME ,MODIFY_USER_ID   FROM IMAGES
}
OIDVIRES_IMAGEVISIT_DELETE_IMAGES { 
	DELETE FROM IMAGES
}


OIDVIRES_OFF_BKG_ONCHECKDELETEMASTER_ {
	SELECT 1 FROM OFFENDER_RESTRICTIONS O WHERE O.OFFENDER_BOOK_ID = :OFFENDERBOOKID
}

OIDVIRES_OFF_BKG_ONCHECKDELETEMASTER_ {
	SELECT 1 FROM OFFENDER_CONTACT_PERSONS O WHERE O.OFFENDER_BOOK_ID = :OFFENDERBOOKID
}

OIDVIRES_OFF_BKG_ONCHECKDELETEMASTER_ {
	SELECT 1 FROM OFFENDER_CONTACT_PERSONS O WHERE O.OFFENDER_BOOK_ID = :OFFENDERBOOKID
}

OIDVIRES_OFF_AUTH_VISITORS_ONCHECKDELETEMASTER_ {
	SELECT 1 FROM TAG_IMAGES T WHERE T.IMAGE_OBJECT_ID = :PERSONID
}

OIDVIRES_OFF_AUTH_VISIT_OFF_ONCHECKDELETEMASTER_ {
	SELECT 1 FROM IMAGES I WHERE I.IMAGE_OBJECT_ID = :NBTCONTACTOFFENDERBOOKID
}

OIDVIRES_IS_OFFENDER_BAN_RESTRICTION {
SELECT 
    CASE 
        WHEN  0 <
            (SELECT COUNT(*) FROM offender_restrictions o  WHERE o.OFFENDER_BOOK_ID = :offenderBookId and date_trunc('day',EFFECTIVE_DATE) <= date_trunc('day',CURRENT_TIMESTAMP) and (date_trunc('day',EXPIRY_DATE)> date_trunc('day',CURRENT_TIMESTAMP) OR EXPIRY_DATE IS NULL))
     THEN 
    CASE 
        WHEN  'BAN' IN 
            (SELECT RESTRICTION_TYPE FROM offender_restrictions o  WHERE o.OFFENDER_BOOK_ID = :offenderBookId and date_trunc('day',EFFECTIVE_DATE) <= date_trunc('day',CURRENT_TIMESTAMP) and (date_trunc('day',EXPIRY_DATE)> date_trunc('day',CURRENT_TIMESTAMP) OR EXPIRY_DATE IS NULL))
     THEN 'BAN' 
     WHEN  'PERM' IN 
            (SELECT RESTRICTION_TYPE FROM offender_restrictions o  WHERE o.OFFENDER_BOOK_ID = :offenderBookId and date_trunc('day',EFFECTIVE_DATE) <= date_trunc('day',CURRENT_TIMESTAMP) and (date_trunc('day',EXPIRY_DATE)> date_trunc('day',CURRENT_TIMESTAMP) OR EXPIRY_DATE IS NULL))
     THEN 'BAN' ELSE 'RESTRICTION' END ELSE NULL END CODE FROM Dual
}

OIDVIRES_IS_PERSON_BAN_RESTRICTION {
select
	case
		when 0 < (
		select
			COUNT(1)
		from
			VISITOR_RESTRICTIONS
		where
			PERSON_ID = :personId and date_trunc('day',
			EFFECTIVE_DATE) <= date_trunc('day', CURRENT_TIMESTAMP)
			and (date_trunc('day', EXPIRY_DATE)> date_trunc('day', CURRENT_TIMESTAMP)
				or EXPIRY_DATE is null)) then 'BAN'
		else null
	end CODE,
	case
		when 0 < (
		select
			COUNT(*)
		from
			OFFENDER_PERSON_RESTRICTS
		where
			OFFENDER_CONTACT_PERSON_ID = :personId
			and date_trunc('day', RESTRICTION_EFFECTIVE_DATE) <= date_trunc('day', CURRENT_TIMESTAMP)
				and (date_trunc('day', RESTRICTION_EXPIRY_DATE)> date_trunc('day', CURRENT_TIMESTAMP)
					or RESTRICTION_EXPIRY_DATE is null)) then 'RESTRICTION'
		else null
	end DESCRIPTION
from
	DUAL
}
