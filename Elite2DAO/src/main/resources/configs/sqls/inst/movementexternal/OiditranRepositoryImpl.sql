
OIDITRAN_FIND_MOVERSNLOV {
 	SELECT
  CODE, DESCRIPTION
FROM REFERENCE_CODES
WHERE
  DOMAIN ='MOVE_RSN' AND
  ACTIVE_FLAG ='Y'

}

OIDITRAN_FIND_CGFKOFFEMTOAGYLOCID {
	select
	AL.AGY_LOC_ID CODE,
	AL.DESCRIPTION DESCRIPTION,
	LU.DESCRIPTION DSP_DESCRIPTION,
	(CAOP.LIVING_UNIT_ID)::varchar LIV_UNIT_ID,
	LU.internal_location_code LIV_UNIT_CODE,
	AL.Active_flag
from
	agency_locations al,
	caseload_adm_other_profiles caop
left outer join (SELECT ail.*
   FROM agency_internal_locations ail
  WHERE ail.unit_type IS NOT NULL AND ail.unit_type::text <> ''::text) lu on
	(CAOP.LIVING_UNIT_ID = LU.internal_location_id)
where
	AL.AGY_LOC_ID = CAOP.AGY_LOC_ID
	and CAOP.CASELOAD_ID = :CASELOADID
	and coalesce(AL.DEACTIVATION_DATE::text,
	'') = ''
	and NON_ASSOCIATION_GET_COUNT_FOR_LIV_UNIT(CAOP.LIVING_UNIT_ID) < LU.CAPACITY
union
select
	AGY_LOC.AGY_LOC_ID TO_LOC,
	AGY_LOC.DESCRIPTION DSP_DESCRIPTION,
	null::varchar LIV_UNIT_ID,
	'' DSP_DESCRIPTION5,
	'' LU_CODE,
	AGY_LOC.active_flag
from
	AGENCY_LOCATIONS AGY_LOC
where
	coalesce(DEACTIVATION_DATE::text,
	'') = ''
	and exists (
	select
		'X'
	from
		CASELOAD_AGENCY_LOCATIONS CAL
	where
		CAL.AGY_LOC_ID = AGY_LOC.AGY_LOC_ID
		and CAL.CASELOAD_ID = :CASELOADID )
	and not exists (
	select
		'X'
	from
		caseload_adm_other_profiles caop
	left outer join (SELECT ail.*
   FROM agency_internal_locations ail
  WHERE ail.unit_type IS NOT NULL AND ail.unit_type::text <> ''::text) lu2 on
		(CAOP.LIVING_UNIT_ID = LU2.internal_location_id)
	where
		CAOP.AGY_LOC_ID = AGY_LOC.AGY_LOC_ID
		and CAOP.CASELOAD_ID = :CASELOADID
		and NON_ASSOCIATION_GET_COUNT_FOR_LIV_UNIT(CAOP.LIVING_UNIT_ID) < LU2.CAPACITY )
	and AGY_LOC_ID not in ('OUT' , 'TRN' )
order by
	3
}

OIDITRAN_OFFEM_FIND_V_OFF_EXM {
	select
	oem.OFFENDER_BOOK_ID ,
	ob.OFFENDER_ID,
	MOVEMENT_SEQ ,
	MOVEMENT_DATE ,
	MOVEMENT_TIME ,
	INTERNAL_SCHEDULE_TYPE ,
	INTERNAL_SCHEDULE_REASON_CODE ,
	MOVEMENT_TYPE ,
	MOVEMENT_REASON_CODE ,
	DIRECTION_CODE ,
	ARREST_AGENCY_LOC_ID ,
	TO_PROV_STAT_CODE ,
	ESCORT_CODE ,
	FROM_AGY_LOC_ID ,
	TO_AGY_LOC_ID ,
	oem.ACTIVE_FLAG ,
	ESCORT_TEXT ,
	COMMENT_TEXT ,
	REPORTING_DATE ,
	TO_CITY ,
	FROM_CITY ,
	REPORTING_TIME
from
	offender_external_movements oem,
	offender_bookings ob
where
	oem.OFFENDER_BOOK_ID = ob.OFFENDER_BOOK_ID
	and oem.ACTIVE_FLAG = 'Y'
	and MOVEMENT_TYPE = 'TRN'
	and TO_AGY_LOC_ID in (
	select
		AGY_LOC_ID
	from
		CASELOAD_AGENCY_LOCATIONS
	where
		CASELOAD_ID = :CASELOAD_ID
		and TO_AGY_LOC_ID not in('OUT'))
order by
	MOVEMENT_DATE desc ,
	MOVEMENT_TIME desc
}
OIDITRAN_OFFEM_UPDATE_V_OFF_EXM {
	UPDATE V_OFF_EXM set OFFENDER_BOOK_ID  = :offenderBookId ,MOVEMENT_SEQ  = :movementSeq ,MOVEMENT_DATE  = :movementDate ,MOVEMENT_TIME  = :movementTime ,INTERNAL_SCHEDULE_TYPE  = :internalScheduleType ,INTERNAL_SCHEDULE_REASON_CODE  = :internalScheduleReasonCode  ,DIRECTION_CODE  = :directionCode ,ARREST_AGENCY_LOC_ID  = :arrestAgencyLocId ,TO_PROV_STAT_CODE  = :toProvStatCode ,ESCORT_CODE  = :escortCode ,FROM_AGY_LOC_ID  = :fromAgyLocId ,TO_AGY_LOC_ID  = :toAgyLocId ,ACTIVE_FLAG  = :activeFlag ,ESCORT_TEXT  = :escortText ,COMMENT_TEXT  = :commentText ,REPORTING_DATE  = :reportingDate ,TO_CITY  = :toCity ,FROM_CITY  = :fromCity ,REPORTING_TIME  = :reportingTime 
	 WHERE OFFENDER_BOOK_ID  = :offenderBookId AND MOVEMENT_SEQ  = :movementSeq 
} 

OIDITRAN_OFFEM_INSERT_OFFENDER_EXTERNAL_MOVEMENTS {
insert into OFFENDER_EXTERNAL_MOVEMENTS(OFFENDER_BOOK_ID , MOVEMENT_SEQ , MOVEMENT_DATE , MOVEMENT_TIME , INTERNAL_SCHEDULE_TYPE , INTERNAL_SCHEDULE_REASON_CODE , DIRECTION_CODE , ARREST_AGENCY_LOC_ID , TO_PROV_STAT_CODE , ESCORT_CODE , FROM_AGY_LOC_ID , TO_AGY_LOC_ID , ACTIVE_FLAG , ESCORT_TEXT , COMMENT_TEXT , REPORTING_DATE , TO_CITY , FROM_CITY , REPORTING_TIME , EVENT_ID , PARENT_EVENT_ID , TO_COUNTRY_CODE , OJ_LOCATION_CODE , APPLICATION_DATE , APPLICATION_TIME , TO_ADDRESS_ID , FROM_ADDRESS_ID , SEAL_FLAG , CREATE_DATETIME , CREATE_USER_ID , MODIFY_DATETIME , MODIFY_USER_ID, MOVEMENT_REASON_CODE, MOVEMENT_TYPE ) values(:offenderBookId , :movementSeq , :movementDate , :movementTime , :internalScheduleType , :internalScheduleReasonCode , :directionCode , :arrestAgencyLocId , :toProvStatCode , :escortCode , :fromAgyLocId , :toAgyLocId , :activeFlag , :escortText , :commentText , :reportingDate , :toCity , :fromCity , :reportingTime , :eventId , :parentEventId , :toCountryCode , :ojLocationCode , :applicationDate , :applicationTime , :toAddressId , :fromAddressId , :sealFlag , current_timestamp , :createUserId , null , null, :movementReasonCode, :movementType )
} 

OIDITRAN_OFFEM_DELETE_V_OFF_EXM { 
	DELETE FROM V_OFF_EXM
} 


OIDITRAN_CREATE_FORM_GLOBALSCREATE_FORM_GLOBALS {
	SELECT DESCRIPTION  FROM   OMS_MODULES WHERE  MODULE_NAME = :V_FORM_NAME
}

OIDITRAN_CGFKCHK_OFF_EM_OFF_EM_OFF_BKG {
	SELECT OFF_BKG.OFFENDER_ID ,OFF_NAME.OFFENDER_ID_DISPLAY OFFENDER_ID_DISPLAY ,OFF_NAME.LAST_NAME ,OFF_NAME.FIRST_NAME ,OFF_NAME.ROOT_OFFENDER_ID FROM   OFFENDER_BOOKINGS OFF_BKG ,OFFENDERS OFF_NAME 
	WHERE  OFF_BKG.OFFENDER_BOOK_ID = :OFFENDER_BOOK_ID AND    OFF_NAME.OFFENDER_ID = OFF_BKG.OFFENDER_ID
}

OIDITRAN_CGFKCHK_OFF_EM_OFF_EM_AGY_LOC {
	SELECT AGY_LOC.DESCRIPTION FROM   AGENCY_LOCATIONS AGY_LOC WHERE  AGY_LOC.AGY_LOC_ID = :TOAGYLOCID
}

OIDITRAN_TOHLOC_LOV_ {
	SELECT LIVING_UNIT_ID ,LIVING_UNIT_CODE ,DESCRIPTION ,CAPACITY FROM LIVING_UNITS WHERE LIVING_UNIT_ID = :P_LIVING_UNIT_ID
}

OIDITRAN_NONASS_SEC_VAL_PROC_ {
	SELECT OFFENDER_ID, AGY_LOC_ID FROM OFFENDER_BOOKINGS WHERE OFFENDER_BOOK_ID = :LV_BOOK_ID
}

OIDITRAN_INS_INTO_BED_ASS_HIST_ {
	SELECT coalesce (MAX (BED_ASSIGN_SEQ), 0) + 1
FROM BED_ASSIGNMENT_HISTORIES
WHERE
  OFFENDER_BOOK_ID = :LV_OFFENDER_BOOK_ID

}

OIDITRAN_INS_INTO_OFF_EXT_MOVEMENT_ {
	select
	coalesce (MAX(MOVEMENT_SEQ),
	0)+ 1
from
	OFFENDER_EXTERNAL_MOVEMENTS
where
	OFFENDER_BOOK_ID = :OFFENDER_BOOK_ID
}

OIDITRAN_INIT_FORM_ {
	SELECT TRUST_ACCOUNTS_FLAG FROM CASELOADS WHERE CASELOAD_ID = :CASELOADID
}

OIDITRAN_INIT_FORM_ {
	SELECT CAL.AGY_LOC_ID FROM CASELOAD_AGENCY_LOCATIONS CAL, AGENCY_LOCATIONS AL WHERE CAL.CASELOAD_ID = :CASELOADID AND CAL.AGY_LOC_ID = AL.AGY_LOC_ID AND CAL.AGY_LOC_ID NOT IN ('OUT','TRN') AND AL.AGENCY_LOCATION_TYPE = 'INST'
}

OIDITRAN_INIT_FORM_ {
	SELECT COUNT(*) FROM CASELOAD_AGENCY_LOCATIONS CAL, AGENCY_LOCATIONS AL WHERE CAL.CASELOAD_ID = :CASELOADID AND CAL.AGY_LOC_ID = AL.AGY_LOC_ID AND CAL.AGY_LOC_ID NOT IN ('OUT','TRN') AND AL.AGENCY_LOCATION_TYPE = 'INST'
}

OIDITRAN_POPULATE_LIVING_UNIT_ {
	SELECT LIVING_UNIT_ID ,LIVING_UNIT_CODE ,DESCRIPTION ,CAPACITY FROM  LIVING_UNITS WHERE LIVING_UNIT_ID = :LIVINGUNITID
}

OIDITRAN_GET_COUNT_OF_AGY_IN_CASE_ {
	SELECT COUNT (*) FROM CASELOAD_ADM_OTHER_PROFILES WHERE CASELOAD_ID = :CASELOADID
}

OIDITRAN_CHECK_CAPACITY_INDIVIDUAL_ {
	SELECT CAPACITY FROM LIVING_UNITS WHERE LIVING_UNIT_ID = P_LIVING_UNIT_ID
}

OIDITRAN_INSERT_MASTER_RECINSERT_MASTER_REC {
	SELECT CR_ACCOUNT_CODE, RECEIPT_PRODUCTION_FLAG FROM TRANSACTION_OPERATIONS WHERE MODULE_NAME = 'OIDITRAN' AND CASELOAD_ID = :P_CSLD_ID AND TXN_TYPE    = 'AD'
}

OIDITRAN_INSERT_MASTER_RECINSERT_MASTER_REC {
	SELECT TXN_POSTING_TYPE,SUB_ACCOUNT_TYPE  FROM ACCOUNT_CODES WHERE ACCOUNT_CODE = :CR_AC AND CASELOAD_TYPE = 'INST'
}

OIDITRAN_INSERT_MASTER_RECINSERT_MASTER_REC {
	select
	DESCRIPTION
from
	TRANSACTION_TYPES
where
	TXN_TYPE = 'AD'
	and CASELOAD_TYPE = 'INST'
}

OIDITRAN_STOR_GLOBALSSTOR_GLOBALS {
	SELECT CR_ACCOUNT_CODE, RECEIPT_PRODUCTION_FLAG  FROM TRANSACTION_OPERATIONS WHERE MODULE_NAME = 'OIDITRAN' AND TXN_TYPE    = 'AD' AND CASELOAD_ID = :CSLD_ID
}

OIDITRAN_STOR_GLOBALSSTOR_GLOBALS {
	SELECT TXN_POSTING_TYPE,SUB_ACCOUNT_TYPE  FROM ACCOUNT_CODES WHERE ACCOUNT_CODE = :CR_AC AND CASELOAD_TYPE = 'INST'
}

OIDITRAN_STOR_GLOBALSSTOR_GLOBALS {
	SELECT DESCRIPTION FROM TRANSACTION_TYPES WHERE TXN_TYPE = :P_TXN_TYPE AND CASELOAD_TYPE = 'INST'
}

OIDITRAN_DISPLAY_NECESSARY_ALERTS_ {
	SELECT CA.MESSAGE_NUMBER FROM CASELOAD_ADM_ALERT_PROFILES CA WHERE CA.CASELOAD_ID = :CASELOADID AND EXISTS ( SELECT NULL FROM OFFENDER_ALERTS OA WHERE OA.ALERT_STATUS = 'ACTIVE' AND OA.ROOT_OFFENDER_ID = :ROOTOFFENDERID AND OA.ALERT_TYPE = CA.ALERT_TYPE AND OA.ALERT_CODE = CA.ALERT_CODE)
}

OIDITRAN_TO_AGY_LOC_ID{
SELECT distinct TO_AGY_LOC_ID FROM V_OFF_EXM
}

OIDITRAN_OFFEM_UPDATE_OFFENDER_BOOKINGS{
UPDATE OFFENDER_BOOKINGS SET AGY_LOC_ID  = :agyLocId ,LIVING_UNIT_ID  = :livingUnitId , ACTIVE_FLAG=:activeFlag,IN_OUT_STATUS=:inOutStatus,STATUS_REASON=:statusReason ,CREATE_AGY_LOC_ID  = :createAgyLocId, MODIFY_DATETIME=current_timestamp ,MODIFY_USER_ID=:modifyUserId WHERE OFFENDER_BOOK_ID=:offenderBookId
} 

OIDITRAN_GET_COUNT_OF_AGY_IN_CASE {
SELECT COUNT (*) FROM CASELOAD_ADM_OTHER_PROFILES WHERE CASELOAD_ID = :CASELOAD_ID
 }
 
OIDITRAN_POPULATE_LIVINGUNIT {
  SELECT LIVING_UNIT_ID ,LIVING_UNIT_CODE ,DESCRIPTION ,CAPACITY
    FROM  LIVING_UNITS WHERE LIVING_UNIT_ID = :LIVUNITID
}
FIND_OFFENDER_ID{
SELECT OFFENDER_ID FROM V_OFFENDERS WHERE OFFENDER_BOOK_ID=:offenderBookId
}

OIDITRAN_OFFEM_UPDATE_OFFENDER_EXTERNAL_MOVEMENTS{
  update OFFENDER_EXTERNAL_MOVEMENTS set modify_datetime = current_timestamp, modify_user_id = :modifyUserId, ACTIVE_FLAG = 'N' where OFFENDER_BOOK_ID = :offenderBookId and ACTIVE_FLAG = 'Y'
}

OIDITRAN_OFFEM_GET_V_OFF_EXM{
select *from v_off_exm voe where movement_date=:movement_date
}

OIDITRAN_NO_OF_BED_AVAILABLE_IN_LOCATION
{
select case when (select capacity - no_of_occupant  from living_units lu where living_unit_id =:living_unit_id) <=0 then 0 else (
select capacity - no_of_occupant  from living_units lu where living_unit_id =:living_unit_id) end 
}
