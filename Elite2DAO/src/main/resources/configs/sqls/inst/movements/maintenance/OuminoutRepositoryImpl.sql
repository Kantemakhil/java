
OUMINOUT_FIND_CGFKMOVERSNINMOVEMENTREAS {
	SELECT REF_CODE1.CODE , REF_CODE1.DESCRIPTION, REF_CODE1.ACTIVE_FLAG, MOV_RSN.MOVEMENT_TYPE IN_MOVEMENT_TYPE FROM REFERENCE_CODES REF_CODE1 , MOVEMENT_REASONS MOV_RSN WHERE REF_CODE1.CODE = MOV_RSN.MOVEMENT_REASON_CODE AND MOV_RSN.MOVEMENT_TYPE = 'ADM' AND REF_CODE1.DOMAIN = 'MOVE_RSN' AND REF_CODE1.ACTIVE_FLAG = 'Y' AND REF_CODE1.EXPIRED_DATE IS NULL ORDER BY REF_CODE1.LIST_SEQ , REF_CODE1.CODE
}

OUMINOUT_MOVERSN_FIND_MOVEMENT_REASONS {
 	SELECT  *  FROM MOVEMENT_REASONS  WHERE  MOVEMENT_REASONS.MOVEMENT_TYPE = 'REL'

}
OUMINOUT_MOVERSN_UPDATE_MOVEMENT_REASONS {
  update MOVEMENT_REASONS set MOVEMENT_TYPE =:movementType, MOVEMENT_REASON_CODE =:movementReasonCode, DESCRIPTION =:description, OPEN_CONTACT_FLAG =:openContactFlag, CLOSE_CONTACT_FLAG =:closeContactFlag, ACTIVE_FLAG =:activeFlag, LIST_SEQ =:listSeq, EXPIRY_DATE =:expiryDate, NOTIFICATION_TYPE =:notificationType, NOTIFICATION_FLAG =:notificationFlag, BILLING_SERVICE_FLAG =:billingServiceFlag, TRANSPORTATION_FLAG =:transportationFlag, HEADER_STATUS_FLAG =:headerStatusFlag, IN_MOVEMENT_TYPE =:inMovementType, IN_MOVEMENT_REASON_CODE =:inMovementReasonCode, ESC_RECAP_FLAG =:escRecapFlag, MODIFY_DATETIME = CURRENT_TIMESTAMP, MODIFY_USER_ID =:modifyUserId , SEAL_FLAG =:sealFlag, UPDATE_ALLOWED_FLAG =:updateAllowedFlag, TRN_REQ_APVL_FLAG =:trnReqApvlFlag, TRN_SCHD_TRIP_FLAG =:trnSchdTripFlag, TRN_ASSIGN_PRIORITY_FLAG =:trnAssignPriorityFlag, TRN_P_LIST_FLAG =:trnpListFlag, TRN_PRIORITY_SEQ =:trnPrioritySeq, SUBSEQUENT_MV_TYPE =:subSequentMvType, SUBSEQUENT_MV_RSN_CODE =:subSequentMvRsnCode, REASON_FLAG =:reasonFlag, DRIVE_TO_OIDUMAPP_FLAG =:driveToOidumappFlag, INACTIVATE_SENT =:inActivateSent, SUSPEND_REACTIVATE_SENT =:suspendReactiveSent where MOVEMENT_TYPE =:movementType and MOVEMENT_REASON_CODE =:movementReasonCode 	
}

OUMINOUT_MOVERSN_DELETE_MOVEMENT_REASONS { 
	DELETE FROM MOVEMENT_REASONS WHERE MOVEMENT_TYPE = :movementType AND MOVEMENT_REASON_CODE = :movementReasonCode
}


OUMINOUT_CGRICHK_MOVEMENT_REASONS_MOVEMENTS {
	SELECT count(*) MOVEMENT_TYPE  FROM V_OFFENDER_MOVEMENTS V_OFF_M WHERE V_OFF_M.MOVEMENT_TYPE = :movementType
}

OUMINOUT_CGRICHK_MOVEMENT_REASONSS_BOOKING_EVENTS {
	SELECT count(*) FROM OFFENDER_BOOKING_EVENTS OFF_BKG WHERE OFF_BKG.BOOKING_EVENT_CODE = :movementType  AND OFF_BKG.REASON_CODE = :movementReasonCode
}


