
OIDISTAT_FIND_RGIMPRISONMENTSTA {
 	select
	REF_CODE.CODE ,
	REF_CODE.DESCRIPTION ,
	REF_CODE.DOMAIN
from
	REFERENCE_CODES REF_CODE
where
	domain = 'IMP_STS'
	and ( ACTIVE_FLAG = 'Y'
	)
order by
	LIST_SEQ ,
	DESCRIPTION
}

OIDISTAT_FIND_RGAGYLOCID {
SELECT   AGY_LOC.AGY_LOC_ID Code , AGY_LOC.DESCRIPTION description ,
case when ( select count(*)  from AGENCY_LOCATIONS WHERE ( AGY_LOC_ID IN (               SELECT AGY_LOC_ID  FROM CASELOAD_AGENCY_LOCATIONS 
WHERE CASELOAD_ID = :CASELOADID AND AGY_LOC_ID NOT IN ( 'TRN' , 'OUT'  )  )  )  AND AGY_LOC_ID = AGY_LOC.AGY_LOC_ID) >0 then 'Y' else 'N' end active_Flag
FROM AGENCY_LOCATIONS AGY_LOC      ORDER BY LIST_SEQ
}

OIDISTAT_OFFIMPS_FIND_OFFENDER_IMPRISON_STATUSES {
 	SELECT OFFENDER_BOOK_ID ,IMPRISON_STATUS_SEQ ,IMPRISONMENT_STATUS ,EFFECTIVE_DATE ,EFFECTIVE_TIME ,EXPIRY_DATE ,AGY_LOC_ID ,CREATE_DATE ,COMMENT_TEXT ,CREATE_DATETIME ,CREATE_USER_ID ,MODIFY_DATETIME ,MODIFY_USER_ID ,STATE ,SEAL_FLAG ,ERROR_FLAG   FROM OFFENDER_IMPRISON_STATUSES  /* where  */
}
OIDISTAT_OFFIMPS_INSERT_OFFENDER_IMPRISON_STATUSES {
	INSERT INTO OFFENDER_IMPRISON_STATUSES(OFFENDER_BOOK_ID ,IMPRISON_STATUS_SEQ ,IMPRISONMENT_STATUS ,EFFECTIVE_DATE ,EFFECTIVE_TIME ,EXPIRY_DATE ,AGY_LOC_ID ,CREATE_DATE ,COMMENT_TEXT ,CREATE_DATETIME ,CREATE_USER_ID ,MODIFY_DATETIME ,STATE ,SEAL_FLAG ,ERROR_FLAG ) VALUES(:offenderBookId ,:imprisonStatusSeq ,:imprisonmentStatus ,:effectiveDate ,:effectiveTime ,:expiryDate ,:agyLocId ,:createDate ,:commentText ,CURRENT_TIMESTAMP ,:createUserId ,null,:state ,:sealFlag ,:errorFlag )
}

OIDISTAT_OFFIMPS_UPDATE_OFFENDER_IMPRISON_STATUSES {
	UPDATE OFFENDER_IMPRISON_STATUSES set OFFENDER_BOOK_ID  = :offenderBookId ,IMPRISON_STATUS_SEQ  = :imprisonStatusSeq ,IMPRISONMENT_STATUS  = :imprisonmentStatus ,EFFECTIVE_DATE  = :effectiveDate ,EFFECTIVE_TIME  = :effectiveTime ,EXPIRY_DATE  = :expiryDate ,AGY_LOC_ID  = :agyLocId ,CREATE_DATE  = :createDate ,COMMENT_TEXT  = :commentText ,MODIFY_DATETIME  = CURRENT_TIMESTAMP ,MODIFY_USER_ID  = :modifyUserId ,STATE  = :state ,SEAL_FLAG  = :sealFlag ,ERROR_FLAG  = :errorFlag  where OFFENDER_BOOK_ID  = :offenderBookId  and IMPRISON_STATUS_SEQ  = :imprisonStatusSeq
}


OIDISTAT_OFF_BKG_ONCHECKDELETEMASTER_ {
	SELECT 1 FROM OFFENDER_IMPRISON_STATUSES O WHERE O.OFFENDER_BOOK_ID = :OFFENDERBOOKID
}

OIDISTAT_OFF_IMPS_PREINSERT_STATUS {
	select
	OIS.IMPRISONMENT_STATUS IMPRISONMENT_STATUS ,
	OIS.EFFECTIVE_DATE EFFECTIVE_DATE
from
	OFFENDER_IMPRISON_STATUSES OIS
where
	OIS.OFFENDER_BOOK_ID = :offenderBookId
	and OIS.IMPRISON_STATUS_SEQ = (
	select
		MAX(OIS1.IMPRISON_STATUS_SEQ)
	from
		OFFENDER_IMPRISON_STATUSES OIS1
	where
		OIS.OFFENDER_BOOK_ID = OIS1.OFFENDER_BOOK_ID
		and coalesce (ERROR_FLAG,
		'N') <> 'Y')
}

OIDISTAT_OFF_IMPS_PREINSERT_SEQ{
	select
	coalesce ( MAX (IMPRISON_STATUS_SEQ),
	0 ) + 1
from
	OFFENDER_IMPRISON_STATUSES
where
	OFFENDER_BOOK_ID = :OFFENDERBOOKID
}

OIDISTAT_OFF_IMPS_POSTQUERY_ {
	SELECT EXPIRY_DATE FROM OFFENDER_IMPRISON_STATUSES WHERE OFFENDER_BOOK_ID = :OFFENDERBOOKID AND IMPRISON_STATUS_SEQ = :IMPRISONSTATUSSEQ
}

OIDISTAT_PROCESS_BILL_PROFILE_DELAY_DAYS {
 SELECT ABP.DELAY_DAYS FROM AGENCY_BILLING_PROFILES ABP, IMP_AGY_BILLING_DETAILS IABD WHERE ABP.CASELOAD_ID = (select working_caseload_id      from staff_members        where user_id = USER) AND ABP.ALL_OFFENDER_FLAG = 'N' AND ABP.ACTIVE_FLAG = 'Y' AND IABD.CASELOAD_ID = ABP.CASELOAD_ID AND IABD.BILLING_TYPE = ABP.BILLING_TYPE AND IABD.BILL_TO_AGENCY_ID = ABP.AGENCY_ID AND EXISTS ( SELECT '1' FROM IMP_AGY_BILLING_MASTERS IABM WHERE IABM.IMP_AGY_BILLING_MASTER_ID = IABD.IMP_AGY_BILLING_MASTER_ID AND IABM.INST_LOCATION_ID =:P_AGY_LOC_ID AND IABM.IMPRISONMENT_STATUS = :P_IMPRISONMENT_STATUS)
}

OIDISTAT_PROCESS_BILL_PROFILE_RECORD {
	SELECT ABP.AGENCY_ID, ABP.BILLING_TYPE, ABP.RATE, ABP.FREQUENCY, IABD.IMP_AGY_BILLING_DETAIL_ID IMP_AGY_BILLING_DETAIL_ID  FROM AGENCY_BILLING_PROFILES ABP, IMP_AGY_BILLING_DETAILS IABD WHERE ABP.CASELOAD_ID = :LV_CSLD_ID AND ABP.ALL_OFFENDER_FLAG = 'N' AND ABP.ACTIVE_FLAG = 'Y' AND IABD.CASELOAD_ID = ABP.CASELOAD_ID AND IABD.BILLING_TYPE = ABP.BILLING_TYPE AND IABD.BILL_TO_AGENCY_ID = ABP.AGENCY_ID AND EXISTS ( SELECT '1' FROM IMP_AGY_BILLING_MASTERS IABM WHERE IABM.IMP_AGY_BILLING_MASTER_ID = IABD.IMP_AGY_BILLING_MASTER_ID AND IABM.INST_LOCATION_ID = :P_LOC_ID AND IABM.IMPRISONMENT_STATUS = :P_IMP_STS)
}

OIDISTAT_PROCESS_BILL_PROFILE_COUNT {
	select
	COUNT(OFFENDER_BOOKING_ID)
from
	OFFENDER_BILLING_PROFILES
where
	OFFENDER_BOOKING_ID = :LV_OFF_BOOK_ID
	and AGENCY_ID = :LV_AGENCY
	and CASELOAD_ID = :LV_CSLD_ID
	and BILLING_TYPE = :LV_BIL_TYPE
	and date_TRUNC('D',EFFECTIVE_DATE_START) = date_TRUNC('D',:LV_EFF_DATE_START::timestamp ) + interval '1 day' * :LV_DELAY_DAY
}

OIDISTAT_PROCESS_BILL_PROFILE_CASELOADS {
	SELECT CAL.CASELOAD_ID FROM CASELOAD_AGENCY_LOCATIONS CAL, CASELOADS C WHERE CAL.CASELOAD_ID = C.CASELOAD_ID AND CAL.AGY_LOC_ID = :P_LOC_ID AND C.BILLING_FLAG = 'Y' AND CAL.AGY_LOC_ID NOT IN ('TRN','OUT')
}

OIDISTAT_PROCESS_BILL_PROFILE_MAX_EFFECTIVE {
	select
	MAX(date_TRUNC('D', EFFECTIVE_DATE_START)::date) EFFECTIVE_DATE_START
from
	OFFENDER_BILLING_PROFILES OBP
where
	CASELOAD_ID = :LV_CSLD_ID
	and OFFENDER_BOOKING_ID = :LV_OFF_BOOK_ID
	and EFFECTIVE_DATE_END is null
	
}

OIDISTAT_PROCESS_BILL_PROFILE_AGENCY_DELAY_DAYS {
	SELECT DELAY_DAYS FROM AGENCY_BILLING_PROFILES WHERE AGENCY_ID   = :LV_AGENCY AND BILLING_TYPE   = :LV_BIL_TYPE AND CASELOAD_ID   = :CASELOADID
}

OIDISTAT_PROCESS_BILL_PROFILE_VS_GET_COUNT_CUR {
	SELECT BILLING_FLAG FROM CASELOADS WHERE CASELOAD_ID = :LV_CSLD_ID
}

OIDISTAT_CHK_IMP_DATE_MOVEMENT {
	SELECT OEM.MOVEMENT_DATE  FROM OFFENDER_EXTERNAL_MOVEMENTS OEM WHERE OEM.OFFENDER_BOOK_ID = :P_OFFENDER_BOOK_ID AND (OEM.TO_AGY_LOC_ID   = :P_CASELOAD_ID OR OEM.TO_AGY_LOC_ID IN (SELECT AGY_LOC_ID FROM CASELOAD_AGENCY_LOCATIONS CAL WHERE CAL.CASELOAD_ID = :P_CASELOAD_ID )) AND OEM.MOVEMENT_TYPE = 'ADM' AND OEM.MOVEMENT_SEQ =(SELECT MIN(OEMX.MOVEMENT_SEQ) FROM OFFENDER_EXTERNAL_MOVEMENTS OEMX WHERE OEMX.OFFENDER_BOOK_ID = OEM.OFFENDER_BOOK_ID AND OEMX.MOVEMENT_TYPE = 'ADM' AND (OEMX.TO_AGY_LOC_ID = :P_CASELOAD_ID OR OEMX.TO_AGY_LOC_ID IN (SELECT AGY_LOC_ID FROM CASELOAD_AGENCY_LOCATIONS CAL WHERE CAL.CASELOAD_ID = :P_CASELOAD_ID ) ) )
}

OIDISTAT_CHK_IMP_DATE_EFFECTIVE {
	select
	EFFECTIVE_DATE
from
	OFFENDER_IMPRISON_STATUSES
where
	OFFENDER_BOOK_ID =:OFFENDERBOOKID
	and IMPRISON_STATUS_SEQ in (
	select
		MAX(IMPRISON_STATUS_SEQ)
	from
		OFFENDER_IMPRISON_STATUSES
	where
		OFFENDER_BOOK_ID =:OFFENDERBOOKID
		and coalesce(ERROR_FLAG,
		'N') <> 'Y')
	and AGY_LOC_ID in (
	select
		AGY_LOC_ID
	from
		CASELOAD_AGENCY_LOCATIONS CAL
	where
		CAL.CASELOAD_ID = :CASELOADID)
}

OIDISTAT_CHK_IMP_DATE_EFFECTIVE_TIME {
	select
	EFFECTIVE_DATE::date EFFECTIVE_DATE ,
	EFFECTIVE_TIME
from
	OFFENDER_IMPRISON_STATUSES
where
	OFFENDER_BOOK_ID =:OFFENDERBOOKID
	and IMPRISON_STATUS_SEQ in (
	select
		MAX(IMPRISON_STATUS_SEQ)
	from
		OFFENDER_IMPRISON_STATUSES
	where
		OFFENDER_BOOK_ID =:OFFENDERBOOKID
		and coalesce(ERROR_FLAG,
		'N') <> 'Y')
	and AGY_LOC_ID in (
	select
		AGY_LOC_ID
	from
		CASELOAD_AGENCY_LOCATIONS CAL
	where
		CAL.CASELOAD_ID = :CASELOADID)
}
OIDISTAT_GET_PROFILE_VALUE_CLIENT {
SELECT PROFILE_VALUE FROM SYSTEM_PROFILES WHERE PROFILE_TYPE='CLIENT' and PROFILE_CODE='BOS'
}
OIDISTAT_GET_EFFECTIVE_DATE_SYS {
select
	(:effectiveDate::date + interval '10 days' - interval '1 days')::date
from
	DUAL
}
OIDISTAT_UPDATE_OFFENDER_BILLING_PROFILES_EQUALORLESS {

UPDATE OFFENDER_BILLING_PROFILES
               		SET EFFECTIVE_DATE_END = date_trunc('D',to_date(:effectiveDateEnd,'DD/MM/YYYY H24:MM:SS')),
                  		EFFECTIVE_END_TIME = :effectiveTime,
                  		MODIFY_DATETIME =CURRENT_TIMESTAMP,
                            MODIFY_USER_ID =:modifyUserId
             		WHERE CASELOAD_ID = :caseloadId AND
                   		OFFENDER_BOOKING_ID = :offenderBookId AND
                   		EFFECTIVE_DATE_END IS NULL;
                   		
                                   	
     
}
OIDISTAT_UPDATE_OFFENDER_BILLING_PROFILES_GREATER {

                   		update
	OFFENDER_BILLING_PROFILES
set
	EFFECTIVE_DATE_END = date_trunc('D', to_date(:effectiveDateEnd, 'DD/MM/YYYY H24:MM:SS') )  + :delayDays - interval '1 day',
	EFFECTIVE_END_TIME  = date_trunc('D', to_date(:effectiveTime , 'DD/MM/YYYY H24:MM:SS') ) - interval '1 day',
	MODIFY_DATETIME = CURRENT_TIMESTAMP,
	MODIFY_USER_ID =:modifyUserId
where
	CASELOAD_ID = :caseloadId
	and OFFENDER_BOOKING_ID = :offenderBookId
	and EFFECTIVE_DATE_END is null
}
OIDISTAT_UPDATE_OFFENDER_BILLING_PROFILES_NOT_EQUAL_FREQUENCY {
update
	OFFENDER_BILLING_PROFILES
set
	EFFECTIVE_DATE_END = null,
	EFFECTIVE_END_TIME = null,
	IMP_AGY_BILLING_DETAIL_ID = :impAgyBillingDetailId,
	MODIFY_DATETIME = CURRENT_TIMESTAMP,
	MODIFY_USER_ID =:modifyUserId
where
	OFFENDER_BOOKING_ID = :offenderBookingId
	and AGENCY_ID = :agencyId
	and CASELOAD_ID = :caseloadId
	and BILLING_TYPE = :billingType
	and EFFECTIVE_DATE_START::date = date_TRUNC('D',to_date(:effectiveDateStart,'DD/MM/YYYY H24:MM:SS')) +  :delayDays
}
OIDISTAT_INSERT_OFFENDER_BILLING_PROFILES_EQUAL_FREQUENCY {

insert
	into
	OFFENDER_BILLING_PROFILES( OFFENDER_BOOKING_ID,
	AGENCY_ID,
	CASELOAD_ID,
	BILLING_TYPE,
	EFFECTIVE_DATE_START,
	EFFECTIVE_DATE_END,
	CREATE_DATE,
	RATE,
	IMP_AGY_BILLING_DETAIL_ID,
	EFFECTIVE_START_TIME,
	EFFECTIVE_END_TIME,
	ELIGIBLE_DATE,
	CREATE_USER_ID,
	CREATE_DATETIME,
	MODIFY_DATETIME)
values ( :offenderBookingId,
:agencyId,
:caseloadId,
:billingType,
date_TRUNC('D',to_date(:effectiveDateStart,'DD/MM/YYYY H24:MM:SS'))+ :delayDays ,
date_TRUNC('D',to_date(:effectiveEndDate,'DD/MM/YYYY H24:MM:SS')),
date_TRUNC('D',to_date(:createDate,'DD/MM/YYYY H24:MM:SS')),
:rate,
:impAgyBillingDetailId,
date_TRUNC('D',to_date(:effectiveStartTime,'DD/MM/YYYY H24:MM:SS'))+ :delayDays,
:effectiveEndTime,
date_TRUNC('D',to_date(:eligibleDate,'DD/MM/YYYY H24:MM:SS')),
:createUserId,
CURRENT_TIMESTAMP,
null)
                                                          )
}
OIDISTAT_UPDATE_IMPRISON_STATUSES {
UPDATE OFFENDER_IMPRISON_STATUSES
         SET EXPIRY_DATE = :expiryDate,
         MODIFY_DATETIME =CURRENT_TIMESTAMP,
         MODIFY_USER_ID =:modifyUserId
       WHERE OFFENDER_BOOK_ID = :offenderBookId
         AND EXPIRY_DATE IS NULL
         AND IMPRISON_STATUS_SEQ = ( 
                SELECT MAX(IMPRISON_STATUS_SEQ) 
          	     FROM OFFENDER_IMPRISON_STATUSES
                WHERE OFFENDER_BOOK_ID = :offenderBookId)
}

