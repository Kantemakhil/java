TRANSFER_BOOKING_OMS_GET_OFF_IDEN_TYPE_CUR{
SELECT PROFILE_VALUE FROM SYSTEM_PROFILES WHERE PROFILE_TYPE = 'PRODUCT' AND PROFILE_CODE = 'TRANSFER_ID'
}
TRANSFER_BOOKING_OMS_GET_NEW_SEQ_CUR{
SELECT MAX (CAST (OFFENDER_ID_SEQ AS FLOAT)) FROM OFFENDER_IDENTIFIERS WHERE OFFENDER_ID = :pOffenderIdTo
}
TRANSFER_BOOKING_OMS_GET_CASELOAD_TYPE_CUR{
SELECT CASELOAD_TYPE FROM CASELOADS CL, STAFF_MEMBERS SM WHERE CL.CASELOAD_ID = SM.WORKING_CASELOAD_ID AND SM.USER_ID = :user
}
TRANSFER_BOOKING_OMS_INSERT_OFF_IDENT_RECORD{
insert into OFFENDER_IDENTIFIERS (OFFENDER_ID, OFFENDER_ID_SEQ, IDENTIFIER_TYPE, IDENTIFIER, ROOT_OFFENDER_ID, CASELOAD_TYPE, MODIFY_USER_ID, MODIFY_DATETIME, VERIFIED_FLAG )
values (:offenderId, :offenderIdSeq, :identifierType, :identifier, :rootOffenderId, :caseloadType, null, null, 'Y' )
}
TRANSFER_BOOKING_OMS_DELETE_OFF_IDENT_RECORD{
DELETE FROM OFFENDER_IDENTIFIERS WHERE IDENTIFIER_TYPE = :lvIdentType AND ROOT_OFFENDER_ID = :pRootOffenderIdTo
}


TRANSFER_BOOKING_OMS_TXNFER_NON_ASSOC_1{
SELECT OFFENDER_ID, NS_OFFENDER_ID FROM OFFENDER_NON_ASSOCIATIONS WHERE OFFENDER_BOOK_ID = :pFromOffenderBookId
}
TRANSFER_BOOKING_OMS_TXNFER_NON_ASSOC_2{
SELECT OFFENDER_ID, NS_OFFENDER_ID FROM OFFENDER_NON_ASSOCIATIONS WHERE NS_OFFENDER_BOOK_ID = :pFromOffenderBookId
}
TRANSFER_BOOKING_OMS_TXNFER_NA_DETAILS_1{
SELECT OFFENDER_ID, NS_OFFENDER_ID FROM OFFENDER_NA_DETAILS WHERE OFFENDER_BOOK_ID = :pFromOffenderBookId
}
TRANSFER_BOOKING_OMS_TXNFER_NA_DETAILS_2{
SELECT OFFENDER_ID, NS_OFFENDER_ID FROM OFFENDER_NA_DETAILS WHERE NS_OFFENDER_BOOK_ID = :pFromOffenderBookId
}
TRANSFER_BOOKING_OMS_GET_LATEST_BOOKING{
select OFFENDER_BOOK_ID from OFFENDER_BOOKINGS where (OFFENDER_ID = :pToOffenderId or OFFENDER_BOOK_ID = :pFromOffenderBookId) and BOOKING_BEGIN_DATE = ( select MAX (BOOKING_BEGIN_DATE) from OFFENDER_BOOKINGS where ( OFFENDER_ID = :pToOffenderId or OFFENDER_BOOK_ID = :pFromOffenderBookId )) order by OFFENDER_BOOK_ID desc
}



TRANSFER_BOOKING_OMS_UPDATE_OFFENDER_NON_ASSOCIATIONS{
update OFFENDER_NON_ASSOCIATIONS set OFFENDER_ID = :pToOffenderId, MODIFY_USER_ID = :modifyUserId, MODIFY_DATETIME = CURRENT_TIMESTAMP where OFFENDER_ID = :offenderId and NS_OFFENDER_ID = :nsOffenderId
}

TRANSFER_BOOKING_OMS_UPDATE_OFFENDER_NA_DETAILS{
 UPDATE OFFENDER_NA_DETAILS set OFFENDER_ID = :pToOffenderId, MODIFY_USER_ID = :modifyUserId, MODIFY_DATETIME = CURRENT_TIMESTAMP  where OFFENDER_ID = :offenderId and NS_OFFENDER_ID = :nsOffenderId
}

TRANSFER_BOOKING_OMS_DELETE_OFFENDER_NA_DETAILS{
DELETE FROM OFFENDER_NA_DETAILS WHERE OFFENDER_ID = :offenderId AND NS_OFFENDER_ID = :nsOffenderId
}

TRANSFER_BOOKING_OMS_DELETE_OFFENDER_NON_ASSOCIATIONS{
DELETE FROM OFFENDER_NON_ASSOCIATIONS WHERE OFFENDER_ID = :offenderId AND NS_OFFENDER_ID = :nsOffenderId
}

TRANSFER_BOOKING_OMS_UPDATE_OFFENDER_NA_DETAILS1{
UPDATE OFFENDER_NA_DETAILS SET OFFENDER_BOOK_ID = :lvLatestBookingId WHERE OFFENDER_ID = :pToOffenderId AND NS_OFFENDER_ID = :nsOffenderId
}

TRANSFER_BOOKING_OMS_UPDATE_OFFENDER_NON_ASSOCIATIONS1{
UPDATE OFFENDER_NON_ASSOCIATIONS SET OFFENDER_BOOK_ID = :lvLatestBookingId WHERE OFFENDER_ID = :pToOffenderId AND NS_OFFENDER_ID = :nsOffenderId
}




TRANSFER_BOOKING_OMS_UPDATE_OFFENDER_NON_ASSOCIATIONS2{
update OFFENDER_NON_ASSOCIATIONS set NS_OFFENDER_ID = :pToOffenderId, MODIFY_USER_ID = :modifyUserId, MODIFY_DATETIME = CURRENT_TIMESTAMP where OFFENDER_ID = :offenderId and NS_OFFENDER_ID = :nsOffenderId
}

TRANSFER_BOOKING_OMS_UPDATE_OFFENDER_NA_DETAILS2{
 UPDATE OFFENDER_NA_DETAILS set NS_OFFENDER_ID = :pToOffenderId, MODIFY_USER_ID = :modifyUserId, MODIFY_DATETIME = CURRENT_TIMESTAMP where OFFENDER_ID = :offenderId and NS_OFFENDER_ID = :nsOffenderId
}

TRANSFER_BOOKING_OMS_DELETE_OFFENDER_NA_DETAILS2{
DELETE FROM OFFENDER_NA_DETAILS WHERE OFFENDER_ID = :offenderId AND NS_OFFENDER_ID = :nsOffenderId
}

TRANSFER_BOOKING_OMS_DELETE_OFFENDER_NON_ASSOCIATIONS2{
DELETE FROM OFFENDER_NON_ASSOCIATIONS WHERE OFFENDER_ID = :offenderId AND NS_OFFENDER_ID = :nsOffenderId
}

TRANSFER_BOOKING_OMS_UPDATE_OFFENDER_NA_DETAILS21{
UPDATE OFFENDER_NA_DETAILS SET OFFENDER_BOOK_ID = :lvLatestBookingId WHERE OFFENDER_ID = :offenderId AND NS_OFFENDER_ID = :pToOffenderId
}

TRANSFER_BOOKING_OMS_UPDATE_OFFENDER_NON_ASSOCIATIONS21{
UPDATE OFFENDER_NON_ASSOCIATIONS SET OFFENDER_BOOK_ID = :lvLatestBookingId WHERE OFFENDER_ID = :offenderId AND NS_OFFENDER_ID = :pToOffenderId
}



TRANSFER_BOOKING_OMS_PHONE_NUM_EXISTS{
select COUNT (*) from PHONES TO_P, PHONES FR_P where TO_P.OWNER_CLASS = 'OFF' and TO_P.OWNER_ID = :pToOffenderId and FR_P.OWNER_CLASS = 'OFF' and FR_P.OWNER_ID = :pFromOffenderId and FR_P.PHONE_TYPE = TO_P.PHONE_TYPE and FR_P.PHONE_NO = TO_P.PHONE_NO and coalesce (FR_P.EXT_NO, '{EXT}') = coalesce (TO_P.EXT_NO, '{EXT}') and FR_P.PHONE_ID = :pPhoneId
}

TRANSFER_BOOKING_OMS_GET_TRANS_PHONES{
select PHONE_ID from PHONES where OWNER_CLASS = 'OFF'and OWNER_ID = :pFromOffenderId and CREATE_DATETIME between :pStartDate and :pEndDate and (MODIFY_DATETIME is null or MODIFY_DATETIME between :pStartDate and :pEndDate)
}

TRANSFER_BOOKING_OMS_LOCK_PHONE{
SELECT * FROM PHONES WHERE OWNER_CLASS = :pOwnerClass AND OWNER_ID = :pOwnerId
}
 
TRANSFER_BOOKING_OMS_DELETE_PHONE{
DELETE FROM PHONES WHERE PHONE_ID = :pPhoneId
}
 
TRANSFER_BOOKING_OMS_GET_OLD_PHONE_DATA{
select * from phones p where phone_id  = :phoneId
}
 
TRANSFER_BOOKING_OMS_UPDATE_PHONE{
UPDATE PHONES SET OWNER_ID = :pOwnerId, MODIFY_USER_ID = :modifyUserId, MODIFY_DATETIME = CURRENT_TIMESTAMP WHERE PHONE_ID = :pPhoneId
}
 
 
 
TRANSFER_BOOKING_OMS_ADDRESS_EXISTS{
SELECT COUNT (*) FROM ADDRESSES TOA, ADDRESSES FROMA WHERE TOA.OWNER_CLASS = 'OFF' AND TOA.OWNER_ID = :pToOffenderId AND FROMA.OWNER_CLASS = 'OFF' AND FROMA.OWNER_ID = :pFromOffenderId AND COALESCE (FROMA.CITY_CODE, '{CITY_C}') = COALESCE (TOA.CITY_CODE, '{CITY_C}') AND COALESCE (FROMA.COUNTRY_CODE, '{COUNTRY_C}') = COALESCE (TOA.COUNTRY_CODE, '{COUNTRY_C}') AND COALESCE (FROMA.PROV_STATE_CODE, '{STATE_C}') = COALESCE (TOA.PROV_STATE_CODE, '{STATE_C}') AND COALESCE (FROMA.CITY_NAME, '{CITY_N}') = COALESCE (TOA.CITY_NAME, '{CITY_N}') AND COALESCE (FROMA.ZIP_POSTAL_CODE, '{POST_C}') = COALESCE (TOA.ZIP_POSTAL_CODE, '{POST_C}') AND COALESCE (FROMA.STREET_NUMBER, '{STREET_NO}') = COALESCE (TOA.STREET_NUMBER, '{STREET_NO}') AND COALESCE (FROMA.STREET, '{STREET}') = COALESCE (TOA.STREET, '{STREET}') AND FROMA.ADDRESS_ID = :pAddressId
}
 
TRANSFER_BOOKING_OMS_TRANS_ADDRESSES_DETAILS{
--SELECT ADDRESS_ID FROM ADDRESSES WHERE OWNER_CLASS = 'OFF' AND OWNER_ID = :pFromOffenderId AND CREATE_DATETIME BETWEEN :pStartDate AND :pEndDate AND (MODIFY_DATETIME IS NULL OR MODIFY_DATETIME BETWEEN :pStartDate AND :pEndDate)
}
 
TRANSFER_BOOKING_OMS_LOCK_INTERNET_ADDR{
SELECT * FROM INTERNET_ADDRESSES WHERE OWNER_CLASS = :pOwnerClass AND OWNER_ID = :pOwnerId
}
 
TRANSFER_BOOKING_OMS_LOCK_ADDRESS_USAGE{
SELECT * FROM ADDRESS_USAGES WHERE ADDRESS_ID = :pAddressId
}
 
TRANSFER_BOOKING_OMS_DELETE_PHONES_BY_ADDR_ID{
DELETE FROM PHONES WHERE OWNER_CLASS = 'ADDR' AND OWNER_ID = :pAddressId
}
 
TRANSFER_BOOKING_OMS_GET_PHONES_BY_ADDR_ID{
SELECT * FROM PHONES WHERE OWNER_CLASS = 'ADDR' AND OWNER_ID = :pAddressId
}
 
 
TRANSFER_BOOKING_OMS_DELETE_INTERNET_ADDRESSES{
DELETE FROM INTERNET_ADDRESSES WHERE OWNER_CLASS = 'ADDR' AND OWNER_ID = :pAddressId
}
 
TRANSFER_BOOKING_OMS_GET_INTERNET_ADDRESSES_BY_ADDR_ID{
SELECT * FROM INTERNET_ADDRESSES WHERE OWNER_CLASS = 'ADDR' AND OWNER_ID = :pAddressId
}
 
TRANSFER_BOOKING_OMS_DELETE_ADDRESS_USAGES{
DELETE FROM ADDRESS_USAGES WHERE ADDRESS_ID = :pAddressId
}
 
TRANSFER_BOOKING_OMS_DELETE_ADDRESSES{
DELETE FROM ADDRESSES WHERE ADDRESS_ID = :pAddressId
}
  
TRANSFER_BOOKING_OMS_GET_ADDRESSES_BY_ADDR_ID{
SELECT *  FROM ADDRESSES WHERE ADDRESS_ID = :pAddressId
}
 
TRANSFER_BOOKING_OMS_UPDATE_ADDRESSES{
UPDATE ADDRESSES SET OWNER_ID = :pToOffenderId, MODIFY_USER_ID = :modifyUserId, MODIFY_DATETIME = CURRENT_TIMESTAMP WHERE ADDRESS_ID = :pAddressId
}
 
 
TRANSFER_BOOKING_OMS_INT_ADDRESS_EXISTS{
SELECT COUNT (*) FROM INTERNET_ADDRESSES TOA, INTERNET_ADDRESSES FROMA WHERE TOA.OWNER_CLASS = 'OFF' AND TOA.OWNER_ID = :pToOffenderId AND FROMA.OWNER_CLASS = 'OFF' AND FROMA.OWNER_ID = :pFromOffenderId AND FROMA.INTERNET_ADDRESS_CLASS = TOA.INTERNET_ADDRESS_CLASS AND FROMA.INTERNET_ADDRESS = TOA.INTERNET_ADDRESS AND FROMA.INTERNET_ADDRESS_ID = :pIntAddressId
} 

TRANSFER_BOOKING_OMS_TRANS_INT_ADDR{
SELECT INTERNET_ADDRESS_ID FROM INTERNET_ADDRESSES WHERE OWNER_CLASS = 'OFF' AND OWNER_ID = :pFromOffenderId AND CREATE_DATETIME BETWEEN :pStartDate AND :pEndDate AND (MODIFY_DATETIME IS NULL OR MODIFY_DATETIME BETWEEN :pStartDate AND :pEndDate)
}

TRANSFER_BOOKING_OMS_DELETE_INTERNET_ADDRESSES_BY_INT_ADD_ID{
DELETE FROM INTERNET_ADDRESSES WHERE INTERNET_ADDRESS_ID = :pInternetAddressId
}

TRANSFER_BOOKING_OMS_GET_INTERNET_ADDRESSES_BY_INT_ADD_ID{
  SELECT * FROM INTERNET_ADDRESSES WHERE INTERNET_ADDRESS_ID = :pInternetAddressId
}

TRANSFER_BOOKING_OMS_UPDATE_INTERNET_ADDRESSES{
UPDATE INTERNET_ADDRESSES SET OWNER_ID = :pToOffenderId, MODIFY_USER_ID = :modifyUserId, MODIFY_DATETIME = CURRENT_TIMESTAMP WHERE INTERNET_ADDRESS_ID = :pInternetAddressId
}


TRANSFER_BOOKING_OMS_GET_OFF_COMM_FILE_VALS{
SELECT COALESCE (MAX (OFFENDER_FILE_SEQ), 0), COALESCE (MAX (OFFENDER_FILE_NUM), 0) FROM OFFENDER_COMMUNITY_FILES WHERE OFFENDER_ID = :pToRootOffenderId 
}

TRANSFER_BOOKING_OMS_UPDATE_OFFENDER_FILE_DELIVERIES{
 UPDATE OFFENDER_FILE_DELIVERIES
         SET OFFENDER_ID = :pToRootOffenderId,
             OFFENDER_FILE_SEQ = :offenderFileSeq,
              MODIFY_USER_ID = :modifyUserId, 
              MODIFY_DATETIME = CURRENT_TIMESTAMP
       WHERE (OFFENDER_ID, OFFENDER_FILE_SEQ) IN (
                SELECT OFFENDER_ID, OFFENDER_FILE_SEQ
                  FROM OFFENDER_COMMUNITY_FILES
                 WHERE OFFENDER_ID = :pFromRootOffenderId
                   AND FILE_CREATE_DATE BETWEEN :lvStartDate AND :lvEndDate)
}

TRANSFER_BOOKING_OMS_UPDATE_OFFENDER_FILE_TRANSACTIONS{
UPDATE OFFENDER_FILE_TRANSACTIONS
         SET OFFENDER_ID = :pToRootOffenderId,
             OFFENDER_FILE_SEQ = :offenderFileSeq,
             MODIFY_USER_ID = :modifyUserId, 
             MODIFY_DATETIME = CURRENT_TIMESTAMP
       WHERE (OFFENDER_ID, OFFENDER_FILE_SEQ) IN (
                SELECT OFFENDER_ID, OFFENDER_FILE_SEQ
                  FROM OFFENDER_COMMUNITY_FILES
                 WHERE OFFENDER_ID = :pFromRootOffenderId
                   AND FILE_CREATE_DATE BETWEEN :lvStartDate AND :lvEndDate)
}

TRANSFER_BOOKING_OMS_UPDATE_OFFENDER_COMMUNITY_FILES{
  UPDATE OFFENDER_COMMUNITY_FILES
         SET OFFENDER_ID = :pToRootOffenderId,
             OFFENDER_FILE_SEQ = :offenderFileSeq,
             OFFENDER_FILE_NUM = :offenderFileNum,
             MODIFY_USER_ID = :modifyUserId, 
             MODIFY_DATETIME = CURRENT_TIMESTAMP
       WHERE OFFENDER_ID = :pFromRootOffenderId
         AND FILE_CREATE_DATE BETWEEN :lvStartDate AND :lvEndDate
}


TRANSFER_BOOKING_OMS_GET_OFF_COMM_FILE_OBJ{
SELECT * FROM OFFENDER_COMMUNITY_FILES OCF WHERE OFFENDER_ID = :pToRootOffenderId
}

TRANSFER_BOOKING_OMS_TRANSFER_BOOKING_TABLE_GET_OFF_COUNT{
  select
	COUNT (*) as last_name_key ,
	MIN (A.OFFENDER_ID) as first_name_key 
from
	OFFENDERS A,
	OFFENDERS B
where
	A.LAST_NAME = B.LAST_NAME
	and A.FIRST_NAME = B.FIRST_NAME
	and coalesce(A.MIDDLE_NAME, '(mid_name)') = coalesce(B.MIDDLE_NAME, '(id_name)')
	and coalesce(A.SEX_CODE, '(sex_c)') = coalesce(B.SEX_CODE, '(sex_c)')
	and coalesce(A.SUFFIX, '(suffix)' )= coalesce(B.SUFFIX, '(suffix)')
	and coalesce(A.BIRTH_PLACE, '(birth_place)') = coalesce(B.BIRTH_PLACE, '(birth_place)')
	and coalesce(A.BIRTH_COUNTRY_CODE, '(birth_country)') = coalesce(B.BIRTH_COUNTRY_CODE, '(birth_country)')
	and coalesce(A.RACE_CODE, '(race_code)') = coalesce(B.RACE_CODE, '(race_code)')
	and A.ROOT_OFFENDER_ID = :pToRootOffId
	and B.OFFENDER_ID = :pFromOffId
}	

TRANSFER_BOOKING_OMS_TRANSFER_BOOKING_TABLE_GET_NXT_VAL{
SELECT NEXTVAL('OFFENDER_ID') FROM dual
}

TRANSFER_BOOKING_OMS_TRANSFER_BOOKING_TABLE_INSERT_TR_OFF_VALS{
INSERT INTO OFFENDERS
                     (OFFENDER_ID, OFFENDER_NAME_SEQ, ID_SOURCE_CODE, LAST_NAME, NAME_TYPE,
                      FIRST_NAME, MIDDLE_NAME, BIRTH_DATE, SEX_CODE, SUFFIX, LAST_NAME_SOUNDEX,
                      BIRTH_PLACE, BIRTH_COUNTRY_CODE, CREATE_DATE, LAST_NAME_KEY,
                      ALIAS_OFFENDER_ID, FIRST_NAME_KEY, MIDDLE_NAME_KEY, OFFENDER_ID_DISPLAY,
                      ROOT_OFFENDER_ID, CASELOAD_TYPE, MODIFY_USER_ID, MODIFY_DATETIME,
                      ALIAS_NAME_TYPE, PARENT_OFFENDER_ID, UNIQUE_OBLIGATION_FLAG, SUSPENDED_FLAG,
                      SUSPENDED_DATE, RACE_CODE, REMARK_CODE, ADD_INFO_CODE, BIRTH_COUNTY,
                      BIRTH_STATE, MIDDLE_NAME_2, TITLE, AGE, CREATE_USER_ID, LAST_NAME_ALPHA_KEY,
                      CREATE_DATETIME, NAME_SEQUENCE)
            values (:offenderId, :offenderNameSeq, :idSourceCode, :lastName, :nameType,
                   :firstName, :middleName, :birthDate, :sexCode, :suffix, :lastNameSoundex,
                   :birthPlace, :birthCountryCode, :createDate, :lastNameKey, :aliasOffenderId,
                   :firstNameKey, :middleNameKey, :offenderIdDisplay, :rootOffenderId,
                   :caseloadType, null, null, :aliasNameType,
                   :parentOffenderId, :uniqueObligationFlag, :suspendedFlag, :suspendedDate,
                   :raceCode, :remarkCode, :addInfoCode, :birthCounty, :birthState, :middleName2,
                   :title, :age, :createUserId, :lastNameAlphaKey, current_timestamp, :nameSequence)             
}            
 
TRANSFER_BOOKING_OMS_TRANSFER_BOOKING_TABLE_GET_TR_OFF_VALS{
SELECT * FROM offenders o  WHERE OFFENDER_ID = :offenderId
}

TRANSFER_BOOKING_OMS_TRANSFER_BOOKING_TABLE_UPDATE_OFFENDER_BOOKINGS{
UPDATE OFFENDER_BOOKINGS
         SET OFFENDER_ID = :lvOffenderId,
             ROOT_OFFENDER_ID = :pToRootOffId,
             MODIFY_USER_ID = :modifyUserId, 
             MODIFY_DATETIME = CURRENT_TIMESTAMP
       WHERE OFFENDER_BOOK_ID = :pFromOffBookId
}

TRANSFER_BOOKING_OMS_TRANSFER_BOOKING_TABLE_GET_OFFENDER_BOOKINGS{
 SELECT * FROM offender_bookings ob  WHERE offender_book_id  = :pFromOffBookId
}
	
TRANSFER_BOOKING_OMS_TRANSFER_OFF_IDENTIFIERS_GET_NEW_SEQ_CURS{
SELECT COALESCE(MAX (CAST (OFFENDER_ID_SEQ AS FLOAT)),1)
           FROM OFFENDER_IDENTIFIERS
          WHERE OFFENDER_ID = :pToOffId
}

TRANSFER_BOOKING_OMS_TRANSFER_OFF_IDENTIFIERS_GET_OFF_ID_SEQ_CUR{
 SELECT OFFENDER_ID_SEQ
        FROM OFFENDER_IDENTIFIERS
       WHERE OFFENDER_ID = :pFromOffId
       ORDER BY OFFENDER_ID_SEQ
}

TRANSFER_BOOKING_OMS_TRANSFER_OFF_IDENTIFIERS_DELETE_OFF_IDENTF{
delete
from
	OFFENDER_IDENTIFIERS OI3
where
	OI3.OFFENDER_ID = :pFromOffId
	and OI3.CREATE_DATETIME between :lvStartDate and :lvEndDate
	and OI3.OFFENDER_ID_SEQ in
             (
	select
		OI1.OFFENDER_ID_SEQ
	from
		OFFENDER_IDENTIFIERS OI1
	where
		OI1.OFFENDER_ID = :pFromOffId
		and OI1.CREATE_DATETIME between :lvStartDate and :lvEndDate
		and exists
                     (
		select
			1
		from
			OFFENDER_IDENTIFIERS OI2
		where
			OI2.OFFENDER_ID != OI1.OFFENDER_ID
			and OI2.IDENTIFIER_TYPE = OI1.IDENTIFIER_TYPE
			and OI2.IDENTIFIER = OI1.IDENTIFIER
			and OI2.ROOT_OFFENDER_ID = :pToRootOffId))
}

TRANSFER_BOOKING_OMS_TRANSFER_OFF_IDENTIFIERS_UPDATE_OFFENDER_IDENTIFIERS{
UPDATE OFFENDER_IDENTIFIERS
                  SET OFFENDER_ID_SEQ = :lCount1,
                  MODIFY_USER_ID = :modifyUserId, 
             	  MODIFY_DATETIME = CURRENT_TIMESTAMP
                WHERE OFFENDER_ID = :pFromOffId
                  AND OFFENDER_ID_SEQ = :lvOffenderIdSeqP
}            

TRANSFER_BOOKING_OMS_TRANSFER_OFF_IDENTIFIERS_UPDATE_FINAL_OFFENDER_IDENTIFIERS{
 UPDATE OFFENDER_IDENTIFIERS
         SET OFFENDER_ID = :lvToOffenderId,
             ROOT_OFFENDER_ID = :pToRootOffenderId,
             OFFENDER_ID_SEQ = :lvOffenderIdSeqP,
             MODIFY_USER_ID = :modifyUserId, 
             MODIFY_DATETIME = CURRENT_TIMESTAMP
       WHERE OFFENDER_ID = :pFromOffenderId
         AND CREATE_DATETIME BETWEEN :lvStartDate AND :lvEndDate

}                  
                  



TRANSFER_BOOKING_OMS_GET_OFFENDER_NON_ASSOCIATIONS_DATA{
select * from OFFENDER_NON_ASSOCIATIONS where offender_id = :nsOffenderId
}

TRANSFER_BOOKING_OMS_GET_OFFENDER_NA_DETAILS_DATA{
select * from OFFENDER_NA_DETAILS where offender_id = :nsOffenderId
}

TRANSFER_BOOKING_OMS_INSERT_OFFENDER_NON_ASSOCIATIONS_DATA{
insert into offender_non_associations (offender_id, ns_offender_id,offender_book_id,ns_offender_book_id,ns_reason_code,ns_level_code,internal_location_flag,
transport_flag,recip_ns_reason_code,create_datetime, create_user_id, modify_datetime, modify_user_id, seal_flag) 
values (:offenderId, :nsOffenderId, :offenderBookId, :nsOffenderBookId, :nsReasonCode, :nsLevelCode, :internalLocationFlag,
:transportFlag, :recipNsReasonCode, CURRENT_TIMESTAMP, :createUserId, NULL, NULL, :sealFlag)
}

TRANSFER_BOOKING_OMS_INSERT_OFFENDER_NA_DETAILS_DATA{
insert into offender_na_details (offender_id, ns_offender_id,offender_book_id,ns_offender_book_id,type_seq,ns_reason_code,ns_level_code,ns_type, 
ns_effective_date,ns_expiry_date,authorized_staff,comment_text,recip_ns_reason_code,  create_datetime, create_user_id, modify_datetime, modify_user_id, seal_flag) 
values (:offenderId, :nsOffenderId, :offenderBookId, :nsOffenderBookId, :typeSeq, :nsReasonCode, :nsLevelCode, :nsType, :nsEffectiveDate,
:nsExpiryDate, :authorizedStaff, :commentText, :recipNsReasonCode, CURRENT_TIMESTAMP, :createUserId, null, null, :sealFlag)
}
 
TRANSFER_BOOKING_OMS_ADDR_DATA{
SELECT ADDRESS_ID FROM ADDRESSES WHERE OWNER_CLASS = 'OFF' AND OWNER_ID = :pFromOffenderId AND CREATE_DATETIME BETWEEN :pStartDate AND :pEndDate AND (MODIFY_DATETIME IS NULL OR MODIFY_DATETIME BETWEEN :pStartDate AND :pEndDate)
}

TRANSFER_BOOKING_OMS_GET_OFFENDERS_DETAILS{
select * from offenders where offender_id = :offenderId
}

